---
title: "Working with data"
author: Géraldine Derroire
institute: Cirad - UnB
date: last-modified
format: 
  revealjs:
    theme: solarized
    output-location: fragment 
    slide-number: true
    preview-links: true
    chalkboard: true
    link-external-icon: true
    link-external-newwindow: true
    incremental: true
execute:
  echo: true   
  warning: true
  message: true 
editor: 
  markdown: 
    wrap: sentence
---

## Let's work on Barro Colorado Island data

A 50-ha long-term forest monitoring plot established in 1980

![](BCI.png){width="80%"}

[To know more about BCI](https://stri.si.edu/facility/barro-colorado){preview-link="false"}

::: notes
smithonian
Hubbel neutral theory of biodiversity
:::

## Let's work on Barro Colorado Island data

We will work with data on the environment of the 50 1-ha plots.

These data are available within the package [vegan]{style="color:indianred;"}.

You should have already installed the package, let's load it:

```{r}
library(vegan)
```

[We use the command [data]{style="color:indianred;"} to open the data:]{.fragment}

::: fragment
```{r}
data("BCI.env")
```
:::

[We can now see the data in the *Environment*. What does it say?]{.fragment}

::: notes
in the enviro: 50 obs of 9 variables the object is called BCI.env
:::

## Let's work on Barro Colorado Island data

Let's see what is BCI.env

::::: columns
::: {.column width="70%"}
```{r}
BCI.env
```
:::

::: {.column width="30%"}
[BCI.env contains environmental variables in columns, and observations (here each 50 1-ha plot) in rows.]{.fragment}
:::
:::::

## Let's work on Barro Colorado Island data

Displaying the data set in the console is not very helpful...

We can display it in a separate tab using the function [View]{style="color:indianred;"}

```{r, eval=FALSE}
View(BCI.env)
```

[or by clicking on the table icon in the environment: ![](view.png){width="80%"}]{.fragment}

## Data frame

::::: columns
::: {.column width="50%"}
BCI.env is a [data frame]{style="color:indianred;"}:

```{r}
is.data.frame(BCI.env)
```

[A data frame is a type of R object that contains data with observations in row and variables in columns.]{.fragment}
:::

::: {.column width="50%"}
![](dataframe.png)
:::
:::::

[The data frame is the structure the most commonly used by scientists.]{.fragment}

## Structure of a data frame

To know the dimension of the data frame, we can use the functions [nrow]{style="color:indianred;"} and [ncol]{style="color:indianred;"}:

```{r}
nrow(BCI.env)
```

::: fragment
```{r}
ncol(BCI.env)
```
:::

[BCI.env contains `r nrow(BCI.env)` observations and `r ncol(BCI.env)` variables, as indicated in the environment.]{.fragment}

[We can also use the function [dim]{style="color:indianred;"} to get both dimensions (1st the number of rows, second the number of columns).]{.fragment}

::: fragment
```{r}
dim(BCI.env)
```
:::

## Structure of a data frame

The function [names]{style="color:indianred;"} gives the columns names, which are the names of the variables.

```{r}
names(BCI.env)
```

[To know more about these variables, we can look at the help:]{.fragment}

::: fragment
```{r, eval=FALSE}
?BCI.env
```
:::

## Structure of a data frame

The function [structure]{style="color:indianred;"} give a more detail overview of a data frame:

```{r}
str(BCI.env)
```

[This gives the **dimensions** of the data frame, and the **name** and **class** of each variable.]{.fragment}

[**NB:** Variables can be of different classes.]{.fragment}

::: notes
This function is very useful, you should always use it to look at the structure when working with a new data frame.
looking at the structure (and especially the class of the variables) can help detect problems in the data frame
:::

## Structure of a data frame

We can also access the structure by clicking on the blue arrow in the environment:

![](str.png)

## Variables of a data frame

Each variable (*each column*) of a data frame is a vector.

We can access the variables using [\$]{style="color:indianred;"}

```{r}
BCI.env$Precipitation
```

[To see only the first or last values, we use the functions [head]{style="color:indianred;"} or [tail]{style="color:indianred;"}.
We can specify the number of observations to show in the second argument:]{.fragment}

::: fragment
```{r}
head(BCI.env$Precipitation)
```
:::

::: fragment
```{r}
head(BCI.env$Precipitation, 15)
```
:::

::: notes
each colum is a vector =\> so we can use all the things we have seen on the manipulation of vector in a previous session
:::

## Indexation

We can access the content of a data frame using [\[\]]{style="color:indianred;"}

A variable (column):

```{r}
BCI.env[,4]
```

[An observation (row):]{.fragment}

::: fragment
```{r}
BCI.env[5,]
```
:::

[or a value (row and column):]{.fragment}

::: fragment
```{r}
BCI.env[5,4]
```
:::

::: notes
We need to have the , to indicate if we want the row or column
:::

## Indexation

Since the variables have a name, we can also access them by name:

```{r}
BCI.env[5,"Elevation"]
```

[We can access several observations and/or several variables at the same time:]{.fragment}

::: fragment
```{r}
BCI.env[5:8, c("Precipitation", "Elevation")]
```
:::

[*5:8 means from 5 to 8*]{.fragment}

::: notes
rows could also have a name so we could call them by names

This is not the case in our data.

To add names to the row, we can use the function row.names()
:::

## Add a variable to a data frame

We can also use [\$]{style="color:indianred;"} to create a new variable to a data frame.
Let's add the site (BCI):

```{r}
BCI.env$Site <- rep("BCI", 50)
```

[The function [rep]{style="color:indianred;"} allows to repeat the same value (here "BCI") a certain number of times (here 50).]{style="font-size: 23px"}

[**NB:** the dimensions of the data frame have changed:]{.fragment}

::: fragment
```{r}
dim(BCI.env)
```
:::

## Add a variable to a data frame

We can check the new structure of the data frame:

```{r}
str(BCI.env)
```

[We can transform the variable *site* to a factor using the function [as.factor]{style="color:indianred;"}]{.fragment}

::: fragment
```{r}
BCI.env$Site <- as.factor(BCI.env$Site)
```
:::

::: notes
now you can check the structure again
:::

## Add a variable to a data frame

We can also add a variable by doing an operation on an existing variable.
Let's add the precipitations in meters:

```{r}
BCI.env$Precip_m <- BCI.env$Precipitation / 1000
```

[Let's check the new structure:]{.fragment}

::: fragment
```{r}
str(BCI.env)
```
:::

::: notes
in practice, doesn't make much sense to have precipitation in meters...
:::

# Univariate descriptive statistics

::: notes
descriptive statistics are summary statistics They help us to get a feel of our data Important to use them often
:::

## Descriptive statistics on a quantitative variable

Which are the quantitative variables in our data set?

```{r}
str(BCI.env)
```

[UTM.EW, UTM.NS, Precipitation, Elevation, EnvHet (and Precip_m)]{.fragment}

::: notes
Everyone knows the difference between quantitative (numeric) and qualitative variables (limited number of values = modalities = categories)?
:::

## Descriptive statistics on a quantitative variable

Let's consider the environmental heterogeneity (see the help to know how it was calculated).

We can use the functions [min]{style="color:indianred;"}, [max]{style="color:indianred;"} and [range]{style="color:indianred;"} to explore the extreme values of the variable:

```{r}
min(BCI.env$EnvHet)
```

::: fragment
```{r}
max(BCI.env$EnvHet)
```
:::

::: fragment
```{r}
range(BCI.env$EnvHet)
```
:::

::: notes
We have already seen this functions for vectors =\> variables of a data frame are vectors
:::

## Indicators of centrality

We already know how to get the mean:

```{r}
mean(BCI.env$EnvHet)
```

[We can get the median using the function [median]{style="color:indianred;"}]{.fragment}

::: fragment
```{r}
median(BCI.env$EnvHet)
```
:::

[🤔 Do you remember what is the median?]{.fragment}

[*It is the middle value: half of the values are lower than the median and half are higher.*]{.fragment}

## Indicators of dispersion

The simpler one is the extent of the distribution:

```{r}
max(BCI.env$EnvHet) - min(BCI.env$EnvHet)
```

[We can also get the **variance** and the **standard deviation** (which is the square root of the variance), using the functions [var]{style="color:indianred;"} and [sd]{style="color:indianred;"}]{.fragment}

::: fragment
```{r}
var(BCI.env$EnvHet)
```
:::

::: fragment
```{r}
sd(BCI.env$EnvHet)
```
:::

[The higher the variance (and the standard deviation) the more dispersed the values are around the mean.]{.fragment}

::: notes
variance = sum of the squared differences between each data point and the mean, divided by the number of data values
:::

## Indicators of dispersion

We can also look at the quantiles.

[🤔 What is a quantile?]{.fragment}

[A quantile is a value that divides a vector into equal-size groups, to understand the distribution of the data]{.fragment}

## Indicators of dispersion

For example, we can look at the *quartiles* that divides the distribution in 4.

-   1/4 (25%) of the values are below the first quartile:

::: fragment
```{r}
quantile(BCI.env$EnvHet, prob = 0.25)
```
:::

[*prob indicate which quantile we want*]{.fragment}

## Indicators of dispersion

-   the second quartile is equal to the median (1/2 of the values are below and 1/2 are above)

::: fragment
```{r}
quantile(BCI.env$EnvHet, prob = 0.5) == median(BCI.env$EnvHet)
```
:::

-   3/4 (75%) of the values are below the third quartile:

::: fragment
```{r}
quantile(BCI.env$EnvHet, prob = 0.75)
```
:::

## Indicators of dispersion

But we can also consider other quartiles, for example the percentiles (dividing the vector in 100).

95% of the values are between the percentile 2.5 and the percentile 97.5:

```{r}
quantile(BCI.env$EnvHet, prob = c(0.025, 0.975))
```

::: notes
Here we have only 50 values so it doesn't make much sense to divide them in 100 groups...
:::

## The function summary

The function [summary]{style="color:indianred;"} gives several indicators in one go:

```{r}
summary(BCI.env$EnvHet)
```

## Graphical representation of a quantitative variable - the histogram

::::: columns
::: {.column width="70%"}
```{r}
hist(BCI.env$EnvHet)
```
:::

::: {.column width="30%"}
[A **histogram** makes classes (on the *x* axis) and count the number of values per class (the frequency, on the *y* axis).]{.fragment}
:::
:::::

::: notes
I don't show here how to make this graph pretty, we will do it with ggplot in a future session
:::

## Descriptive analysis on a qualitative variable

Which are the qualitative variables in our data set?

```{r}
str(BCI.env)
```

[Age.cat, Geology, Habitat, Stream (and Site)]{.fragment}

## Descriptive analysis on a qualitative variable

Let's consider the variable habitat:

We can use the function [table]{style="color:indianred;"} to count the number of occurrences in each category (each levels of the factor);

```{r}
table(BCI.env$Habitat)
```

[⚠️ By default, we don't see the missing values (NA). To get them, we need to use the argument useNA:]{.fragment}

::: fragment
```{r}
table(BCI.env$Habitat, useNA = "always")
```
:::

## Descriptive analysis on a qualitative variable

We can also use the function [freq]{style="color:indianred;"} from the package [questionr]{style="color:indianred;"}:

::::: columns
::: {.column width="75%"}
```{r}
questionr::freq(BCI.env$Habitat, 
                total = TRUE, # add the total
                sort = "dec") # sort by decending order
```
:::

::: {.column width="25%"}
[💡 *using the name of the package before the name of the function with :: (here questionr::freq) allows not to load the whole package*]{style="font-size: 20px"}
:::
:::::

-   [*n* is the number of observations per category]{style="font-size: 30px"}

-   [*%* is the percentage]{style="font-size: 30px"}

-   [*val%* is the percentage calculated on valid values (excluding *NA*)]{style="font-size: 30px"}

::: notes
In our case, there is no NA so % and val% are the same
:::

## Graphical representation of a qualitative variable - the barplot

::::: columns
::: {.column width="30%"}
We can use a barplot to represent the number of observations per category, with the function [barplot]{style="color:indianred;"}:
:::

::: {.column width="70%"}
```{r}
tab <- table(BCI.env$Habitat)
tab <- sort(tab) # order in ascending order
barplot(tab)
```
:::
:::::

::: notes
Here we have to proceed in two steps: first create the table, and then make the barplot and we can add a step to order the categories

Make sure that everyone understands the difference between a histogram and a barplot
:::

## Graphical representation of a qualitative variable - the Cleveland plot

::::: columns
::: {.column width="25%"}
We can also make a Cleveland plot using the function [dotchart]{style="color:indianred;"}:
:::

::: {.column width="75%"}
```{r}
dotchart(as.vector(tab), # convert the table to a vector
         labels = names(tab)) # specify the labels
```
:::
:::::

# Overview of the whole data frame

## The function summary

We have already used the function [summary]{style="color:indianred;"} on a vector.
We can also use it on a whole data frame:

::: {.scroll-output style="max-height: 300px; overflow-y: auto;"}
```{r}
summary(BCI.env)
```
:::

[We get the summary statistics for quantitative variables, and the number of observations per categories for categorical ones.]{.fragment}

::: notes
Using **str** and **summary** to explore a new data set is a good practice.
:::

## To go further

Some packages propose functions to create automatic reports to explore a data frame.

-   The package [dataMaid]{style="color:indianred;"}:

::: fragment
```{r, eval=FALSE}
dataMaid::makeCodebook(BCI.env)
```
:::

[See result [here](https://geraldinederroire.github.io/Course_R_Forest_Sciences/3_manip_data/codebook_BCI.env.pdf){preview-link="false"}]{.fragment}

-   The package [DataExplorer]{style="color:indianred;"}:

::: fragment
```{r, eval=FALSE}
DataExplorer::create_report(BCI.env)
```
:::

[See result [here](https://geraldinederroire.github.io/Course_R_Forest_Sciences/3_manip_data/report.html){preview-link="false"}]{.fragment}

::: notes
don't do it now...
don't have the packages installed

depending how late it is =\> explore them a bit or not (still about 30min of content left)

mode: most represented value

Q–Q plot (quantile–quantile plot) is a probability plot, a graphical method for comparing two probability distributions by plotting their quantiles against each other.
On x the normal distrib, on y our variable
:::

# Different ways of getting data

::: notes
So far we have use a example data set from a package, but we will want to use our own data
:::

## Creating a data frame in R

We can create a data frame using the function [data.frame]{style="color:indianred;"}:

```{r}
My_data <- data.frame(Site = c("Site1", "Site2", "Site3", "Site4"), 
                 Temp = c(25.8, 29.3, 32, 31.3),
                 Precip = c(1423, 1532, 1489, 1567),
                 Veget = c("Savana", "Forest", "Savana", "Savana"))
```

[To do this, we enter each variable as a vector.]{.fragment}

::: notes
makesure they understand the synthax, especally the ""
:::

## Creating a data frame in R

Let's visualise it:

```{r}
str(My_data)
```

::: notes
What do we need to check?

The dim

The type/mode of variables
:::

## Creating a data frame in R

We can then transform some variables to factors if relevant:

```{r}
My_data$Veget <- as.factor(My_data$Veget)
```

[We can check the structure again:]{.fragment}

::: fragment
```{r}
str(My_data)
```
:::

::: notes
in practices, we don't type dataframe in R, too tidious, and easy to make mistakes.
:::


## Importing data from a text file

The most common way to exchange data is through a text file in which variables are organised in columns.

Before importing data, it is important to know the structure of the data:

* Are there headers, meaning that the first line contains the names of the columns?

* How are the variables separated? This can be tabulations, or commas ([,]{style="color:indianred;"}), or semicolon ([;]{style="color:indianred;"})

* What is the separator of decimals?

[Let's look at what is in the file *BCI_env.csv*]{.fragment}

::: notes
to view the file, either click on it in Rstudio and click view, or open it directly from the file explorer

in practice a data file should contain a header, otherwise we don't know the variable names
:::


## Importing data from a text file

There are many types of text files.

The recommended one for exchanging data is the format [CSV]{style="color:indianred;"}.

CSV means *Comma-Separated Values*: CSV files use comma ([,]{style="color:indianred;"}) as delimiter of columns.

⚠️ depending of the software and the configuration of your computer, CSV files can use the [;]{style="color:indianred;"} by default.


## Importing data from a text file

We can use RStudio interface to import data:

* *File/Import Dataset*, *From Text (base)...*

* or in the *Environment/Import Dataset*, *From Text (base)...*

::: fragment
![](import.png)
:::

[Let's import the dataset *BCI_env.csv*]{.fragment}

## Importing data from a text file

We can then set the correct structure for the data:

![](import2.png)

## Importing data from a text file

We can alternatively use the function [read.csv]{style="color:indianred;"}:

```{r}
BCI.env <- read.csv(file = "data/BCI_env.csv", # the file name and its relative path
                    header = TRUE) # the data have headers (column names)
```

[By default, the separator of columns is the [,]{style="color:indianred;"} and the separator of decimal the [.]{style="color:indianred;"}]{.fragment}

[⚠️ Make sure you put the data in an object (otherwise, they are just displayed).]{.fragment}


## Importing data from other formats

You can also import data from a statistics software (SPSS, SAS, Stata...) or from Excel.

But using a universal data format (CSV) is preferred.


## Good practice when typing data in spreadsheet

*You can use Excel, Google Sheets, LibreOffice Calc...*

-   One dataset (one table) per spreadsheet

-   Give clear headers (column names)

-   No empty row or column

-   No merged cells

-   Use a unique identifier (ID) for each observation

::: notes
ok, but how do we get the data in the text file?

unique identifier: unique number for each observation
:::

## Good practice when typing data in spreadsheet

-   Leave empty cells for missing values (or write "NA")

-   Avoid special characters

-   Use . for the decimal separator

-   Use YYYY-MM--DD for dates *(handling dates in Excel* 😭🤬*)*

-   Export as a CSV (Comma-Separated Values), which uses comma [,]{style="color:indianred;"} as delimiter of column


## Writing data to a csv

We can save a data frame from R to a csv file using the function [write.csv]{style="color:indianred;"}:

```{r, eval=FALSE}
write.csv(x = BCI.env, # the object to be written
          file = "data/BCI_env.csv", # the file to write in (and its relative path)
          row.names = FALSE) # no row names
```

[By default, the separator of columns is the [,]{style="color:indianred;"} and the separator of decimal the [.]{style="color:indianred;"}]{.fragment}

## Writing data to a csv

We can use different separators, **but this is not recommended**.

If we use different separators with the function [write.csv]{style="color:indianred;"}, it ignores them:

```{r}
write.csv(x = BCI.env, # the object to be written
          file = "data/BCI.env_semicol.csv", # the file to write in (and its relative path)
          sep=";", # the separator of columns
          dec = ",", # the separator of decimals
          row.names = FALSE) # no row names
```

## Writing data to a csv

If we really want to change the separators, we need the function [write.csv2]{style="color:indianred;"}, which uses a [;]{style="color:indianred;"} to separate the columns and a [,]{style="color:indianred;"} for the decimals:

```{r}
write.csv2(x = BCI.env, # the object to be written
          file = "data/BCI.env_semicol.csv", # the file to write in (and its relative path)
           row.names = FALSE) # no row names
```

# Good practive when working with data

## Raw *versus* derived data

What are the raw data?

[The *raw data* are the data in the form they were originally generated:]{.fragment}

* by an sensor, instrument...

* by the tablet/computer used in the field

* in paper field sheets (in that case, also save the spreadsheet in which data are first recorded)

* ...


## Raw *versus* derived data

Never modify the raw data. 

[⚠️ **Any data that has been modified/corrected is no longer raw data, it is derived data.**]{.fragment}

[🔒 Put the raw data in a read only mode.]{.fragment}

## Backup your data

⚠️️ The raw data should be saved in **more than one location**!

![](bad_luck.png)

## Document your data

* Use informative variable and file names

* Write detailed metadata (protocol, units of measurement, date, people...)


## Check data when importing them

Make sure the data are correctly read by checking 

* the dimension of the data frame

* if all variables (columns) have a name 

* that there are no duplicated column names

* the mode of each variable [*For example, if a numerical data is stored in a character vectors, there must be a typo somewhere.*]{.fragment}

[The functions [dim]{style="color:indianred;"}, [str]{style="color:indianred;"}, [summary]{style="color:indianred;"} are your best friends!]{.fragment}


## Check data when importing them

Use [summary]{style="color:indianred;"} and graphs to check the content of the variables.

For quantitative variable: 

* any impossible value (ex: a negative size)?

* any outlier? an outlier is not necessarily a mistake, but you need to ask yourself the question

## Check data when importing them

[For qualitative data: ]{.fragment}

* any non possible category (level)?

* any level written in two different ways (Site1, site1, site_1...)?

[For both: ]{.fragment}

* any missing data?



## Acknowledgments {.smaller}

This document uses the following:

::: {.nonincremental}

* *Introduction à R et au tidyverse* - Julien Barnier   [in French](https://juba.github.io/tidyverse/){preview-link="false"}

* *Introduction à l’analyse d’enquêtes avec R et RStudio* - Julien Barnier, Julien Biaudet, François Briatte, Milan Bouchet-Valat, Ewen Gallic, Frédérique Giraud, Joël Gombin, Mayeul Kauffmann, Christophe Lalanne, Joseph Larmarange, Nicolas Robette [in French](https://larmarange.github.io/analyse-R/){preview-link="false"}

* *Biodiversity data: From data collection to publication. An FRB-CESAB, PNDB & GBIF France training course* Casajus N, Coux C, Le Bras Y, Norvez O, Archambeau A-S & Pamerlon S (2024) [URL](https://biodiversitydata.github.io/){preview-link="false"}

* Introductory class of Mélaine Aubry-Kientz, Julien Claude and Marine Zwicke (University of Montpellier)

:::

## Ressources

::: {.nonincremental}

* *How to R* (Videos in English) [Here](https://www.youtube.com/watch?v=hGkPgYfgapY){preview-link="false"} 

* Aulas *R do basico eo avançado* - Murilo S. Dias (Videos em Portuguese, aula 15) [Here](https://www.youtube.com/watch?v=zC5VMELgRG4&list=PLSYhm4WnLPLBciaJOvx25ohO8yaxmae8k&index=15){preview-link="false"} 

* Wilson *et al* (2017) *Good enough practices in scientific computing* Downloadable [here](https://journals.plos.org/ploscompbiol/article?id=10.1371/journal.pcbi.1005510){preview-link="false"}

:::

## Ressources to go further

::: {.nonincremental}

**On data format**

* *Data formats* - Nicolas Casajus [Here](https://biodiversitydata.github.io/chapters/files-formats.htmll){preview-link="false"}

**On data management**

- British Ecological Society (2017) *Data-management* Downloadable [here](https://www.britishecologicalsociety.org//wp-content/uploads/2024/12/BES-Data-management-guide.pdf){preview-link="false"}

**On where to get biodiversity data**

* *Biodiversity data: From data collection to publication. An FRB-CESAB, PNDB & GBIF France training course* Casajus N, Coux C, Le Bras Y, Norvez O, Archambeau A-S & Pamerlon S (2024) [URL](https://biodiversitydata.github.io/){preview-link="false"}

:::
