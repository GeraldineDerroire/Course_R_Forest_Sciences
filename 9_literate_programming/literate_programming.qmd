---
title: "Literate programming with quarto"
author: G√©raldine Derroire
institute: Cirad - UnB
date: last-modified
format: 
  revealjs:
    theme: solarized
    output-location: fragment 
    slide-number: true
    chalkboard: true
    link-external-icon: true
    link-external-newwindow: true
    incremental: true
execute:
  echo: true   
  warning: true
  message: true 
  cache: true
editor: 
  markdown: 
    wrap: sentence
---

```{=html}
<!-- everywhere, use both the 
quarto doc
r4ds
-->
```

# Introduction to [Quarto]{style="color:indianred;"}

## Literate programming

::: {.column width="70%"}
[*Literate programming is a programming paradigm introduced in 1984 by Donald Knuth in which a computer program is given as an explanation of how it works in a natural language, such as English, interspersed (embedded) with snippets of macros and traditional source code, from which compilable source code can be generated.*]{style="font-size: 30px"}
:::

::: {.column width="30%"}
![](litt_prog.png)
:::

Literate programming mixes **code** with **natural language**.

[Source: [Wikipedia](https://en.wikipedia.org/wiki/Literate_programming#cite_note-TCJ_LP-1){preview-link="false"}]{style="font-size: 22px"}

## Why use literate programming?

-   For yourself: a **modern-day lab notebook** : keep track of what you did, how you did it and why

-   For **collaborating** with other scientists: share results and the code that produced them

-   For a wider audience: **communicate** results clearly while ensuring reproducibility and easy updates

::: notes
Strongly encourage to do a quarto document for a paper, or your thesis
:::

## What is [Quarto]{style="color:indianred;"}?

[Quarto]{style="color:indianred;"} is an open-source tool for creating **dynamic documents** that combine code, results and text to produce **reproducible outputs in multiple formats** (reports, websites, slides...).

![](quarto.png){fig-align="center"}

# Getting started

## Creating a new Quarto document

[Quarto]{style="color:indianred;"} is pre-installed with RStudio.

::: {.column width="60%"}
To create a new document: *File/New File/Quarto Document*

You can choose between different types of document.
Choose *Document*, fill in a title and a author name and *Create*
:::

::: {.column width="40%"}
![](new_qmd.png)
:::

This open a document containing plant text and R code.

## Rendering

-   Click on ![](setting.png) and choose *Preview in Viewer Pane*

:::: fragment
::: nonincremental
-   Click on ![](render.png)
:::

![](rstudio-render.png)
::::

[When **rendering**, Quarto generates a new file that contains selected text, code, and results from the .qmd file. *Note that you now have a .html file in the Files pane.*]{.fragment}

## Rendering

You can view the rendered document in the Viewer pane:

![](viewer.png)

## Visual editor

The **Visual editor** is an interface where you can use buttons to easily format text, insert images , tables..

![](visual.png){fig-align="center"}

The **Visual editor** save the content of your document in Markdown format.

::: notes
try to add text, format it, play with it
:::

## Source editor

You can view and edit the plain Markdown document in the **Source editor**:

![](source.png){fig-align="center"}

## Content of a Quarto document

-   A YAML header: metadata and output settings

-   Text in Markdown format

-   Chunks of R code

![](content.png){fig-align="center"}

::: notes
in the YALM title and author + output format
:::

# Write with markdown syntax

## Markdown syntax

If you write text in the Visual editor, you can use the buttons and drop-down menu to format the text.

You can also write using the [markdown syntax]{style="color:indianred;"} in the Source editor.

*Markdown in a markup language used to format plain text in a simple and intuitive way.*

::: notes
A markup language is a way to annotate text to describe its structure and formatting, using special symbols or tags, so that computers can display it properly.

html is another markup languages

why would we use markdown?

-   easy when used to

-   exaclty as saved so easier to debug, easier with version control

But totally ok to use the Visual editor
:::

## Text formating

::: {.column width="60%"}
![](syntax_raw.png)
:::

::: {.column width="40%"}
![](syntax_rendered.png)
:::

## Figures

::: {.column width="60%"}
[To add a figure with a caption:]{style="font-size: 30px"}

``` markdown
![Caption](quarto_logo.png)
```

[Formatting options:]{style="font-size: 30px"}

``` markdown
Figure size
  ![Caption](quarto_logo.png){width=300}
  ![Caption](quarto_logo.png){height=80%}

Figure Alignment
  ![Caption](quarto_logo.png){fig-align="left"}
  ![Caption](quarto_logo.png){fig-align="center"}
```
:::

::: {.column width="20%"}
:::

::: {.column width="20%"}
![Caption](quarto_logo.png){fig-align="center"}
:::

[Combines option with a space between arguments:]{style="font-size: 30px"}

``` markdown
![Caption](quarto_logo.png){height=80% fig-align="right"}
```

## Tables

[To add a table with markdown:]{style="font-size: 30px"}

::: {.column width="50%"}
``` markdown
| First Header | Second Header |
|--------------|---------------|
| Content Cell | Content Cell  |
| Content Cell | Content Cell  |
```
:::

::: {.column width="5%"}
:::

:::: {.column width="45%"}
::: {style="font-size: 28px"}
| First Header | Second Header |
|--------------|---------------|
| Content Cell | Content Cell  |
| Content Cell | Content Cell  |
:::
::::

[To add a caption and change the width of columns:]{style="font-size: 30px"}

::: {.column width="50%"}
``` markdown
| First Header | Second Header |
|--------------|---------------|
| Content Cell | Content Cell  |
| Content Cell | Content Cell  |

: Caption {tbl-colwidths="[75,25]"}
```
:::

::: {.column width="5%"}
:::

:::: {.column width="45%"}
::: {style="font-size: 28px"}
| First Header | Second Header |
|--------------|---------------|
| Content Cell | Content Cell  |
| Content Cell | Content Cell  |

: Caption {tbl-colwidths="\[75,25\]"}
:::
::::

## Equations

[To write equations in Quarto, we have to use the **LaTex syntax**.]{style="font-size: 30px"}

[Equations can be place in a separate line, with]{style="font-size: 30px"}[\$\$...\$\$]{style="color:lightgreen;"}:

``` markdown
$$y \sim \mathcal N(\alpha + \sum_{i=1}^n\beta_n \times x_n, \sigma^2)$$
```

[$$y \sim \mathcal N(\alpha + \sum_{i=1}^n\beta_n \times x_n,\sigma^2)$$]{style="font-size: 30px"}

[They can also be displayed inline, with]{style="font-size: 30px"}[\$...\$]{style="color:lightgreen;"}:

``` markdown
This equation is displayed inline: $y = e^{\alpha}$
```

[*This equation is displayed inline:* $y = e^{\alpha}$]{style="font-size: 25px"}

[[More about LaTex equations](https://en.wikibooks.org/wiki/LaTeX/Mathematics)]{style="font-size: 22px"}

## Links

[To add a link:]{style="font-size: 30px"}

``` markdown
<https://quarto.org/docs/get-started/hello/rstudio.html>
```

[<https://quarto.org/docs/get-started/hello/rstudio.html>]{style="font-size: 30px"}

[To add a named link:]{style="font-size: 30px"}

``` markdown
[Quarto tutorial](https://quarto.org/docs/get-started/hello/rstudio.html)
```

[[Quarto tutorial](https://quarto.org/docs/get-started/hello/rstudio.html)]{style="font-size: 30px"}

## Cross-references

[To be able to add a reference to a figure, table, equation, section... in another part of the document, we need to give them an **identifier** in]{style="font-size: 30px"}[{#....}]{style="color:indianred;"}:

::: {.column width="65%"}
``` markdown
![Caption](quarto_logo.png){#fig-quarto}
```
:::

::: {.column width="10%"}
:::

::: {.column width="25%"}
![Caption](quarto_logo.png){#fig-quarto width="50%"}
:::

[We can then refer to it with]{style="font-size: 30px"}[\@]{style="color:indianred;"}:

``` markdown
@fig-quarto shows the logo of quarto.
```

@fig-quarto [ shows the logo of quarto.]

## Cross-references

Identifiers start with the type of item:

::: nonincremental
-   for a figure: [fig-]{style="color:indianred;"}

-   for a table: [tbl-]{style="color:indianred;"}

-   for an equation: [eq-]{style="color:indianred;"}

-   for a section: [sec-]{style="color:indianred;"}
:::

## Bibliography

https://rdatatoolbox.github.io/course-quarto/#/citations

https://quarto.org/docs/get-started/authoring/rstudio.html#citations

https://r4ds.hadley.nz/quarto.html#bibliographies-and-citations

TO DO

# Comptute with R

## Insert R code

[**Chunks of R code are executed by Quarto when you render the document.**]{style="font-size: 30px"}

::::: {.column width="50%"}
:::: fragment
[To add a chunk of R code:]{style="font-size: 30px"}

::: nonincremental
-   [click on ![](add_chunck.png) and select *R*]{style="font-size: 30px"}

-   [or use the shortcut [Ctrl + Alt + I]{style="color:indianred;"}]{style="font-size: 30px"}
:::
::::
:::::

:::: {.column width="50%"}
::: fragment
[This inserts a code chunk where you can write R code:]{style="font-size: 30px"}

![](chunck.png)

[Code chunks are surrounded by[\`\`\`{r}....\`\`\`]{style="color:indianred;"}.]{style="font-size: 30px"} 
:::
::::

::: fragment
[You can use ![](run_up.png) to run all previous chunks, and ![](run.png) to run the current chunk.]{style="font-size: 30px"}

[üí°Start your document with a chunk that loads the necessary packages.]{style="font-size: 30px"}
:::

## Chunk labels

[You can add a label to a chunk:]{style="font-size: 30px"}

![](chunk_label_1.png)

[This helps you navigate to a specific chunk using the drop down navigator:]{style="font-size: 30px"}

![](chunk_label.png){height="80%"}

[‚ö†Ô∏è Each chunk label must be unique.]{style="font-size: 30px"}

## Chunk options

[Chunk options control how the code will be rendered. The most important are:]{style="font-size: 30px"}

::: {style="font-size: 50%;"}
| Option | Run code | Show code | Show output | Show plots | Show messages | Show warnings |
|------------|---------|---------|---------|---------|---------|---------|
| eval: false | üö´ | ‚úÖ | üö´ | üö´ | üö´ | üö´ |
| include: false | ‚úÖ | üö´ | üö´ | üö´ | üö´ | üö´ |
| echo: false | ‚úÖ | üö´ | ‚úÖ | ‚úÖ | ‚úÖ | ‚úÖ |
| results: hide | ‚úÖ | ‚úÖ | üö´ | ‚úÖ | ‚úÖ | ‚úÖ |
| fig-show: hide | ‚úÖ | ‚úÖ | ‚úÖ | üö´ | ‚úÖ | ‚úÖ |
| message: false | ‚úÖ | ‚úÖ | ‚úÖ | ‚úÖ | üö´ | ‚úÖ |
| warning: false | ‚úÖ | ‚úÖ | ‚úÖ | ‚úÖ | ‚úÖ | üö´ |
:::

[[More about chunk options](https://yihui.org/knitr/options/)]{style="font-size: 22px"}

## Chunk options

[Chunk options are added one by one within the chunk:]{style="font-size: 30px"}

![](chunk_option2.png)

[Some chunk options can also be selected using the ![](setting.png) button:]{style="font-size: 30px"}

![](chunk_option1.png){height=75%}

## Inline code

[Small R codes can be embedded directly in the text by surrounding them with [\`r... \`]{style="color:indianred;"} .]{style="font-size: 32px"}

[This is very useful to present your data or your results, as this will be updated if the data change:]{style="font-size: 30px"}

```{r}
data("iris")
```

.

```{text}
The iris data have `r nrow(iris)` observations. 
The mean sepal length is `r mean(iris$Sepal.Length)`.
```

[*The iris data have `r nrow(iris)` observations. The mean sepal length is `r mean(iris$Sepal.Length)`.*]{style="font-size: 25px"}

## Figures

[Figures can be generated with a code chunk. Chunk options control the layout of the figure:]{style="font-size: 30px"}

![](figure.png)

::: {.column width="60%"}
````{r, echo=FALSE}
#| label: fig-iris
#| fig-cap: "Relationship between sepal length and width."
#| fig-width: 4
#| fig-height: 2
#| fig-align: "left"
library(ggplot2)
ggplot(iris, aes(x = Sepal.Length, y = Sepal.Width)) + 
  geom_point()
````
:::

::: {.column width="40%"}
[üí° *Figures can then be cross-referenced using their label.*]{style="font-size: 30px"}
:::

## Figure options

::: nonincremental

* [`fig-cap`: add a caption]{style="font-size: 30px"}

* [`fig-width` and `fig-height`: set figure size (in inches)]{style="font-size: 30px"}

* [`fig-asp`: control the aspect ratio (the width/height ratio)]{style="font-size: 30px"}

* [`out-width` and `out-height`: control display size in output (in %)]{style="font-size: 30px"}

* [`fig-align`: figure alignment ("left", "right", "center")]{style="font-size: 30px"}

* [`layout-col`: place multiple plots in the same row]{style="font-size: 30px"}

* [`fig-format`: choose output format ("png", "jpeg", "svg", "pdf"). The default depends on output format.]{style="font-size: 30px"}

:::

## Tables

[Tables can be generated with a code chunk:]{style="font-size: 30px"}

![](table.png){height=80%}

```{r}
#| echo: false
head(iris[1:3],3)
```

## Tables with kable

[The function [knitr::kable]{style="color:indianred;"} propose a nicer layout, and additional formatting options (see the help of the function:)]{style="font-size: 30px"}

![](kable.png){height=80%}

```{r}
#| echo: false
knitr::kable(head(iris[1:3],3))
```

[The packages [kableExtra](https://cran.r-project.org/web/packages/kableExtra/vignettes/awesome_table_in_html.html) and [flextable](https://ardata-fr.github.io/flextable-book/) proposes additional formating options.]{style="font-size: 30px"}


## Cross-references

[The figures and table produced with a code chunk can be cross-referenced by their labels.
For that, you need to add a label at the beginning of a code chunk:]{style="font-size: 30px"}

::: {.column width="45%"}

![](table_label.png)

``` markdown
See @tb.iris
```
:::

::: {.column width="10%"}
:::

::: {.column width="45%"}

::: fragment

```{r}
#| echo: false
#| label: tbl-iris
#| tbl-cap: "Iris data"
head(iris[1:3],3)
```

[See @tbl-iris]{style="font-size: 30px"}

:::

:::

::: notes
what on the left gives what on the right
:::

## Caching

[All code chunks are executed every time you render your document.]{style="font-size: 30px"}

[This ensures reproducibility, but can slow things down, especially when chunks take a long time to run. In this case, you can use **caching** for specific chunks.]{style="font-size: 30px"}

![](cache.png){height=80%}

[Caching saves the results of a chunk in a specific file in the *document_name_cache* folder (the name of the folder starts with the name of your document). On subsequent render, cached chunks are only re-run if their code has changed.]{style="font-size: 30px"}

## Caching

[‚ö†Ô∏è **Use caching with caution**: if you change the data in a chunk, this chunk will be run, but the chunks using the data will NOT.]{style="font-size: 30px"}

[üí°It is recommended to **regularly clear the cache** by deleting the cache folder manually.]{style="font-size: 30px"}



# YAML header

## YAML header

The YAML header is surrounded by [\-\-\-]{style="color:indianred;"}

::: notes
we are not going to see all of them...
:::

It controls many settings for the entire document.

## Global option

[You can define the default options of all code chunks of a document in the YAML, under [execute]{style="color:indianred;"}:]{style="font-size: 30px"}

::: {.column width="40%"}
![](YAML.png)
:::

::: {.column width="60%"}

[*With this YAML, all code chunks will be executed but not shown in the output, and their results will be cached.*]{style="font-size: 30px"}
:::

[üí°You can override these defaults for individual chunks using chunk-specific options.]{style="font-size: 30px"}


## Section numbers and table of content

::: {.column width="40%"}
[You can use a **table of contents** ([toc]{style="color:indianred;"} option) and/or **section numbering** ([number-sections]{style="color:indianred;"} option) to make it easier for readers to navigate your document:]{style="font-size: 30px"}

![](YAML_toc.png)
:::

::: {.column width="60%"}
![](toc.png)
:::


## Self-contained documents

[A HTML file created with quarto has several external dependencies that are placed in the *document_name_files* folder (for examples, figures created by code chunks).]{style="font-size: 30px"}

[If you want to share the html in an email or a USB drive, you will need to share the HTML file and the *document_name_files* folder.]{style="font-size: 30px"}

[To avoid this, you can created **self-contained documents** specifying the [embed_resources]{style="color:indianred;"} option:]{style="font-size: 30px"}

![](YAML_embed.png)

## Parameters 

[You can specify parameters in the YAML, that will be used in the chunks.]{style="font-size: 30px"}

[For example, This is useful if you want to produce the same document for different subset of your data. *Here, we can rapidly produce the same report for the different species of Iris.*]{style="font-size: 30px"}

::: {.column width="50%"}

![](params_1.png)
:::

::: {.column width="50%"}

![](params_2.png)
:::

## Bibliography

https://rdatatoolbox.github.io/course-quarto/#/yaml-header-1

https://r4ds.hadley.nz/quarto.html#yaml-header

TO DO


# Different formats

before that, only do html

pdf, htms, pres...
here

https://r4ds.hadley.nz/quarto-formats.html

https://quarto.org/docs/get-started/authoring/rstudio.html#output-formats


## multiple formats

https://quarto.org/docs/get-started/authoring/rstudio.html#multiple-formats

show how to set format specific options


## presentations

quickly....

https://quarto.org/docs/presentations/

## books

https://quarto.org/docs/books/



## Quarto projects

https://rdatatoolbox.github.io/course-quarto/#/quarto-projects

```{=html}
<!--
# Integration continue? sites web?

-->
```

# Troubleshooting

https://r4ds.hadley.nz/quarto.html#troubleshooting

see where I put that...

## Acknowledgments {.smaller}

::: nonincremental
r4ds

cours rdatatoolbox

doc quarto et

https://quarto.org/docs/get-started/authoring/rstudio.html
:::
