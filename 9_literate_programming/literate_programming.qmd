---
title: "Literate programming with quarto"
author: G√©raldine Derroire
institute: Cirad - UnB
date: last-modified
format: 
  revealjs:
    theme: solarized
    output-location: fragment 
    slide-number: true
    chalkboard: true
    link-external-icon: true
    link-external-newwindow: true
    incremental: true
execute:
  echo: true   
  warning: true
  message: true 
  cache: true
editor: 
  markdown: 
    wrap: sentence
---


# Introduction to [Quarto]{style="color:indianred;"}

## Literate programming

::: {.column width="70%"}
[*Literate programming is a programming paradigm introduced in 1984 by Donald Knuth in which a computer program is given as an explanation of how it works in a natural language, such as English, interspersed (embedded) with snippets of macros and traditional source code, from which compilable source code can be generated.*]{style="font-size: 30px"}
:::

::: {.column width="30%"}
![](litt_prog.png)
:::

Literate programming mixes **code** with **natural language**.

[Source: [Wikipedia](https://en.wikipedia.org/wiki/Literate_programming#cite_note-TCJ_LP-1){preview-link="false"}]{style="font-size: 22px"}

## Why use literate programming?

-   For yourself: a **modern-day lab notebook** : keep track of what you did, how you did it and why

-   For **collaborating** with other scientists: share results and the code that produced them

-   For a wider audience: **communicate** results clearly while ensuring reproducibility and easy updates

::: notes
ex for the last point : a report that is updated after each measurment campain

Strongly encourage to do a quarto document for a paper, or your thesis
:::

## What is [Quarto]{style="color:indianred;"}?

[Quarto]{style="color:indianred;"} is an open-source tool for creating **dynamic documents** that combine code, results and text to produce **reproducible outputs in multiple formats** (reports, websites, slides...).

![](quarto.png){fig-align="center"}

::: notes
these slides, and the exercices are done with quarto
:::


# Getting started

## Creating a new Quarto document

[Quarto]{style="color:indianred;"} is pre-installed with RStudio.

::: {.column width="60%"}
To create a new document: *File/New File/Quarto Document*

You can choose between different types of document.
Choose *Document*, fill in a title and a author name and click on *Create*
:::

::: {.column width="40%"}
![](new_qmd.png)
:::

This open a document containing plain text and R code.

## Rendering

-   Click on ![](setting.png) and choose *Preview in Viewer Pane*

:::: fragment
::: nonincremental
-   Click on ![](render.png)
:::

![](rstudio-render.png)
::::

[When **rendering**, Quarto generates a new file that contains selected text, code, and results from the .qmd file. *Note that you now have a .html file in the Files pane.*]{.fragment}

## Rendering

You can view the rendered document in the Viewer pane:

![](viewer.png)

## Visual editor

The **Visual editor** is an interface where you can use buttons to easily format text, insert images , tables..

![](visual.png){fig-align="center"}

The **Visual editor** save the content of your document in Markdown format.

::: notes
There are two ways of working on a document:
from the visual editor, or from the source editor

try to add text, format it, play with it
:::

## Source editor

You can view and edit the plain Markdown document in the **Source editor**:

![](source.png){fig-align="center"}

::: notes
this is markdown langauge, we will talk about it in a few minutes
:::

## Content of a Quarto document

-   A YAML header: metadata and output settings

-   Text in Markdown format

-   Chunks of R code

![](content.png){fig-align="center"}

::: notes
in the YAML title and author + output format
:::

# Write with markdown syntax

## Markdown syntax

If you write text in the Visual editor, you can use the buttons and drop-down menu to format the text.

You can also write using the [markdown syntax]{style="color:indianred;"} in the Source editor.

*Markdown in a markup language used to format plain text in a simple and intuitive way.*

::: notes
A markup language is a way to annotate text to describe its structure and formatting, using special symbols or tags, so that computers can display it properly.

html is another markup languages

why would we use markdown?

-   easy when used to

-   exaclty as saved so easier to debug, easier with version control

But totally ok to use the Visual editor
:::

## Text formating

::: {.column width="60%"}
![](syntax_raw.png)
:::

::: {.column width="40%"}
![](syntax_rendered.png)
:::

::: notes
On the left, what you type

on the right, what you will see in the rendered document
:::

## Figures

::: {.column width="60%"}
[To add a figure with a caption:]{style="font-size: 30px"}

``` markdown
![Caption](quarto_logo.png)
```
[‚ö†Ô∏è The file with the figure needs to be in the same folder than the quarto document.]{style="font-size: 25px"}

::: fragment

[Formatting options:]{style="font-size: 30px"}

``` markdown
Figure size
  ![Caption](quarto_logo.png){width=300}
  ![Caption](quarto_logo.png){height=80%}

Figure Alignment
  ![Caption](quarto_logo.png){fig-align="left"}
  ![Caption](quarto_logo.png){fig-align="center"}
```
:::
:::

::: {.column width="20%"}
:::

::: {.column width="20%"}
![Caption](quarto_logo.png){fig-align="center"}
:::

::: fragment

[Combines option with a space between arguments:]{style="font-size: 30px"}

``` markdown
![Caption](quarto_logo.png){height=80% fig-align="right"}
```
:::

## Tables

[To add a table with markdown:]{style="font-size: 30px"}

::: {.column width="50%"}
``` markdown
| First Header | Second Header |
|--------------|---------------|
| Content Cell | Content Cell  |
| Content Cell | Content Cell  |
```
:::

::: {.column width="5%"}
:::

:::: {.column width="45%"}
::: {style="font-size: 28px"}
| First Header | Second Header |
|--------------|---------------|
| Content Cell | Content Cell  |
| Content Cell | Content Cell  |
:::
::::

::: fragment

[To add a caption and change the width of columns:]{style="font-size: 30px"}

::: {.column width="50%"}
``` markdown
| First Header | Second Header |
|--------------|---------------|
| Content Cell | Content Cell  |
| Content Cell | Content Cell  |

: Caption {tbl-colwidths="[75,25]"}
```
:::

::: {.column width="5%"}
:::

:::: {.column width="45%"}
::: {style="font-size: 28px"}
| First Header | Second Header |
|--------------|---------------|
| Content Cell | Content Cell  |
| Content Cell | Content Cell  |

: Caption {tbl-colwidths="\[75,25\]"}
:::
:::
::::


::: notes
This is however not very practical for big table, we will see alternative later
:::

## Equations

[To write equations in Quarto, we have to use the **LaTex syntax**.]{style="font-size: 30px"}

[Equations can be place in a separate line, with]{style="font-size: 30px"}[\$\$...\$\$]{style="color:lightgreen;"}:

``` markdown
$$y \sim \mathcal N(\alpha + \sum_{i=1}^n\beta_n \times x_n, \sigma^2)$$
```

[$$y \sim \mathcal N(\alpha + \sum_{i=1}^n\beta_n \times x_n,\sigma^2)$$]{style="font-size: 30px"}

::: fragment

[They can also be displayed inline, with]{style="font-size: 30px"}[\$...\$]{style="color:lightgreen;"}:

``` markdown
This equation is displayed inline: $y = e^{\alpha}$
```

[*This equation is displayed inline:* $y = e^{\alpha}$]{style="font-size: 25px"}

[[More about LaTex equations](https://en.wikibooks.org/wiki/LaTeX/Mathematics)]{style="font-size: 22px"}

:::

::: notes
This is slighly more advanced but make the equation very clean
:::

## Links

[To add a link:]{style="font-size: 30px"}

``` markdown
<https://quarto.org/docs/get-started/hello/rstudio.html>
```

[<https://quarto.org/docs/get-started/hello/rstudio.html>]{style="font-size: 30px"}

[To add a named link:]{style="font-size: 30px"}

``` markdown
[Quarto tutorial](https://quarto.org/docs/get-started/hello/rstudio.html)
```

[[Quarto tutorial](https://quarto.org/docs/get-started/hello/rstudio.html)]{style="font-size: 30px"}

## Cross-references

[To be able to add a reference to a figure, table, equation, section... in another part of the document, we need to give them an **identifier** in ]{style="font-size: 30px"}[ {#....}]{style="color:indianred;"}:

::: {.column width="65%"}
``` markdown
![Caption](quarto_logo.png){#fig-quarto}
```
:::

::: {.column width="10%"}
:::

::: {.column width="25%"}
![Caption](quarto_logo.png){#fig-quarto width="50%"}
:::

::: fragment

[We can then refer to it with [\@]{style="color:indianred;"}:]{style="font-size: 30px"}

``` markdown
@fig-quarto shows the logo of quarto.
```

[@fig-quarto shows the logo of quarto.]{style="font-size: 30px"}

:::

## Cross-references

Identifiers start with the type of item:

::: nonincremental
-   for a figure: [fig-]{style="color:indianred;"}

-   for a table: [tbl-]{style="color:indianred;"}

-   for an equation: [eq-]{style="color:indianred;"}

-   for a section: [sec-]{style="color:indianred;"}
:::


# Comptute with R

::: notes
now that we have seen how to write, we are going to talk about code chunks
:::

## Insert R code

[**Chunks of R code are executed by Quarto when you render the document.**]{style="font-size: 30px"}

::::: {.column width="50%"}
:::: fragment
[To add a chunk of R code:]{style="font-size: 30px"}

::: nonincremental
-   [click on ![](add_chunck.png) and select *R*]{style="font-size: 30px"}

-   [or use the shortcut [Ctrl + Alt + I]{style="color:indianred;"}]{style="font-size: 30px"}
:::
::::
:::::

:::: {.column width="50%"}
::: fragment
[This inserts a code chunk where you can write R code:]{style="font-size: 30px"}

![](chunck.png)

[Code chunks are surrounded by[\`\`\`{r}....\`\`\`]{style="color:indianred;"}.]{style="font-size: 30px"} 
:::
::::

::: fragment
[You can use ![](run_up.png) to run all previous chunks, and ![](run.png) to run the current chunk.]{style="font-size: 30px"}

[üí°Start your document with a chunk that loads the necessary packages.]{style="font-size: 30px"}

[üí°Keep the chunks small.]{style="font-size: 30px"}
:::

## Chunk labels

[You can add a label to a chunk:]{style="font-size: 30px"}

![](chunk_label_1.png)

[This helps you navigate to a specific chunk using the drop down navigator:]{style="font-size: 30px"}

![](chunk_label.png){height="80%"}

[‚ö†Ô∏è Each chunk label must be unique.]{style="font-size: 30px"}

## Chunk options

[Chunk options control how the code will be rendered. The most important are:]{style="font-size: 30px"}

::: {style="font-size: 50%;"}
| Option | Run code | Show code | Show output | Show plots | Show messages | Show warnings |
|------------|---------|---------|---------|---------|---------|---------|
| eval: false | üö´ | ‚úÖ | üö´ | üö´ | üö´ | üö´ |
| include: false | ‚úÖ | üö´ | üö´ | üö´ | üö´ | üö´ |
| echo: false | ‚úÖ | üö´ | ‚úÖ | ‚úÖ | ‚úÖ | ‚úÖ |
| results: hide | ‚úÖ | ‚úÖ | üö´ | ‚úÖ | ‚úÖ | ‚úÖ |
| fig-show: hide | ‚úÖ | ‚úÖ | ‚úÖ | üö´ | ‚úÖ | ‚úÖ |
| message: false | ‚úÖ | ‚úÖ | ‚úÖ | ‚úÖ | üö´ | ‚úÖ |
| warning: false | ‚úÖ | ‚úÖ | ‚úÖ | ‚úÖ | ‚úÖ | üö´ |
:::

[[More about chunk options](https://yihui.org/knitr/options/)]{style="font-size: 22px"}

::: notes
let's not discuss them all...
:::

## Chunk options

[Chunk options are added one by one within the chunk:]{style="font-size: 30px"}

![](chunk_option2.png)

[Some chunk options can also be selected using the ![](setting.png) button:]{style="font-size: 30px"}

![](chunk_option1.png){height=75%}

## Inline code

[Small R codes can be embedded directly in the text by surrounding them with [\`r... \`]{style="color:indianred;"} .]{style="font-size: 32px"}

[This is very useful to present your data or your results, as this will be updated if the data change:]{style="font-size: 30px"}

```{r}
data("iris")
```

.

```{text}
The iris data have `r nrow(iris)` observations. 
The mean sepal length is `r mean(iris$Sepal.Length)`.
```

[*The iris data have `r nrow(iris)` observations. The mean sepal length is `r mean(iris$Sepal.Length)`.*]{style="font-size: 25px"}

## Figures

[Figures can be generated with a code chunk. Chunk options control the layout of the figure:]{style="font-size: 30px"}

![](figure.png)

::: {.column width="60%"}
````{r, echo=FALSE}
#| label: fig-iris
#| fig-cap: "Relationship between sepal length and width."
#| fig-width: 4
#| fig-height: 2
#| fig-align: "left"
library(ggplot2)
ggplot(iris, aes(x = Sepal.Length, y = Sepal.Width)) + 
  geom_point()
````
:::

::: {.column width="40%"}
[üí° *Figures can then be cross-referenced using their label.*]{style="font-size: 30px"}
:::

## Figure options

::: nonincremental

* [`fig-cap`: add a caption]{style="font-size: 30px"}

* [`fig-width` and `fig-height`: set figure size (in inches)]{style="font-size: 30px"}

* [`fig-asp`: control the aspect ratio (the width/height ratio)]{style="font-size: 30px"}

* [`out-width` and `out-height`: control display size in output (in %)]{style="font-size: 30px"}

* [`fig-align`: figure alignment ("left", "right", "center")]{style="font-size: 30px"}

* [`layout-col`: place multiple plots in the same row]{style="font-size: 30px"}

* [`fig-format`: choose output format ("png", "jpeg", "svg", "pdf"). The default depends on output format.]{style="font-size: 30px"}

:::

## Tables

[Tables can be generated with a code chunk:]{style="font-size: 30px"}

![](table.png){height=80%}

```{r}
#| echo: false
head(iris[1:3],3)
```

## Tables with kable

[The function [knitr::kable]{style="color:indianred;"} propose a nicer layout, and additional formatting options (see the help of the function:)]{style="font-size: 30px"}

![](kable.png){height=80%}

```{r}
#| echo: false
knitr::kable(head(iris[1:3],3))
```

[The packages [kableExtra](https://cran.r-project.org/web/packages/kableExtra/vignettes/awesome_table_in_html.html) and [flextable](https://ardata-fr.github.io/flextable-book/) proposes additional formating options.]{style="font-size: 30px"}


## Cross-references

[The figures and table produced with a code chunk can be cross-referenced by their labels.
For that, you need to add a label at the beginning of a code chunk:]{style="font-size: 30px"}

::: {.column width="45%"}

![](table_label.png)

``` markdown
See @tb.iris
```
:::

::: {.column width="10%"}
:::

::: {.column width="45%"}

::: fragment

```{r}
#| echo: false
#| label: tbl-iris
#| tbl-cap: "Iris data"
head(iris[1:3],3)
```

[See @tbl-iris]{style="font-size: 30px"}

:::

:::

::: notes
what on the left gives what on the right
:::

## Caching

[All code chunks are executed every time you render your document.]{style="font-size: 30px"}

[This ensures reproducibility, but can slow things down, especially when chunks take a long time to run. In this case, you can use **caching** for specific chunks.]{style="font-size: 30px"}

![](caching.png){height=80%}

[Caching saves the results of a chunk in a specific file in the *document_name_cache* folder (the name of the folder starts with the name of your document). On subsequent render, cached chunks are only re-run if their code has changed.]{style="font-size: 30px"}

## Caching

[‚ö†Ô∏è **Use caching with caution**: if you change the data in a chunk, this chunk will be run, but the chunks using the data will NOT.]{style="font-size: 30px"}

[üí°It is recommended to **regularly clear the cache** by deleting the cache folder manually.]{style="font-size: 30px"}



# YAML header

## YAML header

[The YAML header is surrounded by [\-\-\-]{style="color:indianred;"}]{style="font-size: 30px"}

[It controls many **settings** for the entire document.]{style="font-size: 30px"}

[It is also recommended to write **metadata** in the YAML that will appear in the rendered document. This includes:]{style="font-size: 30px"}

* [**title**: the title of the document]{style="font-size: 30px"}

* [**author**: your name (and the names of your collaborators)]{style="font-size: 30px"}

::: fragment

::: nonincremental

* [**date**: either the creation date, or automatically show the last modification date with:]{style="font-size: 30px"}

:::

``` markdown
date: last-modified
```
:::

 

::: notes
we are not going to see all of them...
:::


## Global option

[You can define the default options of all code chunks of a document in the YAML, under [execute]{style="color:indianred;"}:]{style="font-size: 30px"}

::: {.column width="40%"}
![](YAML.png)
:::

::: {.column width="60%"}

[*With this YAML, all code chunks will be executed but not shown in the output, and their results will be cached.*]{style="font-size: 30px"}
:::

[üí°You can override these defaults for individual chunks using chunk-specific options.]{style="font-size: 30px"}


## Section numbers and table of content

::: {.column width="40%"}
[You can use a **table of contents** ([toc]{style="color:indianred;"} option) and/or **section numbering** ([number-sections]{style="color:indianred;"} option) to make it easier for readers to navigate your document:]{style="font-size: 30px"}

![](YAML_toc.png)
:::

::: {.column width="60%"}
![](toc.png)
:::


## Self-contained documents

[A HTML file created with quarto has several external dependencies that are placed in the *document_name_files* folder (for examples, figures created by code chunks).]{style="font-size: 30px"}

[If you want to share the html in an email or a USB drive, you will need to share the HTML file and the *document_name_files* folder.]{style="font-size: 30px"}

[To avoid this, you can created **self-contained documents** specifying the [embed_resources]{style="color:indianred;"} option:]{style="font-size: 30px"}

![](YAML_embed.png)

## Parameters 

[You can specify parameters in the YAML, that will be used in the chunks.]{style="font-size: 30px"}

[For example, this is useful if you want to produce the same document for different subset of your data. *Here, we can rapidly produce the same report for the different species of Iris.*]{style="font-size: 30px"}

::: {.column width="50%"}

![](params_1.png)
:::

::: {.column width="50%"}

![](params_2.png)
:::

::: notes
a bit more advanced
:::

# Bibliography

## Citing references in the Visual editor

[To add bibliographic references to a quarto document, you can use the Visual editor: 
*Insert / Citation*.]{style="font-size: 30px"}

[You can search an new reference with its **DOI**, or by searching bibliographic platforms (Crossref, PubMed...).]{style="font-size: 30px"}

![](biblio_doi.png)

::: notes
this is the easiest way
:::

## Citing references in the Visual editor

[When inserting the first reference of a document, this will:]{style="font-size: 30px"}

::: nonincremental
* [create a new *.bib* file in your project and add the reference to it. This file will be updated every time you add a new reference]{style="font-size: 30px"}

* [add a bibliography field in the YAML, giving the name of the *.bib* file]{style="font-size: 30px"}
:::

![](biblio_YAML.png){fig-align="center" height="60%"}

## Citing references in the Visual editor

[When you have an existing *.bib* file, you can also add a reference from this file, using the Visual editor: *Insert / Citation* ]{style="font-size: 30px"}


![](biblio_bib.png)

## Citing references in the Source editor

[To add a citation using the Source editor, you need to have an existing bibliography file (*.bib* file imported from a reference manager or created with the Visual editor).]{style="font-size: 30px"}

[You can add the reference using [@]{style="color:indianred;"} followed by the reference **key** (the reference identifier from the bibliography file).]{style="font-size: 30px"}


::: {.column width="30%"}
![](citation_source.png)
:::

::: {.column width="70%"}
![](citation_source2.png){width="150%"}
:::
 

## Rendered

[When rendering your file, quarto will add a bibliography at the end of the document.]{style="font-size: 30px"}

[You will need to manually add a title for this section.]{style="font-size: 30px"}

::: {.column width="50%"}
![](biblio_md.png)
:::

::: {.column width="50%"}
![](biblio_rendered.png)
:::



## Bibliographic styles

[To change the style of the citations and the bibliography, you can reference the CSL (*citation style language*) that you want to use in the `csl` field of the YAML:]{style="font-size: 30px"}

![](csl.png)

[This file will need to be added in the same directory than your *.qmd* file (or you can specify an alternative path).]{style="font-size: 30px"}

[You can search for CSL styles [here](https://citationstyles.org/authors/). They may as well be provided by scientific journals.]{style="font-size: 30px"}


# Quarto formats

::: notes
so far we only have seen how to make html documents but
:::

## Quarto formats

[Quarto supports many different formats, including:]{style="font-size: 30px"}

::: nonincremental
* [**Documents** formats: HTML, PDF, OpenDocument Text, Microsoft Word...]{style="font-size: 30px"}

* [**Presentations** formats: PowerPoint, Revealjs, Beamer]{style="font-size: 30px"}

* [**Books**: combinations of multiple documents (chapters) into a single manuscript (in HTML, PDF, EPUB...) [](https://quarto.org/docs/books/)]{style="font-size: 30px"}

* [**Websites** [](https://quarto.org/docs/websites/)]{style="font-size: 30px"}

* [**Quarto projects**: centralised structure for managing multi-document outputs [](https://rdatatoolbox.github.io/course-quarto/#/quarto-projects)]{style="font-size: 30px"}

* [...]{style="font-size: 30px"}
:::

[More about Quarto formats [here](https://quarto.org/docs/output-formats/all-formats.html) and [here](https://quarto.org/docs/guide/)]{style="font-size: 22px"} 

::: notes
We have seen how to do pdf, 
:::

## Document formats

::: nonincremental
* [HTML (`html`)]{style="font-size: 30px"}

* [PDF (`pdf`): rendered with LaTex (requires a Latex installation such as [TinyTex](https://yihui.org/tinytex/))]{style="font-size: 30px"}

* [OpenDocument Text (`odt`)]{style="font-size: 30px"}

* [Microsoft Word (`docx`)]{style="font-size: 30px"}

* [...]{style="font-size: 30px"}
:::

[We have seen how to produce HTML documents, other documents can be produced in a similar way.]{style="font-size: 30px"}


::: notes
the pdf format is what is going to be asked for the assessment
:::


## Presentation formats

::: nonincremental
* [`revealjs`: HTML presentation with Reveal.js (these slides are generated with Reveal.js)]{style="font-size: 30px"}

* [`pptx`: Microsoft PowerPoint]{style="font-size: 30px"}

* [`beamer`: PDF presentation with LaTeX Beamer]{style="font-size: 30px"}
:::

::: fragment

[Title slides start with [#]{style="color:indianred;"} and all other slide starts with [##]{style="color:indianred;"}.]{style="font-size: 30px"}

[[More about presentations with quarto](https://quarto.org/docs/presentations/)]{style="font-size: 22px"} 

:::

::: notes
The title of this slide is written ## Presentation formats
:::

## Define quarto format

::: {.column width="50%"}
[The format can be chosen when you create a new quarto document:]{style="font-size: 30px"}

![](new_qmd.png)
:::

::: {.column width="50%"}
[Or you can specify it into the YAML:]{style="font-size: 30px"}

![](formats3.png)
:::


::: notes
first solution, this is how we created an html document
::: 


## Multiple formats and options

[You can render to multiple output formats by specifying more than one format in the YAML. Different options can be specify for the different format:]{style="font-size: 30px"}

::: {.column width="60%"}
[For example, the following will add a table of content and number the sections in the html format, and keep the default options in pdf and docx.]{style="font-size: 25px"}
:::

::: {.column width="40%"}
![](formats1.png)
:::

::: {.column width="60%"}
[To select the format in which to render:]{style="font-size: 30px"}
:::

::: {.column width="40%"}
![](formats2.png)
:::

[‚ö†Ô∏è Some options are available in all formats, but other are not (see [here](https://quarto.org/docs/output-formats/all-formats.html) for the option available for each format)]{style="font-size: 30px"}


# Troubleshooting

::: notes
to finish, let's talk about common problems
:::

## When rendering fails

[Check the *Background Jobs* tab:]{style="font-size: 30px"}

![](background_job.png)

::: notes
Sometimes (but not always) explicit error messages

here problem that there are two : in the YAML
:::

## When rendering fails

[Common errors:]{style="font-size: 30px"}

* [Missing R packages(packages non installed, or not loaded in the quarto document)]{style="font-size: 30px"}

* [Problem with file paths and working directory: ‚ö†Ô∏è the default working directory of a Quarto document is the directory where the Quarto document is]{style="font-size: 30px"}

* [Error of syntax in the YAML]{style="font-size: 30px"}

* [Duplicated code chunks labels => check the drop-down chunk navigator]{style="font-size: 30px"}

* [Errors due to the R code itself => run all code chunks in the console (*Code/Run Region/Run all*) or run chunks one by one to identify the problem]{style="font-size: 30px"}


## When rendering works but the document has problems

* [If you cannot see the outputs: check the chunk output options as some options prevent outputs from being displayed ]{style="font-size: 30px"}

* [If you get unexpected values/results: can this be a problem with the use f the cache?]{style="font-size: 30px"}

## To avoid big problems

üí° Render often, so that you can quickly identify the cause of the problem and solve it!


## Acknowledgments {.smaller}

::: nonincremental
* Wickham H., Cetinkaya-Rundel M., Grolemund G. *R for Data Science*  - Chapter on Quarto [in English](https://r4ds.hadley.nz/quarto.html) and [in Portuguese](https://pt.r4ds.hadley.nz/quarto.html){preview-link="false"}

* Guilhaumon F. *An introduction to Quarto* [here](https://rdatatoolbox.github.io/course-quarto)

* Quarto *Get started* tutorial [here](https://quarto.org/docs/get-started/)

* Quarto guide [here](https://quarto.org/docs/guide/)
:::

## Ressources {.smaller}

::: nonincremental
* Wickham H., Cetinkaya-Rundel M., Grolemund G. *R for Data Science*  - Chapter on Quarto [in English](https://r4ds.hadley.nz/quarto.html) and [in Portuguese](https://pt.r4ds.hadley.nz/quarto.html){preview-link="false"}

* Guilhaumon F. *An introduction to Quarto* [here](https://rdatatoolbox.github.io/course-quarto)

* Quarto *Get started* tutorial [here](https://quarto.org/docs/get-started/)

* Quarto guide [here](https://quarto.org/docs/guide/)
:::
