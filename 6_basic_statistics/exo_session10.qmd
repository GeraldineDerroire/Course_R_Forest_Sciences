---
title: "Exercices on session *Statistics with R session 2/3*"
format:
  pdf
execute:
  echo: false 
  eval: false 
editor: 
  markdown: 
    wrap: 72
---

Load the packages of the *tidyverse*

```{r}
library(tidyverse)
```

# Data on vascular plants in the British Islands

The Arrhenius relationship
[(1921)](https://www.jstor.org/stable/2255763?seq=3){preview-link="false"}
predicts that the number of species in an ecosystem increases with its
area to the power z according to the equation $$S=cA^z$$ where S(A) is
the number of species observed on area A, c is a constant that depends
on the ecosystems and the taxon considered, and z is the parameter of
interest.

We are going to explore this relationship using data on the number of
vascular species in the British Islands (Johnson et Simberloff, 1974),
available
[here](https://geraldinederroire.github.io/Course_R_Forest_Sciences/6_basic_statistics/data/britain_species.csv){preview-link="false"}

-   Load the data as a tibble and look at their structure

```{r}
dt <- read_csv("data/britain_species.csv")
summary(dt)
```

The data contains the number of species of vascular plants (variable
*species*) for different *island*. The other variables give some
characteristics of these islands, including the *area* in km^2^.

# Simple linear regression

The Arrhenius relation can be linearised by taking the logarithm of S
and A:

$$log(S) = \beta_0 + \beta_1 log(A)$$

-   Explore graphically the relationship between the log-transformed
    area and the log-transformed number of species

```{r}
dt %>% 
  ggplot(aes(x = log(area), y = log(species))) + 
  geom_point() + 
  geom_smooth(method = "lm")
```

-   Fit the following log-log model, look at the model results and
    interpret them

$$log(S) \sim \mathcal N (\beta_0 + \beta_1 \times log(A), \sigma^2)$$

```{r}
mod_1 <- lm(log(species) ~ log(area), data = dt)
summary(mod_1)
```

```{=html}
<!-- 
* significant positive effect of the log(area)
* moderate goodness of fit (R2)
-->
```

-   Do the model validation

```{r}
plot(mod_1, which = 1)
```

```{=html}
<!-- 
* homoscedasticity: not too bad
* residuals independant of fitted values
-->
```

```{r}
plot(mod_1, which = 2)
```

```{=html}
<!-- 
normality of the residuals... not perfect 
-->
```

```{r}
plot(mod_1, which = 4)
```

```{=html}
<!--
No strong leverage effect, the values of cook are small
-->
```

# Multiple linear regression

The goodness of fit of the previous model could probably be improved. As
the variables *elevation*, *latitude*, *dist_britain* and *soil_types*
could also be influencing the number of species, we could add them as
explanatory variables in our model.

-   Let's first explore graphically the correlation between all pairs of
    numerical variables, *area* (log-transformed), *elevation*,
    *latitude*, *dist_britain*, using the package GGally. What do you
    conclude?

```{r}
dt <- dt %>% 
  mutate(log_area = log(area))

GGally::ggpairs(dt, columns = c("log_area", "elevation", "latitude", "dist_britain"))
```

```{=html}
<!--
log(area) and elevation correlated
dist_britan and latitude correlated
=> don't include them all (and too many for the data we have)
-->
```

-   Let's also make boxplots to explore graphically the relationship
    between these 4 variables and the type of soil (don't forget to
    transform the variable *soil_types* to a factor). What do you
    conclude?

```{r}
dt <- dt %>% mutate(soil_types = as.factor(soil_types))

g1 <- dt %>% 
  ggplot(aes(x= soil_types, y= log_area)) + geom_boxplot()
g2 <- dt %>% 
  ggplot(aes(x= soil_types, y= elevation)) + geom_boxplot()
g3 <- dt %>% 
  ggplot(aes(x= soil_types, y= latitude)) + geom_boxplot()
g4 <- dt %>% 
  ggplot(aes(x= soil_types, y= dist_britain)) + geom_boxplot()
library(patchwork)
(g1 + g2) / (g3 + g4)
```

```{=html}
<!-- 
soil type too correlated with log_area...
and some soil types poorly represented
-->
```

-   Fit the following model (without standardising the variables), look
    at the model results and interpret them

$$log(S) \sim \mathcal N (\beta_0 + \beta_1 \times log(A) + \beta_2 \times latitude, \sigma^2)$$

```{r}
mod_2 <- lm(log(species) ~ log(area) + latitude, data = dt)
summary(mod_2)
```

```{=html}
<!--
* Goodness of fit (R2) much better
* log(area) and latitude both have a significant effect
* number of species increases with area
* number of species decreases with latitude
-->
```

-   Do the model validation

```{r}
plot(mod_2, which = 1)
```

```{=html}
<!-- 
* homoscedasticity: not too bad
* residuals independent of fitted values
* three obs concerning
-->
```

```{r}
plot(mod_2, which = 2)
```

```{=html}
<!-- 
normality of the residuals
three obs concerning
-->
```

```{r}
plot(mod_2, which = 4)
```

```{=html}
<!--
No strong leverage effect but three obs concerning
-->
```

```{r}
lindia::gg_resX(mod_2, ncol = 2)
```

```{=html}
<!-- 
ok
-->
```

-   Check the VIF (from library *car*) to check for the absence of
    collinarity between the explanatory variables

```{r}
car::vif(mod_2)
```

<!-- ok -->

# Presenting the result of the best model

-   Compare the AIC of the two models. Which is the best one?

```{r}
list_mod <- list(mod_1, mod_2)
AICcmodavg::aictab(list_mod)
```

<!-- best model is model 2 -->

-   Present the coefficients in a table

```{r}
gtsummary::tbl_regression(mod_2, intercept = TRUE)
```

-   Present the result graphically: first, represent the predicted
    relationship between A and S, setting the latitude to its mean

```{r}
preds4area <- ggpredict(mod_2, terms = "area")
preds4area
# str(preds4area)
```

```{r}
ggplot(preds4area, aes(x = x, y = predicted)) +
  geom_line() + 
  geom_ribbon(aes(ymin = conf.low, ymax = conf.high), alpha = 0.2) + 
  geom_point(data = dt, aes(x = area, y = species)) +
  labs(x = "Area", y = "Species number") 
```

-   then the predicted relationship between latitude and S, setting the
    area to its mean

```{r}
preds4lat <- ggpredict(mod_2, terms = "latitude")
preds4lat
# str(preds4lat)
```

```{r}
ggplot(preds4lat, aes(x = x, y = predicted)) +
  geom_line() + 
  geom_ribbon(aes(ymin = conf.low, ymax = conf.high), alpha = 0.2) + 
  geom_point(data = dt, aes(x = latitude, y = species)) +
  labs(x = "Latitude", y = "Species number") +
  theme_minimal()
```

# For next time

-   Make sure the following packages are already installed: *vegan*,
    *tidyverse*

# Acknowledgments

-   Marchand P. [*Analyses et modélisation des données
    écologiques*](https://pmarchand1.github.io/ECL7102/){preview-link="false"}

-   Marcon E.
    [*cours-R-Geeft*](https://ericmarcon.github.io/Cours-R-Geeft/){preview-link="false"}
