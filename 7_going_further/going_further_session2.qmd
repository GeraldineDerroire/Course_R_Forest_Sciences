---
title: "Going further with R - session 2/2"
author: Géraldine Derroire
institute: Cirad - UnB
date: last-modified
format: 
  revealjs:
    theme: solarized
    output-location: fragment 
    slide-number: true
    preview-links: true
    chalkboard: true
    link-external-icon: true
    link-external-newwindow: true
    incremental: true
execute:
  echo: true   
  warning: true
  message: true 
  cache: true
editor: 
  markdown: 
    wrap: sentence
---

# 

Let's load the package we will use

```{r}
#| message: false
library(tidyverse)
```

and some objects we saved last session

```{r}
load("data/usefull_object.RData")
```

```{r, echo=FALSE}
set.seed(14)
```


# Conditional execution

**Conditional execution** means running different blocks of code depending on whether a condition is TRUE or FALSE.

## if

[Let's write a function saying *Bom dia* only in the morning:]{style="font-size: 30px"}

```{r}
greeting <- function(time) {
  time <- hm(time) 
  time_limit <- hm("11:59")
  if (time < time_limit) {
    message("Bom dia !")
  } 
}
```

[💡 The function [hm]{style="color:indianred;"} from [lubridate]{style="color:indianred;"} convert a character to a period object.]{style="font-size: 25px"}

::: fragment
```{r}
greeting("8:13")
```
:::

::: fragment
```{r}
greeting("14:25")
```
:::

::: notes
very important function for me!!!
:::

## if 

![](if.png)

The command [if]{style="color:indianred;"} is used with:

* a condition (in parentheses)

* a block of code (in curly brackets) that is executed only if the condition is TRUE

::: notes
how does that work?
:::


## if / else

[Let's update our function to say *Boa tarde* in the afternoon:]{style="font-size: 30px"}

```{r}
greeting <- function(time) {
  time <- hm(time) 
  time_limit <- hm("11:59")
  if (time < time_limit) {
    message("Bom dia !")
  } else {
    message("Boa tarde !")
  }
}
```

[[and test it:]{style="font-size: 30px"}]{.fragment}

::: fragment
```{r}
greeting("8:13")
```
:::

::: fragment
```{r}
greeting("14:25")
```
:::

## if/else

An [if]{style="color:indianred;"} instruction can be followed by a [else]{style="color:indianred;"} that is executed if the condition of [if]{style="color:indianred;"} is FALSE.

![](if_else.png)

## if/else if/else

[But what to say in the evening?]{style="font-size: 30px"}

::::: columns
::: {.column width="60%"}

```{r}
greeting <- function(time) {
  time <- hm(time) 
  time_limit1 <- hm("11:59")
  time_limit2 <- hm("17:59")
  if (time < time_limit1) {
    message("Bom dia !")
  } else if (time < time_limit2) {
    message("Boa tarde !")
  } else {
    message("Boa noite !")
  }
}
```

:::

::: {.column width="40%"}

[[let's check]{style="font-size: 30px"}]{.fragment}

::: fragment
```{r}
greeting("8:13")
```
:::

::: fragment
```{r}
greeting("14:25")
```
:::

::: fragment
```{r}
greeting("20:17")
```
:::
:::
:::::

## if/else if/else

We can add a second condition with [else if]{style="color:indianred;"}. 
The second condition is tested only if the 1st condition is FALSE.

![](if_else_if_else.png)


## Order of conditions

[Only the block of the first TRUE condition is executed.]{style="font-size: 30px"}

[⚠️ **The order of conditions is therefore important!**]{style="font-size: 30px"}

```{r}
greeting_wrong <- function(time) {
  time <- hm(time) 
  time_limit1 <- hm("11:59")
  time_limit2 <- hm("17:59")
  if (time < time_limit2) {
    message("Boa tarde !")
  } else if (time < time_limit1) {
    message("Bom dia !")
  } else {
    message("Boa noite !")
  }
}
```

::: fragment

🥴

```{r}
greeting_wrong("8:13")
```
:::

::: notes
explain what happen following the code
:::

## 

[💡 Now that we understand, we can use a more concise syntax for our function:]{style="font-size: 30px"}

```{r}
greeting <- function(time) {
  if (hm(time)  < hm("11:59")) {
    message("Bom dia !")
  } else if (hm(time)  < hm("17:59")) {
    message("Boa tarde !")
  } else {
    message("Boa noite !")
  }
}
```

::: notes
if removed the 3 first lines and included the hm() in the tests
:::


## Example of use

[We can modify our function *mean_diam* so that it rounds the diameter only if a value is given to the argument digits.]{style="font-size: 30px"}
[[For that we give the default value NULL to the argument *digits*, and add a test before rounding:]{style="font-size: 30px"}]{.fragment}

::: fragment
```{r}
mean_diam <- function(circ, na_act = TRUE, digits = NULL) {
    diam <- circ / (pi * 100) # Calculate diameters in m
    mean_diam <- mean(diam, na.rm = na_act) # Calculate the mean 
  # Round the diameter only if a value is provided for digits
    if(!(is.null(digits))) {
      mean_diam <- round(mean_diam, digits = digits)
    }
    return(mean_diam) # Return the mean diameter
}
```
:::

::: fragment
[Let's test it:]{style="font-size: 30px"}

```{r}
new_circ <- runif(n = 35, min = 30, max = 250) # create new data
```
:::


::::: columns
::: {.column width="50%"}

::: fragment
```{r}
mean_diam(new_circ)
```
::: 
:::

::: {.column width="50%"}
::: fragment
```{r}
mean_diam(new_circ, digits = 2)
```
::: 
:::
:::::

::: notes
function mean_diam seen in the previous session: change the units of diameter, take the mean and round it

before, your default for digits was 2, so we would have had the same results for both
:::

## Another example 

What does this function do?

```{r}
graph_var <- function(v) { # v: a vector
    if (is.character(v)) {
        barplot(table(v))
    } else if (is.numeric(v)) {
        hist(v)
    } else {
        message("The type of v is not supported by the function")
    }
}
```

## Another example 

[Let's check:]{style="font-size: 30px"}

::::: columns
::: {.column width="50%"}
```{r}
v_char <- sample(LETTERS[1:5], 100, 
                 replace = TRUE)
graph_var(v_char)
```


:::

::: {.column width="50%"}
```{r}
v_num <- runif(100, min=0, max=10)
graph_var(v_num)
```

:::
:::::

```{r}
vec_logical <- sample(c(TRUE, FALSE), 100, replace = TRUE)
graph_var(vec_logical)
```

## Writing conditions

[To write conditions, we can use:]{style="font-size: 30px"}

* [logical operators: [<]{style="color:indianred;"}, [>]{style="color:indianred;"}, [<=]{style="color:indianred;"}, [>=]{style="color:indianred;"}, [%in%]{style="color:indianred;"}, [==]{style="color:indianred;"}, [!=]{style="color:indianred;"}, [any]{style="color:indianred;"}, [all]{style="color:indianred;"}...]{style="font-size: 30px"}

* [type checking functions: [is.numeric]{style="color:indianred;"}, [is.character]{style="color:indianred;"}, [is.logical]{style="color:indianred;"}...]{style="font-size: 30px"}

[[and combine them using [&&]{style="color:indianred;"} and [||]{style="color:indianred;"}]{style="font-size: 30px"}]{.fragment}

[[💡 [&&]{style="color:indianred;"} and [||]{style="color:indianred;"} are equivalent to [&]{style="color:indianred;"} and [|]{style="color:indianred;"} but only work for vector of length one. There are therefore safer to use in if/else conditions, as they need to return only one value.]{style="font-size: 30px"}]{.fragment}

::: notes
these is important for writing code with conditional execution

any is true if at least one is true

all is true if at least all are true
:::

## More complex conditions

Should we go the the party?

```{r}
tricky_decision <- function(cool_people, good_music) { # booleans
  if(cool_people && good_music) {
    message("Go!") 
  } else if (cool_people || good_music) {
    message("Maybe...")
  } else {
    message("No way!")
  }
}
```

[💡 As the expected values for the two arguments are booleans, we don't need to write == TRUE.]{style="font-size: 30px"}

::: notes
Let's see if you remember how to combine tests...
What does this function do?
:::

## More complex conditions

```{r}
tricky_decision(cool_people = TRUE, good_music = TRUE)
```

```{r}
tricky_decision(cool_people = TRUE, good_music = FALSE)
```

```{r}
tricky_decision(cool_people = FALSE, good_music = TRUE)
```

```{r}
tricky_decision(cool_people = FALSE, good_music = FALSE)
```

## More complex conditions

What does this function do?

```{r}
check_input <- function(x, valid_val) {
  if(length(x) != 1 || !(x %in% valid_val)) {
    cat(x, "is an invalid input.")
  } else {
    cat(x, "is a valid input.")
  }
}
```

::: fragment
```{r}
check_input(x = 2, valid_val = 1:10)
```
:::

::: fragment
```{r}
check_input(x = 25, valid_val = 1:10)
```
:::

::: fragment
```{r}
check_input(x = c(2,3), valid_val = 1:10)
```
:::

::: notes
a valid input is in the list of valid input and has a lenght of 1
:::





## if/else and ifelse

[⚠️ [if/else]{style="color:indianred;"} and [ifelse]{style="color:indianred;"} (or its [tidyverse]{style="color:indianred;"} equivalent [if_else]{style="color:indianred;"}) are very different:]{style="font-size: 30px"}

::::: columns
::: {.column width="50%"}

* [[if/else]{style="color:indianred;"} is used when testing a single condition and execute different blocks of code depending on its result:]{style="font-size: 30px"}

::: fragment
```{r}
x <- 5
if (x >= 10) {
    message(">=10")
} else {
    message("<10")
}
```
:::
:::

::: {.column width="50%"}
* [[ifelse]{style="color:indianred;"} and [if_else]{style="color:indianred;"} apply a test to all the elements of a vector and return a vector whose elements depend on the result of each test:]{style="font-size: 30px"}

::: fragment
```{r}
x <- 5:15
ifelse(x >= 10, ">=10", "<10")
```
:::
:::
:::::


## Using [if/else]{style="color:indianred;"} to control the execution of a function

[Our function [mean_diam]{style="color:indianred;"} is intended to be used on a numerical vector. It returns an error otherwise:]{style="font-size: 30px"}

```{r, eval = FALSE}
vec_char <- c("A", "B")
mean_diam(vec_char)
```
```{r, echo= FALSE}
vec_char <- c("A", "B")
try(mean_diam(vec_char))
```

[[This error is not explicit for a user, as they don't know what *circ/(pi \* 100)* is used for...]{style="font-size: 30px"}]{.fragment}


## Using [if/else]{style="color:indianred;"} with [warning]{style="color:indianred;"}

[We can add a test to return *NA* when *circ* is not numeric, and add an explicit warning message:]{style="font-size: 30px"}

```{r}
mean_diam <- function(circ, na_act = TRUE, digits = NULL) {
    if(!(is.numeric(circ))) {
      warning("circ is not numeric, the result is NA")
      return(NA) # if circ is not numeric, the execution stops here
    }
  
    diam <- circ / (pi * 100) # Calculate diameters in m
    mean_diam <- mean(diam, na.rm = na_act) # Calculate the mean 
    if(!(is.null(digits))) { # Round the diameter only if a value is provided for digits
      mean_diam <- round(mean_diam, digits = digits)
    }
    return(mean_diam) # Return the mean diameter
}
```

::: fragment
```{r}
mean_diam(vec_char)
```
:::

::: notes
Many parenthesis, click on a closing one to see which one it closes
:::

## Using [if/else]{style="color:indianred;"} with [stop]{style="color:indianred;"}

[[warning]{style="color:indianred;"} does not stop the execution of the function (in our previous slide it's [return]{style="color:indianred;"} that stopped it).]{style="font-size: 30px"}


[[On the contrary, [stop]{style="color:indianred;"} triggers an error that stops the execution:]{style="font-size: 30px"}]{.fragment}

::: fragment
```{r}
mean_diam <- function(circ, na_act = TRUE, digits = NULL) {
    if(!(is.numeric(circ))) {
      stop("circ must be numeric")
      }
  
    diam <- circ / (pi * 100) # Calculate diameters in m
    mean_diam <- mean(diam, na.rm = na_act) # Calculate the mean 
    if(!(is.null(digits))) { # Round the diameter only if a value is provided for digits
      mean_diam <- round(mean_diam, digits = digits)
    }
    return(mean_diam) # Return the mean diameter
}
```
:::

::: fragment
```{r, eval = FALSE}
mean_diam(vec_char)
```

```{r, echo = FALSE}
try(mean_diam(vec_char))
```
:::

::: notes
warning can be used independently of return, in this case the execution continues

a stop give an error, this is very different. For example with Quarto, the document would not compiled
:::

## Using [if/else]{style="color:indianred;"} outside a function

We have seen many examples of use of [if/else]{style="color:indianred;"} inside a function, but we can also use it outside:

* at the beginning of a script, together with a warning or a stop, to check if the data are valid

* in a Quarto or R Markdown document, to adapt the output of a chunk depending on its result

* ...


::: notes
for quarto => we could either print "the statistical test is significant" or "the statistical test not significant", by performing a test on the p-value
:::


# Loops

A loop allows to repeatedly executes a block of code.

## [for]{style="color:indianred;"} loop

Let's take a simple example:

```{r}
for (item in 1:5) {
    print(item)
}
```
## [for]{style="color:indianred;"} loop

![](for_loop.png){width=350%}



::::: columns
::: {.column width="60%"}

A [for]{style="color:indianred;"} loop executes a block of code for each element of a vector.
For each iteration, the loop sequentially assigns a value from the vector to the loop iterator.

:::

::: {.column width="40%"}

::: fragment

[*In our example:* *item* take the value 1, and the block of code prints it, then 
*item* take the value 2, and the block of code prints it, then ..., then 
*item* take the value 5, and the block of code prints it]{style="font-size: 25px"}

:::

:::
:::::


## [for]{style="color:indianred;"} loop

The vector can be of any mode, and we can give any name to the  iterator (usually we use *n* or *i*)

```{r}
vec_name <- c("Lucas", "Gabriel", "Ana")
for (name in vec_name) {
  message("Hello ", name, "!")
}
```
[[Here the vector is of type *character* and the iterator is called *name*.]{style="font-size: 30px"}]{.fragment}

::: fragment
[Note that the iterator is conserved when the loop finishes, with its last value:]{style="font-size: 30px"}

```{r}
name
```
:::


## Iterating over elements

In the previous example

```{r, eval = FALSE}
for (name in vec_name) {
  message("Hello ", name, "!")
}
```


we iterate over the **elements** (the values) of a vector.


## Iterating over names

We can also iterate over **names** :

::::: columns
::: {.column width="42%"}

* of a named vector:

::: fragment
```{r}
# create a named vector
vec <- c(a = 2, b = 4, c = 3)

for (i in names(vec)) {
  print(vec[[i]])
}

```
:::
:::


::: {.column width="58%"}

* of a named list:

::: fragment
```{r}
# create a name list
desserts <- list(Sophia = "banana bread", 
                 Eliott = "pancakes", 
                 Karina = "chocolate cake")

for (n in names(desserts)) {
  message(n, " loves ", desserts[[n]])
}
```
:::

:::
:::::

## Iterating over names {.scrollable}

[or over names of columns of a data frame:]{style="font-size: 30px"}

```{r}
# take a subset of iris
iris_sub <- iris %>%  filter(Species == "setosa") %>% select(-Species) 

# Create a new data frame with the same structure as iris_sub
  # to store the scale data
iris_sub_scaled <- iris_sub

# replace the values in each colum by the scaled values
  # iterating by column names
for (col in names(iris_sub)) {
  iris_sub_scaled[[col]] <- as.vector(scale(iris_sub[[col]]))
}

summary(iris_sub_scaled)
```

::: notes
! if you apply the function scale over a dataframe with only numeric variables, it would actually work without doing a for loop

subset of iris: keep only 1 species and only numerical columns

note that here we modify an existing object (iris_sub_scaled)

check: the mean is indeed 0
:::

## Iterating over numeric indices

We can also iterate over **numeric indices**:

```{r}
for (n in seq_along(vec_name)) {
  message("Hello ", vec_name[[n]], "!")
}
```

::: fragment

The function [seq_along]{style="color:indianred;"} returns a sequence of integers from 1 to the length of a vector.

```{r}
seq_along(vec_name)
```
:::

## Iterating over numeric indices

Instead of *seq_along(vec_name)*, we could also write *1:length(vec_name)*:

```{r}
for (n in 1:length(vec_name)) {
  message("Hello ", vec_name[[n]], "!")
}
```

[⚠️ seq_along is safer]{.fragment}

## Iterating over numeric indices {.smaller}

[Let's take a vector of length 0:]{style="font-size: 30px"}

```{r}
vec_null <- NULL
length(vec_null)
```

[[The loop should not be executed:]{style="font-size: 30px"}]{.fragment}

::::: columns
::: {.column width="50%"}

* [Using *1:length()* will not behave as expected:]{style="font-size: 30px"}

::: fragment
```{r}
for (n in 1:length(vec_null)) {
  message("Hello ", vec_null[[n]], "!")
}
```
:::
:::

::: {.column width="50%"}

* [Using *seq_along* will behave as expected (it does nothing):]{style="font-size: 30px"}

::: fragment
```{r}
for (n in seq_along(vec_null)) {
  message("Hello ", vec_null[[n]], "!")
}
```
:::
:::
:::::

[[Why is that?]{style="font-size: 30px"}]{.fragment}

::: fragment
```{r}
1:length(vec_null)
seq_along(vec_null)
```
:::

::: notes
answer after!
:::

## Iterating over numeric indices {.scrollable}

[Iterating over numeric indices is the most common form. It is useful when we want to use the index (the iterator) for more than one purpose within the loop:]{style="font-size: 30px"}

```{r}
for (m in seq_along(month.name)) {
  month <- month.name[[m]]
  rank <- m
  message(month, " is the month ", rank)
}
```

## Example of loop

::::: columns
::: {.column width="80%"}

[Let's build a [Fibonacci sequence](https://en.wikipedia.org/wiki/Fibonacci_sequence){preview-link="false"}, defined as:]{style="font-size: 30px"} 

[$F_0 = 0$, $F_1 = 1$ and for $n>1$ $F_n = F_{n-1} + F_{n-2}$]{style="font-size: 30px"} 
:::

::: {.column width="20%"}
![](fibonacci.png)
:::
:::::

```{r}
n = 20 # length of the sequence
fib <- numeric(n) # Fibonacci sequence
fib[1] <- 0 # F0
fib[2] <- 1 # F1

for (i in seq_along(fib)[3:n]) {
  fib[i] <- fib[i - 1] + fib[i - 2]
}

fib
```


## Output of a loop 

[When a loop generates data, it is important to **pre-allocate the output to the required size rather than grow it inside a loop**, because pre-allocation avoids repeated memory copying and is significantly **faster** and **more efficient**, especially for large outputs]{style="font-size: 30px"}

::::: columns
::: {.column width="50%"}

::: fragment

[Preferred way:]{style="font-size: 30px"}

```{r}
# create an output 
 # of the required size
out <- vector("integer", 
              length = 10)
for (i in seq_along(out)) {
  out[[i]] <- i
}
out  
```
:::
:::

::: {.column width="50%"}

::: fragment

[Much slower and less efficient way:]{style="font-size: 30px"}

```{r}
# create an empty output 
  # and grow it inside the loop
out <- integer()
for (i in 1:10) {
  out <- c(out, i)
}
out
```
:::

:::
:::::

[[*This is particularly important for especially for large outputs.*]{style="font-size: 25px"}]{.fragment}

## [while]{style="color:indianred;"} loops

Let's take an example of a [while]{style="color:indianred;"} loop that simulate flipping a coin until we obtain a head:

```{r, echo=FALSE}
set.seed(23)
```


```{r}
res <- ""
while (res != "head") {
    res <- sample(c("head", "tail"), size = 1)
    print(res)
}
```

::: fragment

[Let's try again:]{style="font-size: 30px"}

```{r}
res <- ""
while (res != "head") {
    res <- sample(c("head", "tail"), size = 1)
    print(res)
}
```
:::

::: notes
other type of loop
:::

## [while]{style="color:indianred;"} loops

![](while.png)

A [while]{style="color:indianred;"} loop executes a block of code as long as the conditions is true.


## Using [next]{style="color:indianred;"} within a loop

[We can use [next]{style="color:indianred;"} within a loop to skip the rest of the current iteration and move directly to the next one under a given condition.]{style="font-size: 30px"}

::::: columns
::: {.column width="50%"}

::: fragment

[Let's work with a subset of the data starwars:]{style="font-size: 25px"}

```{r}
starwars <- starwars[,1:4] 
head(starwars, 3)
```

:::
:::

::: {.column width="50%"}
::: fragment

```{r}
for(var in names(starwars)) {
  if(!is.numeric(starwars[[var]])) {
    next
  }
  message("The mean of ", var, 
          " is ", 
          mean(starwars[[var]], 
               na.rm = TRUE))
}
```

:::
:::
:::::

[[*Here we create a loop returning the mean of numeric columns of a data frame. We use [next]{style="color:indianred;"} to skip any column that is not numeric:*]{style="font-size: 30px"}]{.fragment}


::: notes
here we can round it...
:::

## Using [break]{style="color:indianred;"} within a loop

[We can use also use [break]{style="color:indianred;"}, which stop the whole loop under a given condition.]{style="font-size: 30px"}

```{r}
for(var in names(starwars)) {
  if(!is.numeric(starwars[[var]])) {
    break
  }
  message("The mean of ", var, 
          " is ", 
          mean(starwars[[var]], 
               na.rm = TRUE))
}
```

[[*Here nothing is return as the first column is not numeric, so the loop stops at the first iteration.*]{style="font-size: 30px"}]{.fragment}

## Writing a loop

As for a function, a loop needs to be write **step by step**:

* Plan the loop before you start coding.

* Set the iterator to its first value while writing the loop.

* Test each line of code as you write it, using that initial iterator value.

* Once finished, test the full loop with the entire dataset.



# Functional programming with the [tidyverse]{style="color:indianred;"}

**Functional programming** is a way of writing code based on the use of small functions.

It is often used as an alternative to loops. 

::: notes
most of the example that we are going to see could have been writen as a loop 

but are faster, but more importantly more concice
:::

## [map]{style="color:indianred;"}: apply a function to a vector or a list {.scrollable}

[[map]{style="color:indianred;"} is a function from the package [purr]{style="color:indianred;"} used to apply a function to each element of a vector or a list:]{style="font-size: 30px"}

::: fragment

[Let's first create a **vector** and a small function:]{style="font-size: 30px"}

```{r}
vec_num <- c(2, 8, 4) # create a vector
# create a function giving TRUE is x > 5, FALSE otherwise
sup_5 <- function(x) {x > 5} 
```

:::

[[To use [map]{style="color:indianred;"}, we first pass the vector/list on which to apply a function, and then the function to apply]{style="font-size: 30px"}]{.fragment}

::::: columns
::: {.column width="50%"}

::: fragment
```{r}
map(vec_num, # vector 
    sup_5)   # function 
```

:::
:::

::: {.column width="50%"}

::: fragment
```{r}
# or using a pipe
vec_num %>% map(sup_5)
```

:::
:::

:::::


## [map]{style="color:indianred;"}: apply a function to a vector or a list

[Let's use our function mean_diam on a **list** of vectors of circumferences:]{style="font-size: 30px"}

```{r}
# create the list
circ_list <- list(sample1 = runif(n = 35, min = 30, max = 250),
                 sample2 = runif(n = 35, min = 30, max = 250),
                 sample3 = runif(n = 35, min = 30, max = 250))
# apply the function on the list
circ_list %>% map(mean_diam)
```



## Variants of [map]{style="color:indianred;"} 

[[map]{style="color:indianred;"} always return a list.]{style="font-size: 30px"}

[But several variants of [map]{style="color:indianred;"} returning vectors also exist:]{style="font-size: 30px"}

* [[map_int]{style="color:indianred;"} and [map_dbl]{style="color:indianred;"} return a vector of **integer** and **double**, respectively]{style="font-size: 30px"}

::: fragment
```{r}
circ_list %>% map_dbl(mean_diam)
```
:::

* [[map_lgl]{style="color:indianred;"} returns a vector of **logical**]{style="font-size: 30px"}

::: fragment
```{r}
vec_num %>% map_lgl(sup_5)
```
:::

* [[map_chr]{style="color:indianred;"} returns a vector of **character**]{style="font-size: 30px"}


::: notes 
these ex to do the same thing than in the two examples before but returning a vector

map_chr on next slide
:::


## Variants of [map]{style="color:indianred;"}  {.smaller}

[Here is an example of use of [map_chr]{style="color:indianred;"} on the list *desserts* (that we created before):]{style="font-size: 30px"}

```{r}
# create a function
love_dessert <- function(x) {
  paste("I loves", x,"!")
}

desserts %>% map_chr(love_dessert)
```
::: fragment

[Note that this is an alternative to the following loop:]{style="font-size: 30px"}

```{r}
out_dessert <- vector(length = length(desserts), mode = "character") # vector to store the result
for (i in seq_along(desserts)) {
  names(out_dessert)[i] <- names(desserts)[i]
  out_dessert[i] <- paste("I loves", desserts[i],"!")
}
out_dessert
```
:::

::: notes
the loop is slightly different than the loop that we created before with desserts
:::


## Using anonymous functions with [map]{style="color:indianred;"}

[For a small function that we don't want to reuse, we can define the function directly inside [map]{style="color:indianred;"}:]{style="font-size: 30px"}

```{r}
desserts %>% map_chr(function(x) {
  paste("I loves", x,"!")
})
```

::: fragment

[We can also use the abbreviated syntax, where [function(...){}]{style="color:indianred;"} is replaced by [\\(...)]{style="color:indianred;"}:]{style="font-size: 30px"}

```{r}
desserts %>% map_chr(\(x) paste("I loves", x,"!"))
```

:::

::: notes
this is advanced, not problem if you don't understand / remember
::: 


## [walk]{style="color:indianred;"} for side effects

[The function [walk]{style="color:indianred;"} is used when you want to perform an action for its side effect (e.g., printing a message, creating a plot, or saving a file). It doesn't return a result:]{style="font-size: 30px"}

```{r}
vec_name %>% # vector of names created earlier
  walk(
    function(name) {message("Hello ", name, "!")}
    )
```

[[💡This is equivalent to the [for]{style="color:indianred;"} loop we wrote before.]{style="font-size: 30px"}]{.fragment}


## [across]{style="color:indianred;"}: apply a function to tibble {.scrollable}

[[across]{style="color:indianred;"} is a function of the package [dplyr]{style="color:indianred;"} used to apply a function to several columns of a tibble.]{style="font-size: 30px"}
[[[across]{style="color:indianred;"} takes 2 arguments: the definition of the columns to transform, and the function to apply:]{style="font-size: 30px"}]{.fragment}

::: fragment

[Let's use our function [recode_Likert]{style="color:indianred;"} to recode *dt_Likert*:]{style="font-size: 30px"}

```{r}
#| warning: FALSE
dt_Likert %>% 
  mutate(across(
         c(Question1, Question2, 
           Question3, Question4), # columns to transform
         recode_Likert) # function to apply
  )
```
:::

::: notes
In the previous session, we had to write the name of the function everytime...

dt_Likert %>% 
  mutate(Question1 = recode_Likert(Question1),
         Question2 = recode_Likert(Question2),
         Question3 = recode_Likert(Question3),
         Question4 = recode_Likert(Question4),
         )


the warning just tell us that some of the column don't have all the levels that we try to recode => OK
:::


## [across]{style="color:indianred;"}: apply a function to tibble

[The columns to transform can be specified:]{style="font-size: 30px"}

* [using [c()]{style="color:indianred;"} (as in the last example)]{style="font-size: 30px"}

* [using [:]{style="color:indianred;"}]{style="font-size: 30px"}

::: fragment
```{r, eval = FALSE}
dt_Likert %>% 
  mutate(across(
         Question1:Question4, # columns to transform
         recode_Likert) # function to apply
  )
```
:::

* [using [starts_with]{style="color:indianred;"}, [ends_with]{style="color:indianred;"}, [matches]{style="color:indianred;"} or [contains]{style="color:indianred;"}]{style="font-size: 30px"}

::: fragment
```{r, eval = FALSE}
dt_Likert %>% 
  mutate(across(
         starts_with("Question"), # columns to transform
         recode_Likert) # function to apply
  )
```
:::

## [across]{style="color:indianred;"}: apply a function to tibble 

[The columns to transform can be specified:]{style="font-size: 30px"}

* [using [num_range]{style="color:indianred;"}]{style="font-size: 30px"}

::: fragment
```{r, eval = FALSE}
dt_Likert %>% 
  mutate(across(
         num_range("Question", 1:4), # columns to transform
         recode_Likert) # function to apply
  )
```
:::

## [across]{style="color:indianred;"}: apply a function to tibble {.scrollable}

[The columns to transform can be specify:]{style="font-size: 30px"}

* [using [everything]{style="color:indianred;"}:]{style="font-size: 30px"}

::: fragment
```{r}
iris_sub %>% 
  summarise(across(
    everything(), # columns to transform
    mean) # function to apply
    )
```

:::

[[💡 Note that here we have used [across]{style="color:indianred;"} with [summarise]{style="color:indianred;"}]{style="font-size: 30px"}]{.fragment}

::: notes
before, it was with mutate
:::

## [across]{style="color:indianred;"}: apply a function to tibble {.scrollable}

[We can also use [where]{style="color:indianred;"} to specify the columns with a condition:]{style="font-size: 30px"}

```{r}
iris %>% summarise(across(
    where(is.numeric), # columns to transform
    mean) # function to apply
    )
```

::: fragment

[[where]{style="color:indianred;"} can take more complex tests:]{style="font-size: 30px"}

```{r}
iris %>% 
  summarise(across(
      where(is.numeric) & !Sepal.Length,
      mean)
    )
```


:::


## Names of the columns created by [across]{style="color:indianred;"} within [mutate]{style="color:indianred;"} {.smaller}

[Using [across]{style="color:indianred;"} within [mutate]{style="color:indianred;"} replace the columns.
To keep them we need to indicate how to name them, using the argument [.names]{style="color:indianred;"}:]{style="font-size: 30px"}

```{r}
#| warning: FALSE
dt_Likert %>% 
  mutate(across(
         starts_with("Question"), # columns to transform
         recode_Likert, # function to apply
         .names = "{.col}_recoded") # how to name the new columns
  )
```


## Apply several functions to several columns

[To apply several functions to several columns with [across]{style="color:indianred;"}, we can pass them in a list:]{style="font-size: 30px"}

```{r}
iris %>% 
  summarise(across(
      c(Sepal.Width, Sepal.Length), # columns to transform
      list(minimum = min, maximum = max) # list of functions to apply
    )
  )
```

## [summarise]{style="color:indianred;"} versus [map]{style="color:indianred;"}

[The two following commands return almost the same results, but:]{style="font-size: 30px"}

* [[map_dbl]{style="color:indianred;"} returns a **vector**]{style="font-size: 30px"}

::: fragment
```{r}
iris_sub %>% map_dbl(mean)
```
:::

* [[summarise]{style="color:indianred;"} returns a **tibble** with one row:]{style="font-size: 30px"}

::: fragment
```{r}
iris_sub %>% summarise(
  across(everything(),
         mean)
)
```
:::


## [rowwise]{style="color:indianred;"}: apply a transformation line by line 

::::: columns
::: {.column width="40%"}

[Let's create a tibble:]{style="font-size: 30px"}

```{r}
dt_sim <- tibble(
  Min = c(1, 25, 300),
  Max = c(4, 75, 500)
)
dt_sim
```

::: 

::: {.column width="60%"}

::: fragment 
[We would like to add a random number drawn between Min and Max, for each row:]{style="font-size: 30px"}

```{r}
dt_sim %>% 
  mutate(rand_draw = runif(1, 
                           min = Min, 
                           max = Max))
```

:::
:::
:::::

[[🥴 This didn't work... [mutate]{style="color:indianred;"} was applied only once using Min and Max of the first row... ]{style="font-size: 30px"}]{.fragment}

::: notes
example doesn't work
:::

## [rowwise]{style="color:indianred;"}: apply a transformation line by line 

[We use [rowwise]{style="color:indianred;"} to apply the command **line by line**:]{style="font-size: 30px"}

```{r}
dt_sim %>% 
  rowwise() %>% 
  mutate(rand_draw = runif(1, min = Min, max = Max))
```

## Apply a transformation line by line with [rowwise]{style="color:indianred;"} and [c_accross]{style="color:indianred;"} {.scrollable}

[When there are many columns, we can use [c_accross]{style="color:indianred;"} with [rowwise]{style="color:indianred;"} to specify the columns:]{style="font-size: 30px"} 

```{r}
# Let's first make the responses to questions numeric
dt_Likert_num <- dt_Likert %>% 
  mutate(across(Question1:Question4, as.numeric)) 

# Apply a row-wise transformation
dt_Likert_num %>% 
  rowwise() %>% 
  mutate(
    Mean = mean(c_across(Question1:Question4))
  )
```

[[*We could of course do everything in a single pipe.*]{style="font-size: 30px"}]{.fragment}

::: notes
scroll down!
:::

::: notes
here the responses were factors so need to transform them in numeric to take the mean

show in 2 separate pipe to avoid confusion
:::

## The [apply]{style="color:indianred;"} family

::::: columns
::: {.column width="65%"}

The [apply]{style="color:indianred;"} family in base R is an alternative way to perform functional programming, using a different syntax than [map]{style="color:indianred;"} and [across]{style="color:indianred;"}.

[To know more about the [apply]{style="color:indianred;"} family, see [here](https://www.r-bloggers.com/2024/04/exploring-apply-sapply-lapply-and-map-functions-in-r/){preview-link="false"}]{style="font-size: 30px"}

:::

::: {.column width="35%"}
![](apply_map.png)
:::
:::::

::: notes
for some who are familiar with R, may have heard of the apply family => won't cover them here as equivalent to the function we have seen
:::


## When not to use a loop?

::::: columns
::: {.column width="70%"}

* [when a vectorised alternative exists:]{style="font-size: 30px"}


[[We will obviously not do this:]{style="font-size: 30px"}]{.fragment}

::: fragment
```{r}
for (i in seq_along(vec_num)) {
    x[i] <- x[i] + 10
}
```
:::


[[when we could do this:]{style="font-size: 30px"}]{.fragment}

::: fragment
```{r}
vec_num + 10
```
:::


* [when [across]{style="color:indianred;"} or [map]{style="color:indianred;"} could be used]{style="font-size: 30px"}

:::

::: {.column width="30%"}

[[*But remember that the best code is the code you can write and understand. Loops are fine, especially if you're not chasing efficiency.*]{style="font-size: 25px"}]{.fragment}

:::
:::::

::: notes
to finish:

as seen, many of our loops could be written with accross or map

:::



## Acknowledgments {.smaller}

::: {.nonincremental}

* Barnier J. *Introduction à R et au tidyverse* [in French](https://juba.github.io/tidyverse/){preview-link="false"}

:::

## Ressources

::: {.nonincremental}

* Wickham H., Cetinkaya-Rundel M., Grolemund G. *R for Data Science*  - Chapter on iterations [in English](https://r4ds.had.co.nz/iteration.html) and [in Portuguese](https://pt.r4ds.had.co.nz/iteration.html){preview-link="false"}

* Wickham H. *Advanced R*  - Chapter on control flow [in English](https://adv-r.hadley.nz/control-flow.html){preview-link="false"}

:::
