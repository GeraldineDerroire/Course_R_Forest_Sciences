---
title: "Going further with R - session 1/2"
author: G√©raldine Derroire
institute: Cirad - UnB
date: last-modified
format: 
  revealjs:
    theme: solarized
    output-location: fragment 
    slide-number: true
    preview-links: true
    chalkboard: true
    link-external-icon: true
    link-external-newwindow: true
    incremental: true
execute:
  echo: true   
  warning: true
  message: true 
  cache: true
editor: 
  markdown: 
    wrap: sentence
---


# 

Let's load the package we will use:

```{r}
#| message: false
library(tidyverse)
```


```{r, echo=FALSE}
set.seed(14)
```

# Vector creation

::: notes
some reminders of things already seen + some new things

these will be usefull if you need to simulate data (for exemple for predictions using a model)
:::

## Combine elements into a vector

[We already saw how to use [c]{style="color:indianred;"} to combine values to create a vector.
This function is applicable to any mode of vector:]{style="font-size: 30px"}

::: fragment
```{r}
vec_num <- c(1, 25, 8, 32, 9, 15.3)
mode(vec_num)
```
:::

::: fragment
```{r}
vec_name <- c("Lucas", "Gabriel", "Ana", "Maria", "Jo√£o")
mode(vec_name)
```
:::

::: fragment
```{r}
vec_bool <- c(TRUE, TRUE, FALSE, TRUE, FALSE, FALSE)
mode(vec_bool)
```
:::

## Repeat elements

[We can also use [rep]{style="color:indianred;"} to repeat individuals values of any mode:]{style="font-size: 30px"}

* [repeating a vector several **times**:]{style="font-size: 30px"}

::: fragment
```{r}
rep(c("A", "B", "C"), times = 3)
```
:::

* [repeating **each** value several times:]{style="font-size: 30px"}

::: fragment
```{r}
rep(c("A", "B", "C"), each = 3)
```
:::

* [specifying the **output length** of the vector:]{style="font-size: 30px"}

::: fragment
```{r}
rep(c("A", "B", "C"), length.out = 5)
```
:::

## Create numeric sequences

[We have seen how to use [:]{style="color:indianred;"} to create a numeric sequence:]{style="font-size: 30px"}

```{r}
1:10
```

[[We can also use [seq]{style="color:indianred;"}, which allow selecting]{style="font-size: 30px"}]{.fragment}

::::: columns
::: {.column width="50%"}

* [the length:]{style="font-size: 30px"}

::: fragment
```{r}
seq(from = 1, to = 10, 
    length.out = 4)
```
:::

* [the step size:]{style="font-size: 30px"}

::: fragment
```{r}
seq(from = 1, to = 5, 
    by = 0.5)
```
:::

:::

::: {.column width="50%"}

* [or both:]{style="font-size: 30px"}

::: fragment
```{r}
seq(from = 10, 
    by = -2, 
    length.out = 5)
```
:::

:::
:::::

## Predefined letter vectors

::::: columns
::: {.column width="50%"}

[[letters]{style="color:indianred;"} and [LETTERS]{style="color:indianred;"} are predefined vectors of letters:]{style="font-size: 30px"}

::: fragment
```{r}
str(letters)
str(LETTERS)
```
:::

:::

::: {.column width="50%"}

[[and [month.name]{style="color:indianred;"} and [month.abb]{style="color:indianred;"} are predefined vectors of months:]{style="font-size: 30px"}]{.fragment}

::: fragment
```{r}
str(month.name)
str(month.abb)
```
:::

:::
:::::

[[They can be used with other functions:]{style="font-size: 30px"}]{.fragment}

::: fragment
```{r}
rep(month.abb, length.out = 20)
rep(LETTERS[1:3], each = 2)
```
:::

::: notes
these ARE NOT FUNCTIONS 
::: 

## Generate factor levels

[[gl]{style="color:indianred;"} creates factors of a given number of level *n* and a given number of replications *k*:]{style="font-size: 30px"}

::: fragment
```{r}
gl(n = 2, k = 3)
```
:::

[[The levels can also be specified:]{style="font-size: 30px"}]{.fragment}

::: fragment
```{r}
gl(n = 3, k = 2, 
   labels = c("blue", "green", "red"))
```
:::

## Generate empty vectors

[Empty vectors with a specified mode can be generated with [numeric]{style="color:indianred;"}, [logical]{style="color:indianred;"} and [character]{style="color:indianred;"}:]{style="font-size: 30px"}

::::: columns
::: {.column width="50%"}

```{r}
numeric(length = 3)
```

```{r}
logical(length = 5)
```

```{r}
character(length = 4)
```

:::

::: {.column width="50%"}

::: fragment

[‚ö†Ô∏è Note the default values! To get NA:]{style="font-size: 30px"}

```{r}
rep(NA_real_, 3)
# or 
as.numeric(rep(NA, 3))
```
:::

::: fragment
```{r}
rep(NA_character_, 4)
```
:::

::: fragment
```{r}
mode(rep(NA,5))
```
:::

:::
:::::

::: notes
_NA_logical doesn't exist as NA is already logical
:::

## Random sampling

[Random samples can be drawn using [sample]{style="color:indianred;"}:]{style="font-size: 30px"}

```{r}
sample(vec_name, # vector from which to draw
       size = 2) # number of elements to draw
```
[[By default, sampling is done without replacement:]{style="font-size: 30px"}]{.fragment}

::: fragment
```{r, eval=FALSE}
sample(month.name, size = 13)
```

```{r, echo=FALSE}
try(sample(month.name, size = 13))
```
:::

[[We can specify if sampling is done with replacement:]{style="font-size: 30px"}]{.fragment}

::: fragment
```{r}
sample(1:3, size = 10, replace = TRUE)
```
:::

::: notes
all of the above is deterministic => we get the same results everytime. But these are random
:::

## Random sampling

[[sample]{style="color:indianred;"} can be used to shuffle values:]{style="font-size: 30px"}

```{r}
sample(month.abb, size = length(month.abb))
```

[[üí° As the sampling is done randomly, the result is different each time:]{style="font-size: 30px"}]{.fragment}

::: fragment
```{r}
sample(month.abb, size = length(month.abb))
```
:::

## Generate random numbers from distributions

[We have seen how to randomly draw numbers from a uniform distribution:]{style="font-size: 30px"}

```{r}
runif(n = 5, min = -3, max = 3)
```

[[and from a normal distribution:]{style="font-size: 30px"}]{.fragment}

::: fragment
```{r}
rnorm(n=5, mean = 3, sd = 0.5)
```
:::

## Generate random numbers from distributions

[Other distributions can be used:]{style="font-size: 30px"}

::::: columns
::: {.column width="50%"}

* [Binomial (number of success in a fixed number of trials):]{style="font-size: 30px"}

::: fragment
```{r}
rbinom(n = 4, size = 25, 
       prob = 0.8) # probability of success
```
:::
:::

::: {.column width="50%"}

* [Bernoulli (binomial distribution with one trial):]{style="font-size: 30px"}

::: fragment
```{r}
rbinom(n = 4, size = 1, 
       prob = 0.5) # probability of success
```
:::
:::
:::::

* [Poisson (discrete positive integers, typically used for counts):]{style="font-size: 30px"}

::: fragment
```{r}
rpois(n = 10, 
      lambda = 5) # expected mean
```
:::





# Writing your own functions

## What is a function?

As previously seen, a function take one or several **arguments** (data, parameters, options) as in put, performs some code, and returns a result:

![](function_1.png)

## Why writing functions?

[When you need to repeat the same actions more than twice, it is recommanded to write a function. This helps:]{style="font-size: 30px"}

* [Avoid code duplication]{style="font-size: 30px"}

* [Make your code reusable across multiple scripts and projects ‚Äî and even organise it into a package]{style="font-size: 30px"}

[[‚ö†Ô∏è Copying and pasting has several drawbacks:]{style="font-size: 30px"}]{.fragment}

* [It's error-prone (e.g., updating some but not all instances of a variable)]{style="font-size: 30px"}

* [If you want to modify/update/correct the code, you have to modify it everywhere manually]{style="font-size: 30px"}

::: notes
a package can be written for oneself
:::

## Structure of a function

To create a function, we use the instruction [function]{style="color:indianred;"}:

```{r, eval= FALSE}
function() {
  
}
```

* the **arguments** will be specified in the [()]{style="color:indianred;"}

* the code of the function will be written in the [{}]{style="color:indianred;"}, which is the **body** of the function

## Structure of a function - name

To be able to call a function to use it, we need to give it a **name**.

Let's create a function called *my_first_function*:

```{r, eval= FALSE}
my_first_function <- function() {
  
}
```

[[‚ö†Ô∏è Be careful not to give the name of an already existing function to your function. This would replace the existing function until you restart your session.]{style="font-size: 30px"}]{.fragment}

## Structure of a function - result

This function will say *hello* (what a lovely function üòä). 

This mean that it will **return** a character string saying *hello* as a result:

```{r}
my_first_function <- function() {
  return("Hello!")
}
```

::: fragment

Let's use it:

```{r}
my_first_function()
```
:::

## Structure of a function - argument and body

[We now want to personalise our greeting...]{style="font-size: 30px"}

Let's add an **argument** that we call *name* to our function, and use it in the code that we write in the **body** of the function:

```{r}
my_first_function <- function(name) {
  greeting <- paste("Hello", name, "!")
  return(greeting)
}
```

::: fragment

[We can now pass a value to this argument when running the function:]{style="font-size: 30px"}

```{r}
my_first_function(name = "Jo√£o")
```

:::

::: fragment

[Note that we can also pass a vector:]{style="font-size: 30px"}

```{r}
my_first_function(name = vec_name)
```
:::
:::

::: notes
you have written a function! easy!
:::

## Structure of a function

![](function_str.png)

## Arguments

[A function can have several arguments:]{style="font-size: 30px"}

```{r}
my_sum <- function(x, y) {
  return(x + y)
} 
my_sum(2, 8)
```

[[or none (see our very first function)...]{style="font-size: 30px"}]{.fragment}

::: fragment

[‚ö†Ô∏èPassing an incorrect number of values to the arguments of a function will result in an error:]{style="font-size: 30px"}

```{r, eval = FALSE}
my_sum(1)
```

```{r, echo=FALSE}
try(my_sum(1))
```

:::


## Loading and updating a function

To be able to use a function, it must be **loaded in the environment**.

To do this, we execute the code of the function (*i.e.* the code that creates the function).

[‚ö†Ô∏è After updating a function, you must execute the code again to load the updated version.]{.fragment}



## Writing a function step by step {.smaller}

*We now want to write a function that calculates the mean diameter (in m) when given a vector of circumference (in cm).*

**Step 1: plan**

Let's start identifying the arguments and planning the operations (without running the code):

```{r, eval = FALSE}
# Arguments
  circ # a vector of circumference in cm
  
# Body of the function
  # Calculate diameters in m
  # Calculate the mean value
  # Return the diameter
```


## Writing a function step by step {.smaller}

**Step 2: create test data and argument**

Try to create data as close as possible to the one you will be using.

*Here we create a vector of circumference that contain NA:*

```{r}
test_circ <- c(runif(n = 9, 
                     min = 30, max = 250),
               NA)
test_circ
```
::: notes
test data don't necessarily need to be created from scratch, they can be a subset of our real data
:::

## Writing a function step by step {.smaller}

**Step 3: develop the code**

The code is developed line by line, testing every line (or almost every line...) :

```{r}
# Arguments
  circ <- test_circ # vector of circumference in cm

# Body of the function
  # Calculate diameters in m
    diam <- circ / (pi * 100)
  # Calculate the mean value
  # Return the diameter
    
diam    
```

::: notes
all good
:::

## Writing a function step by step {.smaller}

**Step 3: develop the code**

```{r}
# Arguments
  circ <- test_circ # vector of circumference in cm

# Body of the function
  # Calculate diameters in m
    diam <- circ / (pi * 100)
  # Calculate the mean value
    mean_diam <- mean(diam)
  # Return the diameter
    
mean_diam    
```

[*Because of the NA, the mean is not calculated... How do we want to handle this? We can let the user decide...*]{.fragment}

## Writing a function step by step {.smaller}

**Step 3: develop the code... and add arguments if needed**

*Let's add an argument to let the user choose what to do with NA, and give it a test value*

```{r}
# Arguments
  circ <- test_circ # vector of circumference in cm
  na_act <- TRUE # boolean: remove NA?

# Body of the function
  # Calculate diameters in m
    diam <- circ / (pi * 100)
  # Calculate the mean value
    mean_diam <- mean(diam, na.rm = na_act)
  # Return the diameter
    
mean_diam    
```
[üí° *na.rm* is an argument of the function mean. We pass it an argument of our own function.]{.fragment}

::: notes
all good
:::

## Writing a function step by step {.smaller}

**Step 3: develop the code... and add arguments if needed**

*We would like to round the mean diameter, let's add a new operation and an argument giving the number of decimals.*

```{r}
# Arguments
  circ <- test_circ # vector of circumference in cm
  na_act <- TRUE # boolean: remove NA?
  digits <- 2 # integer: number of digits to keep

# Body of the function
  # Calculate diameters in m
    diam <- circ / (pi * 100)
  # Calculate the mean value
    mean_diam <- mean(diam, na.rm = na_act)
  # Round the diameter
    mean_diam <- round(mean_diam, digits = digits)
  # Return the mean diameter
    mean_diam    
```

::: notes
one of our argument can take the same name as in the function in which we use it
:::

## Writing a function step by step {.smaller}

**Step 4: create the function**: add a name, add he instruction *function*, put the argument in *()* and the code in *{}*, add *return* (optional) 

```{r}
mean_diam <- function(circ, na_act, digits) {
  # Calculate diameters in m
    diam <- circ / (pi * 100)
  # Calculate the mean value
    mean_diam <- mean(diam, na.rm = na_act)
  # Round the diameter
    mean_diam <- round(mean_diam, digits = digits)
  # Return the mean diameter
    return(mean_diam)
}
```

## Writing a function step by step {.smaller}

**Step 5: test the function**

::: fragment

‚ö†Ô∏è Don't forget to remove the test arguments from the environment before testing.

```{r}
# remove test argument
 rm(circ, digits, na_act)
# new data
 new_circ <- c(runif(n = 35, min = 30, max = 250), NA)
``` 

:::

::: fragment

```{r}
# first test
 mean_diam(circ = new_circ, digits = 1, na_act = TRUE)
```

:::

::: fragment
```{r}
# second test
mean_diam(circ = new_circ, digits = 4, na_act = TRUE)
```
:::

::: fragment
```{r}
# third test
mean_diam(circ = new_circ, digits = 3, na_act = FALSE)
```
:::

::: notes 
we will see later why removing the test arguments

here we really decompose the writing, when you get more confident, the code can be more compact (and use pipe if we want)
:::

## Side effects

The objective of a function may not be to return a result, but to perform an action, such as returning a graph, printing a message or a value, saving a file...

These actions are called **side effects**.

In these case, we will not need *return*.

<!--

## Side effects

[The following function is an example of a function with side effect:]{style="font-size: 30px"}

```{r, warning = FALSE, message = FALSE}
#| fig-width: 4
#| fig-height: 3
my_hist <- function(vec) {
  ggplot(as_tibble(vec), (aes(x = value))) + geom_histogram()
}

my_hist(new_circ)
```

-->

## Side effects

[For a function aiming to print a value in the console, we can use [print]{style="color:indianred;"}:]{style="font-size: 30px"}

```{r}
my_sum2 <- function(x, y) {
  print(x + y)
}
my_sum2(5, 9)
```

::: fragment

[or [cat]{style="color:indianred;"} if we want to print a character string:]{style="font-size: 30px"}

```{r}
my_sum3 <- function(x, y) {
  cat("The sum is", x + y)
}
my_sum3(11, 3)
```

:::

## Message

[We can also include a [message]{style="color:indianred;"} in a function:]{style="font-size: 30px"}

```{r}
min_rand <- function(n) {
  message("Random generation of ", n, " numbers.")
  v <- runif(n)
  cat("The smallest generated number is", min(v))
}

min_rand(100)
```

## Passing arguments to a function

[When passing arguments to a function, we can specify them]{style="font-size: 30px"}

::::: columns
::: {.column width="50%"}

* [by their names:]{style="font-size: 30px"}

::: fragment
```{r}
median(x = vec_num, na.rm = TRUE)
```
:::

* [by their position]{style="font-size: 30px"}

::: fragment
```{r}
median(vec_num, TRUE)
```
:::
:::


::: {.column width="50%"}

* [by a combination of both]{style="font-size: 30px"}

::: fragment
```{r}
median(vec_num, na.rm = TRUE)
```
:::
:::
:::::

[[üí° Usually the data are passed by position, and the rest by name.]{style="font-size: 30px"}]{.fragment}

## Default values of arguments {.smaller}

[Let's go back to our [mean_diam]{style="color:indianred;"} function. If we don't specify the values for all the arguments, we get an error:]{style="font-size: 30px"}

```{r, eval = FALSE}
mean_diam(new_circ)
```

```{r, echo = FALSE}
try(mean_diam(new_circ))
```

[We can specify **default** values that are taken by the arguments if no values is passed :]{style="font-size: 30px"}

```{r}
mean_diam <- function(circ, 
                      na_act = TRUE, # default value
                      digits = 2) { # default value
  diam <- circ / (pi * 100)
  mean_diam <- mean(diam, na.rm = na_act)
  mean_diam <- round(mean_diam, digits = digits)
  return(mean_diam)
}

mean_diam(new_circ)
```

[[‚ö†Ô∏è When using a function, providing a value for an argument with a default value is *optional*, but it is *compulsory* for the arguments without default values.]{style="font-size: 30px"}]{.fragment}

::: notes
if we don't specify the values of an argument, we get an error

here I have removed the comments from the function, but it's only to save space. They could be kept
:::

## The ... argument

[We can add [...]{style="color:indianred;"} to allow passing all possible arguments to a function we call inside our function, without needing to specify them explicitly:]{style="font-size: 30px"}

::::: columns
::: {.column width="70%"}

```{r, warning = FALSE, message = FALSE}
#| fig-width: 4
#| fig-height: 3
my_hist2 <- function(vec, ...) {
  ggplot(as_tibble(vec), (aes(x = value))) +
    geom_histogram(...)
}

my_hist2(new_circ, 
         col = "blue", fill = "lightblue")
```

:::

::: {.column width="30%"}

[[The argument *col* and *fill* have been passed to [geom_histogram]{style="color:indianred;"}.]{style="font-size: 30px"}]{.fragment}

:::
:::::

## Result of a function

[We don't necessary have to use [return]{style="color:indianred;"} to return the result of a function:]{style="font-size: 30px"}

```{r, eval = FALSE}
my_sum <- function(x, y) {
  res <- x + y
  return(res)
} 
```

[can be written]{style="font-size: 30px"} 

```{r, eval = FALSE}
my_sum <- function(x, y) {
  res <- x + y
  res
} 
```

[or even]{style="font-size: 30px"} 

```{r, eval = FALSE}
my_sum <- function(x, y) {
  x + y
} 
```



## Result of a function

::::: columns
::: {.column width="50%"}

[The instruction [return]{style="color:indianred;"} ends the execution of a function, **so we cannot use [return]{style="color:indianred;"} twice:**]{style="font-size: 30px"}

```{r}
my_summary <- function(v) {
  return(mean(v))
  return(median(v))
}

my_summary(vec_num)
```
:::

::: {.column width="50%"}

[[To return several results for a function, the best solution is to store them in a **named list**:]{style="font-size: 30px"}]{.fragment}

::: fragment
```{r}
my_summary <- function(v) {
  list(mean = mean(v),
       median = median(v))
}

res <- my_summary(vec_num)
res
```
:::
:::
:::::

## Functions within functions

[It is possible to use a function (including a home made one) within a function.]{style="font-size: 30px"}

::: fragment

[Splitting a big function into smaller nested ones makes each step clearer and easier to maintain.]{style="font-size: 30px"} 

[In addition, these small functions can potentially be reused in other parts of your code.]{style="font-size: 30px"}

:::

## Sourcing a function

[It is recommended to write each function in a separate script and place these scripts in a dedicated folder within your project, usually called *R*.
**An exception can be made for small functions or functions used only once in a single script.**]{style="font-size: 30px"}

::: fragment
[A function saved in a separate file can be made available in your script by **sourcing** it:]{style="font-size: 30px"}

```{r, eval=FALSE}
source("R/my_function.R")
```

:::

::: notes
about the organisation of a project, see the second lesson
:::

## Using our own functions with [dplyr]{style="color:indianred;"} {.smaller}

[Let's create an example data set containing responses to an opinion poll, coded on a Likert scale:]{style="font-size: 30px"}

```{r}
dt_Likert <- tibble(
  id = LETTERS[1:6],
  Question1 = as.factor(sample(1:5, 6, replace = TRUE)),
  Question2 = as.factor(sample(1:5, 6, replace = TRUE)),
  Question3 = as.factor(sample(1:5, 6, replace = TRUE)), 
  Question4 = as.factor(sample(1:5, 6, replace = TRUE))
)
dt_Likert
```

[[We want to recode the responses to make them more explicit. We could recode each variables manually using [mutate]{style="color:indianred;"} and [fct_recode]{style="color:indianred;"} but this would be very tedious...]{style="font-size: 30px"}]{.fragment}

## Using our own functions with [dplyr]{style="color:indianred;"} {.smaller}

::::: columns
::: {.column width="75%"}

[We can instead create a function to do the recoding:]{style="font-size: 30px"}

```{r}
recode_Likert <- function(v) {
  fct_recode(v,
             "Strongly disagree" = "1",
             "Disagree" = "2",
             "Neutral" = "3",
             "Agree" = "4",
             "Strongly agree" = "5")
}
```

[and use it with mutate to recode all variables:]{style="font-size: 30px"}

```{r}
#| warning: FALSE
dt_Likert %>% 
  mutate(Question1 = recode_Likert(Question1),
         Question2 = recode_Likert(Question2),
         Question3 = recode_Likert(Question3),
         Question4 = recode_Likert(Question4),
         )
```
:::

::: {.column width="25%"}

[[*This is just an example with [mutate]{style="color:indianred;"}, but we can use our own function with many [dplr]{style="color:indianred;"} functions.*]{style="font-size: 25px"}]{.fragment}

:::
:::::

::: notes
we will see in the next session a even more concise way of doing this
:::


# Scope of variables

Objects created in a script are **global variables**, they can be accessed at any point of a session.

Objects created in a function are **local variables**.

## Scope of variables - Rule 1

[If a function uses a local object that was not created within the function, nor passed as an argument, we get an error:]{style="font-size: 30px"}

```{r, eval = FALSE}
my_func <- function() {
  print(obj)
}

my_func()
```

::: fragment
```{r, echo = FALSE}
my_func <- function() {
  print(obj)
}

try(my_func())
```
:::

[[But if the object is present in the global environment (global object), the function can access it (**Rule 1**):]{style="font-size: 30px"}]{.fragment}

::: fragment
```{r}
obj <- 3

my_func()
```
:::

::: notes
this is why I told you to remove test data before testing a function

otherwise, the function will work even if you forgot to add them as argument, but the function may not work next time
:::

## Scope of variables - Rule 2

[An object created within a function exists **only within the function** (if it it not returned as a result):]{style="font-size: 30px"}

```{r, , eval=FALSE}
my_random <- function(n) {
  random_vec <- runif(n)
}

random_vec
```

::: fragment
```{r, echo=FALSE}
my_random <- function(n) {
  random_vec <- runif(n)
}
try(random_vec)
```
:::

## Scope of variables - rule 3

A **local** object created within a function or passed as an argument has priority over a **global object**:

```{r}
f <- function() {
  obj <- 10
  obj
}

obj <- 3
f()
```

::: fragment
```{r}
f <- function(obj) {
  obj
}

obj <- 3
f(20)
```
:::


## Scope of variables - Rule 4

The consequence of rule 3 is that a function cannot modify a global object:

```{r}
f <- function() {
  obj <- 10
  message("Value of obj within the function: ", obj)
}

obj <- 3
f()
obj
```

<!-- TO DO --> 








et voir si j'ai besoin de revenir l√† dessus : https://juba.github.io/tidyverse/14-fonctions.html#les-fonctions-comme-objets


# Saving objects

[We have seen how to export data frames to CSV files, plot to image files. But in R, we can also save **objects** in a way that retains their internal structure and type.]{style="font-size: 30px"}

[In R, almost everything is an object (including vectors, lists, data frames, functions, models, and plots). This makes it possible to save and reload them exactly as they were.]{style="font-size: 30px"}

::: notes
so what we are going to see works with any type of object
:::

## Saving a single object

We can save a single object to a **.rds file** using the function [saveRDS]{style="color:indianred;"}:

```{r}
saveRDS(vec_name, # object
     file = "data/my_vec.rds")
```

::: fragment

A *.rds* can be open with [readRDS]{style="color:indianred;"}:

```{r}
readRDS("data/my_vec.rds")
```

:::

::: fragment

This only reads the object, so we would need to assign it to an object to load it into the environment.

The name of an object is **not preserved** when saved as *.rds*.

:::

## Saving one or several objects

We can save one or multiple objects into a single **.RData** file using the function [save]{style="color:indianred;"}:

Let's save some objects that we will use in the next session:

```{r}
save(dt_Likert, recode_Likert, #multiple objects
     file = "data/usefull_object.RData")
```

::: fragment

A *.Rdata* can be open with [load]{style="color:indianred;"}:

```{r, eval = FALSE}
load("data/usefull_object.RData")
```

:::

::: fragment

This loads **all** the objects contained in the file directly into the environment.

The name of the objects are **preserved**.

:::

## Saving the entire workspace

All the objects of a work session can be saved together as a **.RData file** using the function [save.image]{style="color:indianred;"}:

```{r, eval=FALSE}
save.image(file = "data/my_work_space.RData")
```

::: fragment

and restored with [load]{style="color:indianred;"}:

```{r, eval = FALSE}
load("data/my_work_space.RData")
```

:::

::: notes
this can be usefull to save time, but can cause problem of reproductability is the code is modified, so use it with care
:::



## Acknowledgments {.smaller}

::: {.nonincremental}

* Barnier J. *Introduction √† R et au tidyverse* [in French](https://juba.github.io/tidyverse/){preview-link="false"}

* *Introduction √† l‚Äôanalyse d‚Äôenqu√™tes avec R et RStudio* - Julien Barnier, Julien Biaudet, Fran√ßois Briatte, Milan Bouchet-Valat, Ewen Gallic, Fr√©d√©rique Giraud, Jo√´l Gombin, Mayeul Kauffmann, Christophe Lalanne, Joseph Larmarange, Nicolas Robette [in French](https://larmarange.github.io/analyse-R/){preview-link="false"} 

:::

## Ressources

::: {.nonincremental}

* Wickham H., Cetinkaya-Rundel M., Grolemund G. *R for Data Science*  - Chapter on functions [in English](https://r4ds.had.co.nz/functions.html) and [in Portuguese](https://pt.r4ds.hadley.nz/iteration.html){preview-link="false"}

* Wickham H. *Advanced R*  - Chapter on functions [in English](https://adv-r.hadley.nz/control-flow.html){preview-link="false"}

:::

::: notes
second one more advanced
:::
