---
title: "Data visualisation with ggplot"
author: GÃ©raldine Derroire
institute: Cirad - UnB
date: last-modified
format: 
  revealjs:
    theme: solarized
    output-location: fragment 
    slide-number: true
    preview-links: true
    chalkboard: true
    link-external-icon: true
    link-external-newwindow: true
    incremental: true
execute:
  echo: true   
  warning: true
  message: true 
editor: 
  markdown: 
    wrap: sentence
---


# Why make plots? {.smaller}

* Explore and check a dataset

    * What is the distribution of the variables?
    
    * Is there any outliers (unusual values)? Can they be errors in the dataset?

* Exploratory data analysis: look for patterns of covariation between the variables before doing any statistical tests 

    * Can we observe relationships between the variables?
    
    * Are there co-varying variables that can cause bias in the interpretation of the results?

* Communicate the results of data analysis

::: notes
* distribution: inform on the min, max, median and quantiles in a visual way

* data exploration important before doing any stats => check and understand the data

* communicate => we can present the results of a model rather or together with raw data

:::


# Using the package [ggplot2]{style="color:indianred;"} to make plots

## The package [ggplot2]{style="color:indianred;"} {.scrollable}

::::: columns
::: {.column width="80%"}

* [ggplot2]{style="color:indianred;"} is a package of the *tidyverse* allowing to make plots using a coherant synthax.

* [ggplot2]{style="color:indianred;"} requires data to be in a data frame, including a tibble.

* [ggplot2]{style="color:indianred;"} can be use in a pipe after manipulating data.

:::

::: {.column width="20%"}
![](ggplot2.png)
:::
:::::

[Let's load the [tidyverse]{style="color:indianred;"}, including [ggplot2]{style="color:indianred;"}:]{.fragment}

::: fragment
```{r}
library(tidyverse)
```
:::

::: notes
NO NEED for the data to be in a tibble (but they need to be in a tidy format (long format))
:::


## Let's work with tree data from the Nouragues forest

We are going to work with the data set *NouraguesHD* available in the package [BIOMASS]{style="color:indianred;"}.
Let's load them and transform them to a tibble.

```{r, message=FALSE}
library(BIOMASS)
data(NouraguesHD) # load the data
dt_HD <- as_tibble(NouraguesHD) # rename and transform to tibble
rm(NouraguesHD) # remove 
```

[We can look at the help to know more about these data:]{.fragment}

::: fragment
```{r, eval=FALSE}
?NouraguesHD
```
:::

::: notes
Nouragues in FG

Ignore the message (no message) (not useful for us)
:::

## Let's work with tree data from the Nouragues forest 

Let's transform these data:

```{r}
dt_HD <- dt_HD %>% 
  unite(full_name, genus, species, sep="_", remove = FALSE) %>% # add full name
  mutate(genus = as.factor(genus), # transform characters to factors
         species = as.factor(species),
         full_name = as.factor(full_name),
         plotId = as.factor(plotId)) %>% 
  select(- lat, - long) # remove the columns we don't need

str(dt_HD)
```

::: notes
These data are similar to the Karnataka data, but with the height added

D: diameter in cm
H: height in m
:::

# ggplot grammar

## Step 1: specify the data 

[The first step to make a plot with [ggplot2]{style="color:indianred;"} is to specify the data that we use.
For that, we use the function [ggplot]{style="color:indianred;"} and specify the data in the argument *data*.]{style="font-size: 30px"}

::::: columns
::: {.column width="80%"}

```{r}
#| out.width: 100%
ggplot(data=dt_HD)
```

:::

::: {.column width="20%"}

[[This creates an empty plot, as we didn't say how we want to visualise the data.]{.fragment}]{style="font-size: 30px"}

:::
:::::

## Step 2: specify the variables 

[We use the argument *mapping* to specify the variables to represent.]{style="font-size: 30px"}

[[We use the function [aes]{style="color:indianred;"}, meaning **aesthetics**, which are the visual properties of the plot.]{.fragment}]{style="font-size: 30px"}

::::: columns
::: {.column width="30%"}
[[We want to plot the D on the x-axis and the H on the y-axis.]{.fragment}]{style="font-size: 30px"}
:::

::: {.column width="70%"}

::: fragment
```{r}
#| out.width: 1000%
ggplot(data=dt_HD,
       mapping = aes(x = D, y = H))
```
:::

:::
:::::

## Step 3: specify how we want data to be represented

[We still need to define a **geom**: the geometrical object used to represent the data.]{style="font-size: 30px"}
[[For this, we use a function with a name starting by [geom_]{style="color:indianred;"}.]{.fragment}]{style="font-size: 30px"}

::::: columns
::: {.column width="30%"}
[[We want to represent data with points, we use [geom_point]{style="color:indianred;"} .]{.fragment}]{style="font-size: 30px"}
:::

::: {.column width="70%"}

::: fragment
```{r}
#| out.width: 90%
ggplot(data=dt_HD,
       mapping = aes(x = D, y = H)) +
  geom_point()
```
:::

:::
:::::

::: notes
We see a positive, monotone and non-linear relationship.

=> trees with a bigger diameter are taller.

We have a warning message, as there are 163 missing NA in H.

From now on, I will silent the message (but you will get it)
:::

## A more concise synthax

[We can simplify the synthax:]{style="font-size: 30px"}

::::: columns
::: {.column width="30%"}
* [data is the first argument]{style="font-size: 30px"}

* [mapping is the second]{style="font-size: 30px"}

[[We don't need to explicit them.]{style="font-size: 30px"}]{.fragment}
:::

::: {.column width="70%"}

::: fragment
```{r}
#| out.width: 100%
#| warning: false
ggplot(dt_HD,
       aes(x = D, y = H)) +
  geom_point()
```
:::

:::
:::::


## Adding aesthetics

[Let's differentiate the two plots (*parcelas*):]{style="font-size: 30px"}

::::: columns
::: {.column width="50%"}

[[using colour:]{style="font-size: 30px"}]{.fragment}

::: fragment
```{r}
#| out.width: 100%
#| warning: false
ggplot(dt_HD,
       aes(x = D, y = H,
       color = plotId)) +
  geom_point()
```
:::

:::


::: {.column width="50%"}

[[or using shape:]{style="font-size: 30px"}]{.fragment}

::: fragment
```{r}
#| out.width: 100%
#| warning: false
ggplot(dt_HD,
       aes(x = D, y = H,
       shape = plotId)) +
  geom_point(size = 3) # to increase the size of the points
```
:::

:::
:::::

[[*NB: we could also combine colour and shape.*]{style="font-size: 30px"}]{.fragment}

## Adding aesthetics

[We can also change the size of the points according to a continuous variable (here D): ]{style="font-size: 30px"}

```{r}
#| out.width: 60%
#| warning: false
ggplot(dt_HD,
       aes(x = D, y = H,
       color = plotId,
       size = D)) +
  geom_point() 
```
::: notes
Here there is no interest in doing this, as we already have the D on the x-axis...
:::

## Is it an aesthetic or not? {.smaller}

[The arguments *color*, *size*, *shape*, ..., can be used as arguments of the function [aes]{style="color:indianred;"} or not. But this does not do the same thing.]{style="font-size: 30px"}


::::: columns
::: {.column width="50%"}

::: fragment
```{r}
#| warning: false
ggplot(dt_HD,
       aes(x = D, y = H, 
           color = plotId)) +
  geom_point()
```
:::

[[When in *aes*, the colour depends on the values of a variable (categorical or numeric).]{style="font-size: 30px"}]{.fragment}

:::

::: {.column width="50%"}

::: fragment
```{r}
#| warning: false
ggplot(dt_HD,
       aes(x = D, y = H)) +
  geom_point(color="red")
```
:::

[[When not in *aes*, the colour is constant.]{style="font-size: 30px"}]{.fragment}

:::
:::::

::: notes
here the color depends on the plot (categorical) but it could depend on D (continuous)

when the color is constant, no added info, only to make the plot nicer
:::


## Adding layers

[We can add new layers to a plot using the [+]{style="color:indianred;"}]{style="font-size: 30px"}

::::: columns
::: {.column width="70%"}
```{r}
#| warning: false
ggplot(dt_HD,
       aes(x = D, y = H)) +
  geom_point() + 
  geom_smooth()
```
:::

::: {.column width="30%"}
[[[geom_smooth]{style="color:indianred;"} adds a trend line in the cloud of points.]{style="font-size: 30px"}]{.fragment}
:::
:::::


## Where to specify the aesthetics?

*NB: the place where you specify the aesthetics matters!*

::::: columns
::: {.column width="50%"}
```{r}
#| warning: false
ggplot(dt_HD,
       aes(x = D, y = H,
           color = plotId)) +
  geom_point() + 
  geom_smooth()
```

[[applied to all geometries]{style="font-size: 30px"}]{.fragment}

:::

::: {.column width="50%"}
::: fragment
```{r}
#| warning: false
ggplot(dt_HD,
       aes(x = D, y = H)) +
  geom_point(aes(color = plotId)) + 
  geom_smooth()
```
:::

[[applied only to geom_point]{style="font-size: 30px"}]{.fragment}

:::
:::::




# Visualising  the distribution of a single variable

::: notes
we are now going to see what type of plot to use for what
:::

## Distribution of a categorical variable -  barplot

[We have seen in a previous session that the distribution of a categorical variable can be visualised using a **barplot**.]{style="font-size: 30px"}
[[We use the geometry [geom_bar]{style="color:indianred;"}.]{style="font-size: 30px"}]{.fragment}

::: fragment
```{r}
#| warning: false
#| out.width: 70%
ggplot(dt_HD,
       aes(x = plotId)) +
  geom_bar()
```
:::

::: notes
Here roughly the same number of indiv in the two plots
:::


## Distribution of a numerical variable - histogram

[We have seen in a previous session that the distribution of a numerical (=quantitative) variable can be visualised using an **histogram**.]{style="font-size: 28px"}
[We use the geometry [geom_histogram]{style="color:indianred;"}.]{style="font-size: 28px"}


```{r}
#| warning: false
#| out.width: 75%
ggplot(dt_HD,
       aes(x = D)) +
  geom_histogram(binwidth = 5) # binwidth specify the size of intervals
```



## Distribution of a numerical variable - density plot


[We can also use a **density plot**, which is a smoothed-out version of an histogram.]{style="font-size: 28px"}
[We use the geometry [geom_density]{style="color:indianred;"}.]{style="font-size: 28px"}


```{r}
#| warning: false
#| out.width: 70%
ggplot(dt_HD,
       aes(x = D)) +
  geom_density(color = "red") 
```

::: notes
on y axis => density, so that the area under the entire curve equals 1
:::

# Visualising relationships between 2 variables or more

## Relationship between a categorical and a numerical variable - boxplot

::::: columns
::: {.column width="25%"}
[We want to see if the distribution of the diameter differs between the three genus *Dicorynia*, *Eperua* and *Inga*.]{style="font-size: 28px"}
[We use the geometry [geom_boxplot]{style="color:indianred;"}.]{style="font-size: 28px"}
:::

::: {.column width="75%"}
```{r}
#| warning: false
#| out.width: 100%
dt_HD %>% 
  filter(genus %in% c("Dicorynia", "Eperua", "Inga")) %>% 
  ggplot(aes(x = genus, y=D)) +
  geom_boxplot()
```
:::
:::::

[[ð¡Here we used a pipe to transform the data and feed them to ggplot.]{style="font-size: 28px"}]{.fragment}

::: notes
see how we integrated the ggplot command into a pipe (talk about difference between %>% and +)

What do we see? The Inga seems smaller than the two other genus (pioneer genus).
:::


## How do read a boxplot?

![](boxplot.png){width="90%"}

[Source: [*R for data science*](https://r4ds.hadley.nz/){preview-link="false"}]{style="font-size: 20px"}

::: notes
Box : IQR between 1st quartile (25th percentile) and the 3rd (75th percentile)

Outliers: points further than 1.5 times the IQR from the box

Whiskers: from the box to the last non-outlier point.

We can use boxplot for a single numerical variable
:::


## Relationship between a categorical and a numerical variable - density plot

::::: columns
::: {.column width="25%"}
[We can also do several density plots with the geometry [geom_density]{style="color:indianred;"}.]{style="font-size: 28px"}
:::

::: {.column width="75%"}
```{r}
#| warning: false
#| out.width: 100%
dt_HD %>% 
  filter(genus %in% c("Dicorynia", "Eperua", "Inga")) %>% 
  ggplot(aes(x = D, 
             color = genus)) +
  geom_density(linewidth = 1) # linewidth to change the width of the lines
```
:::
:::::

::: notes
Here again we see that the inga are smaller
:::

## Relationship between two categorical variables - stacked barplots

[We can see the relationship between two categorical variables using a stacked barplot.]{style="font-size: 28px"}
[We use the geometry [geom_bar]{style="color:indianred;"}.]{style="font-size: 28px"}

::::: columns
::: {.column width="25%"}
[Here we want to see the number of individuals of our three genus, in each plot (genus and plotId are two categorical variables).]{style="font-size: 28px"}
:::

::: {.column width="75%"}
```{r}
#| warning: false
#| out.width: 75%
dt_HD %>% 
  filter(genus %in% c("Dicorynia", "Eperua", "Inga")) %>% 
  ggplot(aes(x = genus, 
             fill = plotId)) +
  geom_bar()
```
:::
:::::

::: notes
Here Dicorinya only in plot 1, Eperua in plot 2 and Inga in both
:::

## Relationship between two categorical variables - stacked barplots

[If we use the argument [position = "fill"]{style="color:indianred;"}, the barplot represent the proportions and not the counts]{style="font-size: 28px"}

```{r}
#| warning: false
#| fig-width: 8
#| fig-height: 1.5
dt_HD %>% 
  filter(genus %in% c("Dicorynia", "Eperua", "Inga")) %>% 
  ggplot(aes(x = genus, 
             fill = plotId)) +
  geom_bar(position = "fill") + 
  coord_flip() + # flip the plot
 ylab("Proportion of the genus in each plot") # change the axis label
```


## Relationship between two categorical variables {.scrollable .smaller}

[We can also display the count per *genus* and per *plotId*:]{style="font-size: 28px"}

::::: columns
::: {.column width="50%"}
 
 * [using [geom_count]{style="color:indianred;"}]{style="font-size: 28px"}

::: fragment
```{r}
#| warning: false
#| fig-width: 4
#| fig-height: 6
dt_HD %>% 
  filter(genus %in% c("Licania", "Lecythis", "Inga", 
                      "Dicorynia", "Eperua")) %>% 
  ggplot(aes(x = plotId, y = genus)) +
  geom_count()
```
:::
:::


::: {.column width="50%"}

* [using [geom_tile]{style="color:indianred;"}]{style="font-size: 28px"}

::: fragment
```{r}
#| warning: false
#| fig-width: 4
#| fig-height: 6
dt_HD %>% 
  filter(genus %in% c("Licania", "Lecythis", "Inga", 
                      "Dicorynia", "Eperua")) %>% 
  count(genus, plotId) %>% # number of trees per genus and per plot
  ggplot(aes(x = plotId, y = genus)) +
  geom_tile(aes(fill = n))
```
:::
:::
:::::

::: notes
Let's do it for 5 species

NB: for geom_tile, we need to count them before
:::

## Relationship between two numerical variables {.scrollable}

[We already saw how to make scatterplots and add trend lines using [geom_point]{style="color:indianred;"} and [geom_smooth]{style="color:indianred;"}:]{style="font-size: 28px"}

```{r}
#| warning: false
#| out.width: 70%
ggplot(dt_HD,
       aes(x = D, y = H)) +
  geom_point(alpha = 0.2) + # alpha controls transparancy
  geom_smooth(method = "lm", color = "red") + # adds a linear trend line
  geom_smooth(method = "loess", color = "blue") # adds a loess trend line
```

::: notes
Here we put 2 trend lines 
:::

## Relationship between two numerical variables

[When there are too many points to see them well, we can use [geom_bin2d]{style="color:indianred;"} to discretise the two variables and count the number of observations in each bin.]{style="font-size: 28px"}

```{r}
#| warning: false
#| out.width: 70%
ggplot(dt_HD,
       aes(x = D, y = H)) +
  geom_bin2d()
```

## Relationship between two numerical variables

[We can also use [geom_density2d]{style="color:indianred;"} to add contour lines to show were the points are the more numerous.]{style="font-size: 28px"}

```{r}
#| warning: false
#| out.width: 70%
ggplot(dt_HD,
       aes(x = D, y = H)) +
  geom_point(alpha = 0.2) + 
  geom_density2d(color = "red")
```

## Relationship between several variables

[We already saw how to use the aesthetics [shape]{style="color:indianred;"}, [color]{style="color:indianred;"}, [size]{style="color:indianred;"} to add categorical and/or numerical variables.]{style="font-size: 28px"}

```{r}
#| warning: false
#| out.width: 65%
dt_HD %>% 
  filter(genus %in% c("Dicorynia", "Licania", "Inga")) %>%
  ggplot(aes(x = D, y = H)) +
  geom_point(aes(color = genus, shape = plotId)) 
```


::: notes
We could have put the aes color and shape in the aes of ggplot

color can be categorical or numerical (gradient of colors)
:::


## Relationship between several variables

[We can also split the plot into **facets** using [facet_wrap]{style="color:indianred;"}:]{style="font-size: 28px"}

```{r}
#| warning: false
#| fig-width: 12
#| fig-height: 4
dt_HD %>% 
  filter(genus %in% c("Dicorynia", "Licania", "Inga")) %>%
  ggplot(aes(x = D, y = H)) +
  geom_point(aes(color = plotId)) +
  facet_wrap(~genus) # one facet per genus
```


## Relationship between several variables

[[facet_grid]{style="color:indianred;"} allows to create **facets** using two categorical variables:]{style="font-size: 28px"}

```{r}
#| warning: false
#| out.width: 65%
dt_HD %>% 
  filter(genus %in% c("Dicorynia", "Licania", "Inga")) %>%
  ggplot(aes(x = D, y = H)) +
  geom_point() +
  facet_grid(plotId ~ genus) # one facet per plotId and per genus
```

## Summary on how to choose a type of plot

![](choose_graph.png)

<!-- TO DO -->

# Improving the visual appearance of plots

::: notes
so far we have seen how to quickly make plots to explore and visualise our data
But to communicate with others, we want to make plots explicit and pretty
:::

## {.smaller}

[Let's go back to a plot we already made, put it in an object, and start to improve the visual appearance:]{style="font-size: 28px"}


```{r}
#| warning: false
#| out.width: 80%
dt_sub <- dt_HD %>% 
  filter(genus %in% c("Dicorynia", "Licania", "Inga"))

plot1 <-  ggplot(dt_sub, aes(x = D, y = H, color = genus)) +
  geom_point() +
  geom_smooth(method = "loess", se = FALSE) # se = FALSE to not display the confidence interval
plot1
```

::: notes
first we filter the data, then make the plot

this is a basic plot, we are going to tweek it little by little to make it pretty
:::


## Labels {.smaller}

::::: columns
::: {.column width="20%"}
[Let's start by changing the labels to make them more explicit, using the [labs]{style="color:indianred;"} function:]{style="font-size: 28px"}
:::

::: {.column width="80%"}
```{r}
#| warning: false
#| out.width: 100%
plot1 <- plot1 + 
  labs(
    x = "Diameter at Breast Height (cm)", # x axis
    y = "Height (m)", # y axis
    color = "Genus", # legend of the aes color
    title = "Diameter - Height relationship",
    subtitle = "Nouragues - French Guiana",
    caption = "Source: RÃ©jou-MÃ©chain, M. et al. (2015)"
  )
plot1  
```
:::
:::::

::: notes
note how we add things on the plot by adding + to an existing plot

of course we don't necessarly need to have a title, a subtitle and a caption
:::

<!--
## Annotations


TO REMOVE ?

```{r}
annot <- dt_sub %>% 
  group_by(genus) %>% 
  arrange(desc(D)) %>% 
  slice_head(n = 1)
```

-->

## Scales

To change the visual appearance of the aesthetics, we can use the [scale]{style="color:indianred;"} functions.

There are several scale functions, all with a name that specify the aesthetic and the type of variable they consider (*e.g.* continuous or discrete):

* [scale_x_continuous]{style="color:indianred;"} relates to the aesthetic [x]{style="color:indianred;"} which is continuous (in our case *D*)

* [scale_color_discrete]{style="color:indianred;"} relates to the aesthetic [color]{style="color:indianred;"} which is discrete (in our case *genus*)

::: notes
these are just examples of scale functions
:::

## Scales - Axis ticks 

::::: columns
::: {.column width="20%"}
[To change the position of the axis ticks (axis graduation), we use the argument [breaks]{style="color:indianred;"}]{style="font-size: 28px"}
:::

::: {.column width="80%"}
```{r}
#| warning: false
#| out.width: 100%
plot1 <- plot1 + 
  scale_x_continuous(breaks = seq(10, # x-axis ticks from 10
                                  max(dt_sub$D), # to the max. value of D
                                  by = 10)) # every 10 cm
plot1
```
:::
:::::

## Scales - Labels

::::: columns
::: {.column width="20%"}
[We could also change the keys of the legend using the argument [labels]{style="color:indianred;"}]{style="font-size: 28px"}
:::

::: {.column width="80%"}
```{r}
#| warning: false
#| out.width: 100%
plot1 + 
  scale_color_discrete(labels = c(
    "Dicorynia" = "Genus Dicorynia",
    "Inga" = "Genus Inga",
    "Licania" = "Genus Licania"))
```
:::
:::::

::: notes
Not really a good idea in our case

Let's not change plot1 (see no <-)
:::

## Replacing a color scale

::::: columns
::: {.column width="23%"}
[We can change the color palette manually with  [scale_color_manual]{style="color:indianred;"}]{style="font-size: 28px"}

[See [here](https://sites.stat.columbia.edu/tzheng/files/Rcolor.pdf){preview-link="false"} for all available colours]{style="font-size: 20px"}
:::

::: {.column width="77%"}
```{r}
#| warning: false
#| out.width: 100%
plot1 <- plot1 + 
  scale_color_manual(
    values = c("Dicorynia" = "green",
               "Inga" = "blue",
               "Licania" = "orange"))
plot1
```
:::
:::::


## Replacing a color scale

::::: columns
::: {.column width="23%"}
[We can alternatively use a predefined palette with [scale_color_brewer]{style="color:indianred;"}]{style="font-size: 28px"}


:::

::: {.column width="77%"}
```{r}
#| warning: false
#| out.width: 100%
plot1 <- plot1 + 
  scale_color_brewer(palette = "Dark2")
plot1
```
:::
:::::

[Use [RColorBrewer::display.brewer.all()]{style="color:indianred;"} for all available palettes]{style="font-size: 20px"}

::: notes
You can also create your own palette => usefull for consistency between plots in a publication, or when color have a meaning
:::

## Replacing a color scale {.smaller}

[We can also replace continuous colour scales (here on a quite artificial example...):]{style="font-size: 28px"}

::::: columns
::: {.column width="30%"}

[Default plot]{style="font-size: 28px"}

```{r}
#| warning: false
ggplot(dt_HD,
       aes(x = D, y = H,
       color = H)) +
  geom_point() 
```
:::

::: {.column width="40%"}

[[Setting the scale manually]{style="font-size: 28px"}]{.fragment}

::: fragment
```{r}
#| warning: false
#| out.width: 80%
ggplot(dt_HD,
       aes(x = D, y = H,
       color = H)) +
  geom_point() + 
  scale_color_gradient(low = "yellow",
                       high = "red")
```
:::
:::

::: {.column width="30%"}

[[Using a predefined viridis colour scales ]{style="font-size: 28px"}]{.fragment}

::: fragment
```{r}
#| warning: false
#| #| out.width: 80%
ggplot(dt_HD,
       aes(x = D, y = H,
       color = H)) +
  geom_point() + 
  scale_color_viridis_c()
```
:::
:::
:::::

::: notes
A bit stupid to do it when we already have an axis for the H

viridis => carrefully designed colour scale adapated to color-blindness
:::



## Themes 

[Themes are used to control all the **non-data parts** of the plot.]{style="font-size: 28px"}
[[We can use some predefined themes:]{style="font-size: 28px"}]{.fragment}

::: fragment
```{r}
#| warning: false
#| out.width: 70%
plot1 <- plot1 + 
  theme_bw()
plot1
```
:::

## Themes

::::: columns
::: {.column width="30%"}

[Predefined ggplot2 themes:]{style="font-size: 28px"}



[Source: [*R for data science*](https://r4ds.hadley.nz/){preview-link="false"}]{style="font-size: 20px"}
:::


::: {.column width="70%"}
![](theme.png){width="70%"}
:::
:::::


## Themes {.smaller}

[We can also control the theme elements individually.]{style="font-size: 28px"}

::::: columns
::: {.column width="70%"}

```{r}
#| warning: false
#| out.width: 100%
plot_ugly <-plot1 + theme(
  plot.background = element_rect(fill = "lightgrey", colour = "red"),
  plot.title = element_text(colour = "darkgreen", face = "bold"),
  axis.line = element_line(colour = "blue"),
  axis.title = element_text(size = 15),
  panel.grid.major = element_line(color = "orange"),
  panel.background = element_rect(fill = "lightblue")
)
plot_ugly
```
:::

::: {.column width="30%"}
[[See [here](https://ggplot2-book.org/themes.html#modifying-theme-components){preview-link="false"} to know more about the 40 unique elements that can be controlled.]{style="font-size: 28px"}]{.fragment}
:::
:::::

## Themes 

[Themes are also used to control the legend layout:]{style="font-size: 28px"}

```{r}
#| warning: false
#| out.width: 80%
plot1 + 
  theme(legend.position = "bottom") +
  guides(color = guide_legend(nrow = 2))
```


## Assembling plots with patchwork

::::: columns

::: {.column width="20%"}
[Patchwork is a very usefull package to assemble plots easily.]{style="font-size: 28px"}

![](patchwork.png)

[[To know more](https://patchwork.data-imaginist.com/){preview-link="false"}]{style="font-size: 20px"} 
:::

::: {.column width="80%"}

::: fragment
```{r, message=FALSE}
#| warning: false
library(patchwork)
plot1 + plot_ugly
```
:::

:::
:::::

::: notes
we don't go further here with patchwork, but I encourage you to use it (before patchwork, it was quite complicated to assemble plots...)

the vignette is very good
:::

# Saving plots

To save a plot, we use the function [ggsave]{style="color:indianred;"}:

```{r, eval=FALSE}
ggsave(filename = "outputs/my_plot.png")
```

[By default, it saves the last plot that was displayed, with the dimensions at which it was displayed.]{.fragment}

[We can specify the extension either in the filename, or with the argument *device*.]{.fragment}

::: notes
in practice, easier to put the extension in the filename
:::

# Saving plots

We can also specify the plot we want to save, and the dimensions:

```{r}
ggsave(plot = plot1,
       filename = "outputs/plot1.pdf",
       width = 20,
       height = 12,
       units = "cm")
```


# Acknowledgments

::: {.nonincremental}

* Wickham H., Cetinkaya-Rundel M., Grolemund G. *R for Data Science* [in English](https://r4ds.hadley.nz/datetimes.html){preview-link="false"} and [in Portuguese](https://pt.r4ds.hadley.nz/){preview-link="false"}

* Barnier J. *Introduction Ã  R et au tidyverse* [in French](https://juba.github.io/tidyverse/){preview-link="false"}

* Wickham H., Navarro D., Pederson T.L. *ggplot2: Elegant graphics for data analysis* [here](https://ggplot2-book.org){preview-link="false"}

:::

# Ressources

::: {.nonincremental}

* Wickham H., Cetinkaya-Rundel M., Grolemund G. *R for Data Science* [in English](https://r4ds.hadley.nz/datetimes.html){preview-link="false"} and [in Portuguese](https://pt.r4ds.hadley.nz/){preview-link="false"}

* Chang W. *R graphics cookbook* [here](https://r-graphics.org){preview-link="false"}

* Wickham H., Navarro D., Pederson T.L. *ggplot2: Elegant graphics for data analysis* [here](https://ggplot2-book.org){preview-link="false"}

* Documentation of [ggplot2](https://ggplot2.tidyverse.org/index.html){preview-link="false"}

* ggplot2 [cheatsheet](https://rstudio.github.io/cheatsheets/html/data-visualization.html?_gl=1*1orn8sn*_ga*OTcyNTAyMDE1LjE3NDA1OTQwOTI.*_ga_2C0WZ1JHG0*MTc0NTMzMzE4OC4xMy4wLjE3NDUzMzMxODguMC4wLjA.){preview-link="false"}

:::

::: notes
this is obviously just an intro to ggplot => see these resources and the help of the geom_function, to discover more possibilities
:::

# Ressources to go further

::: {.nonincremental}

[Top 50 ggplot2 Visualizations](https://r-statistics.co/Top50-Ggplot2-Visualizations-MasterList-R-Code.html#google_vignette){preview-link="false"}

[R graph gallery](https://r-graph-gallery.com/){preview-link="false"}

:::


