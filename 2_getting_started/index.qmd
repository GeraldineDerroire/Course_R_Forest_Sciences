---
title: "Getting started with R"
author: Géraldine Derroire
institute: Cirad - UnB
date: last-modified
format: 
  revealjs:
    theme: solarized
    output-location: fragment 
    slide-number: true
    preview-links: true
    chalkboard: true
    link-external-icon: true
    link-external-newwindow: true
    incremental: true
execute:
  echo: true   
  warning: true
  message: true 
editor: 
  markdown: 
    wrap: sentence
---

# R and RStudio

## Let's open R

![](R_logo.png){width="10%"}

![](open_R.png){width="50%"}

::: notes
-   make sure to open the right one
-   Talk about the meaning of free
-   Talk about the fact that it is collaborative and about the no warranty
-   =\> packages (collection of tools come with different level of quality)
-   =\> as for everything, be critical of what you use. But most packages are highly tested and reliable.
:::

## What is R?

-   R is a **programming language** for processing and analysing quantitative data.
    It is derived from the programming language S.

-   R is free and **Open Source**: it is can be used, modified and distributed freely.

-   R is **collaborative**: it is developed by its users.

-   R is **multi-plateform**: it works on Windows, Linux and Mac.

## What does R do?

R allows to:

-   manipulate data

-   draw graphs

-   perform statistical analyses

-   and many other things...

![](ex_graph_R.png){width="80%"}

::: notes
Other things: text mining, GIS...
:::

<!-- we are not going to work in R but in RStudio => close R -->

## Why use R?

-   It has many functionnalities that are constantly evolving, thanks to its community of users.

-   It is widely used by the scientific community.

-   A lot of help is available, in many languages.

## Is it difficult?

![](R_learning_curve.png){width="120%"}

::: notes
discuss a bit with people who laready use R

=\> what do they find particularly difficult?
easy?
:::

## Let's open RStudio

![](RStudio_logo.png){width="15%"}

![](RStudio_screen.png){width="65%"}

=\> RStudio opens R.

::: notes
We are not going to work directly in R but in RStudio, for reason that you will discover in the coming hours, and days.
=\> Let's close R and open RStudio.

make sure we use the rigth one (see logo)

We find the same text than when we open R directly =\> RStudio opens R.
:::

## What is RStudio?

RStudio is an *Integrated Development Environment* (IDE): a software that provides many facilities to help programming with R.

![](engine_dashboard.png)

::: notes
RStudio is also free and open source.

So R is the engine, RStudio is the dashboard
:::

## The console and the prompt

![](console_prompt.png)

The prompt is indicating that R is waiting for our instruction.

::: notes
We are going to see little by little what are the different windows of RStudio.
Let's start with the console.
:::

## Let's try some basic commands!

Write an operation in the console and click *Enter*.

```{r}
2 + 3
```

::: notes
\[1\] indicates that the answer is the first element of the line.
:::

## Let's try some basic commands!

```{r}
5 + 9
```

::: fragment
```{r}
8 - 2 
```
:::

::: fragment
```{r}
-2 * 4 
```
:::

::: fragment
```{r}
8 / 3
```
:::

::: fragment
```{r}
4^2
```
:::

::: notes
So here we have seen the 4 four operations

and the power
:::

## Spaces are not important.

```{r}
1+2
1 + 2
1    +     2
```

## Command history

The previous commands are visible in the command history.

![](command_history.png){width="60%"}

You can run them again by double-clicking on them or clicking on *To Console*.
But in practice, we will not use this much...

You can also use the ⬆️ or ⬇️ keys of the keyboard to navigate the command history in the console.

## Let's try some more commands...

```{r}
#| warning: true
log(-1)
```

[*NAN* means "not a number".]{.fragment}

::: notes
BEFORE CLICKING: what do you think?

=\> importance to understand the output (but also warning and error) that we get
:::

## Let's try some more commands...

```{r, eval=FALSE}
4 * 
```

[This is an unfinished command. We can finish after the +. ![](unfinished.png){width="30%"}]{.fragment}

[Or press *Esc* to terminate the command line.]{.fragment}

## Let's try some more commands...

```{r, eval=FALSE}
2 * x 
```

[We get an error message. Why?]{.fragment}

[R doesn't know what is *x*.]{.fragment}

::: notes
Error: object 'x' not found
:::

# Objects

## Basic objects

Let's put something in x

```{r}
x <- 5
```

[*x* is an **object**. We assign it the value of 5, using the assignment operator **\<-**]{.fragment}

[⚠️ The content of *x* is not printed. But we can see it by typing its name in the console.]{.fragment}

::: fragment
```{r}
x
```
:::

[And we can use it in other commands.]{.fragment}

::: fragment
```{r}
2 * x
```
:::

## Where are the objects stored?

Objects are store in the environment

![](enviro.png){width="100%"}

[⚠️ They are kept in memory throughout the session but are **not saved** when RStudio is closed.]{.fragment}

::: notes
we will see later how to save our work
:::

## Where are the objects stored?

You can see the content of the environment with the function *ls*

::: fragment
```{r}
ls()
```
:::

[You can remove an object from the environment using the function *rm*]{.fragment}

::: fragment
```{r}
rm(x)
ls()
```
:::

[⚠️ Typing *rm()* or using the 🧹symbol in the *environment* windows clears all the environment!]{.fragment}

## Assigning a new value to an existing object

```{r}
x <- 3
x 
```

::: fragment
```{r}
x <- 9
x
```
:::

[Assigning a new value to an object replaces the previous value (as you can see in the environment). ⚠️ Don't give the same name to several objects!]{.fragment}

## Objects are not linked

```{r}
x
y <- x
y
```

::: fragment
```{r}
x <- 25
y
```
:::

[Modifying *x* does not modify *y*.]{.fragment}

## Creating more objects

```{r}
result <- 3 * x
```

[The new object *result* is stored in the environment. It is not printed.]{.fragment}

::: fragment
```{r}
result2 <- 4 * x
```
:::

::: fragment
```{r}
result3 <- 25 * x
```
:::

[We can name objects the way we want but...🤔]{.fragment}

[... calling them *result*, *result2*, *result3* is not explicit enought!]{.fragment}

::: notes
What's wrong with the way we call them here?
This way of naming objects is not going to be usefull...
:::

## Naming an object

Some good practices when naming an object:

-   Use explicit names while trying to keep names short
-   Object names can contain letter, numbers, the symbols [.]{style="color:indianred;"}, [-]{style="color:indianred;"} and [\_]{style="color:indianred;"}
-   Object names cannot start with a number

::: fragment
```{r, eval=FALSE}
2x <- 3
```
:::

[🤔 What does the error message mean?]{.fragment}

::: notes
Let's try

-   Error: unexpected symbol in "2x"
:::

## Naming an object

Some good practices when naming an object:

-   Object names cannot contain a space

::: fragment
```{r, eval=FALSE}
x 3 <- 2
x y <- 3
```
:::

[🤔 What do the error messages mean?]{.fragment}

-   [Avoid accents (for encoding problems)]{.fragment}

::: notes
Let's try

Error: unexpected numeric constant in "x 3"

Error: unexpected symbol in "x y"

Important to try to understand the error messages
:::

## Naming an object

Some good practices when naming an object:

-   [The case matters (upper and lower cases are not the same)]{.fragment}

::: fragment
```{r}
z <- 5
Z <- 8
z
Z
```
:::

## Naming an object

Adopt a consistent naming style

![](name_style.png)

::: notes
Easier to remember when consistent object names

Most used are snake_case and camelCase or UpperCamel
:::

## Objects are not necessarly numbers

What if we write some text in an object?

```{r}
y <- "Ola!"
y
```

[🤔 Why do we need the " " ?]{.fragment}

::: fragment
```{r, eval=FALSE}
y <- Ola!
```
:::

[🤔 What does the error message mean?]{.fragment}

## Mode of an object

Object can have different types.

The type of an object is called the *mode*.

We can use the function *mode* to check what is the mode of an object:

::: fragment
```{r}
x
```
:::

::: fragment
```{r}
mode(x)
```
:::

::: fragment
```{r}
y
```
:::

::: fragment
```{r}
mode(y)
```
:::

## Mode of an object

Here are the main modes you will use:

```{r, echo=FALSE}
mod <- data.frame(Mode = c("numeric", "character", "logical"),
                  What = c("real number", "character string", "bolean (true/false)"),
                  Example = c("2.3", " \"hello\" ", "true"))
knitr::kable(mod)
```

::: notes
But other exists: complex, raw, expression, function, list...
:::

## Mode of an object

🤔 What is a boolean?

::: fragment
```{r}
test <- 2 == 3
test
```
:::

::: fragment
```{r}
mode(test)
```
:::

::: notes
we use == otherwise it is an assigment as is the \<-
:::

## Numeric

Object of mode *numeric* can be:

-   double: for any real number

::: fragment
```{r}
x <- 1.5
mode(x)
typeof(x)
```
:::

-   integer

::: fragment
```{r}
x <- 1L
mode(x)
typeof(x)
```
:::

::: notes
The L is to specify that we want it to be integer
:::

## Numeric

What happens if we try to put a decimal number as a numeric?

```{r}
#| warning: true
x <- 1.5L
```

[We get a *warning* message. What does it mean?]{.fragment}

::: fragment
```{r}
typeof(x)
```
:::

::: notes
Warning message:

integer literal 1.5L contains decimal; using numeric value
:::

## Check the type of an object

```{r}
x <- 1
is.numeric(x)
```

::: fragment
```{r}
is.integer(x)
```
:::

[🤔 Why?]{.fragment}

::: fragment
```{r}
x <- 1L
is.numeric(x)
```
:::

::: fragment
```{r}
is.integer(x)
```
:::

::: notes
if we don't specify that 1 is an integer =\> double by default
:::

## Change the type of an object

We can change the type of an object.

::: fragment
```{r}
x <- 1
is.integer(x)
```
:::

::: fragment
```{r}
x <- as.integer(x)
is.integer(x)
```
:::

## Check and change the type of an object

See also

::: nonincremental
-   *is.numeric* and *as.numeric*

-   *is.integer* and *as.integer*

-   *is.double* and *as.double*

-   *is.character* and *as.character*

-   *is.logical* and *as.logical*

-   ...
:::

## Let's play a bit!

🤔

::: fragment
```{r}
is.character(TRUE)
```
:::

::: fragment
```{r}
mode(TRUE)
```
:::

::: fragment
```{r}
is.character("TRUE")
```
:::

## All good?

You've done your first steps with R!

Parabéns 🎉

![](courage.png){fig-align="center"}

::: notes
End of the first session If still a lot of time =\> questions?

=\> start the next session until R files (slide 52)
:::

# R scripts

Before going further with our exploration of R, let's get organised!

## 

🤔 Where are the object stored ?
and the commands ?

What happens when we close and restart a R session?

[**We need need to save our work!**]{.fragment}

::: notes
For this we are going to use a script
:::

## Script

What is a script?

A script is a text file in which can can write and organise all the commands of a workflow.

This is the core of our work.

Saving all the commands in a script is what makes our work **reproductible**.

```{=html}
<!--Here section 2.4 juba

26 Mélaine-->
```

## Let's create a new script

In RStudio, click on *File \> New file \> R script*

![](new_script){width="100%"}

This opens a new pane in RStudio, this is the text editor where we can write the script.

## Adding a command in a script and running it

Let's write a command in the script.

To run it, select it and click on *Run*.

![](run_command){width="100%"}

💡 You can also use the keyboard shortcut ***Ctrl + Enter***.

You can select only one command or a group of commands.

## Commenting a script

It is very important to **document** your script by commenting it.
Remember?

![](not_repro.png)

[Comment your code **abundantly**! Choose the language well.]{.fragment}

## Commenting a script

To comment a script use one or several [\#]{style="color:indianred;"}.

R will ignore everything that comes after, until the end of the line.

![](comments.png){width="120%"}

You can comment before or at the end of a line.

## Organising a script

::::: columns
::: {.column width="40%"}
A script should include:

-   a header: title, date, author

-   a description of what the script does
:::

::: {.column width="60%"}
![](script_orga.png)
:::
:::::

-   an outline

-   several sections (blocks of code)

[💡 Use blank lines and indents to organise your script]{.fragment}

## Blocks of code

Adding [\####]{style="color:indianred;"} (4 or more) or several [----]{style="color:indianred;"}at the end of a line, create a block of code.

![](script_block.png)

You can fold/unfold a block of code by clicking on the grey arrow.

And you can see an overview of the script by clicking on *Outline*.

## Colours in a script

Colours in a R script help you distinguish comments, numeric values, character strings, functions...

![](script_color.png){width="80%"}

💡 You can change the color theme in *Tools \> Global options \> Appearance*.

## Save and open a script

When there are unsaved changes in a script, it appears in blue

![](unsaved_script.png){width="80%"}

[To save a script, go to *File \> Save* or *File \> Save As...*. 💡 You can also use the shortcut *Ctrl + S* or click on 💾.]{.fragment}

[To open an existing script, go *File \> Open file...*.💡 You can also use the short cut *Ctrl + O* or click on 📂.]{.fragment}

## R file

The script is saved as an *.R* file:

*.R* files are recognised as R script by RStudio, which allows using the syntax colour code, and running the code directly.

::: notes
stopped here at the end of session *Getting started 1/3*
:::

# Questions on the last session?

::: notes
Start of the second session Have them all come closer so they can write directly on my computer Have a question for each of them
:::

## Let's see if all is clear

<!-- for next year : put this in an exercice doc to do for the next session-->

What is the difference between R and RStudio?

::: fragment
Write the command for the following operations:

4 multiplied by -2
:::

::: fragment
$5^2$
:::

::: fragment
6 divided by 3
:::

::: fragment
Logarithm of 6
:::

::: fragment
5 squared
:::

## Let's see if all is clear

Create an object call *dimension* and assing it the value of 2.5

::: fragment
Calculate the area of a square with sides = *dimension* and store the result in *area*
:::

::: fragment
What are the good practices when naming an object?
:::

::: fragment
Create a object containing a character string
:::

::: fragment
What are the three most used modes for basic objects
:::

::: fragment
Test if *dimension* is smaller than *area* and store the result in an object called *test*
:::

## Let's see if all is clear

Create a object containing the value of 33 and transform it to a character string

::: fragment
Create an object containing an integer value
:::

::: fragment
Check if the object *area* is an numeric
:::

::: fragment
Check if the object *area* and an integer and store the result in another object
:::

::: fragment
Create a new script and write its title
:::

::: fragment
How to save a script?
:::

# Working with RStudio

## Working directory

The working directory is where R works.

This is where R looks for when you want to open or save a file.

[To know where is the working directory:]{.fragment}

::: fragment
```{r}
getwd()
```
:::

[This gives the absolute path to the work directory]{.fragment}

[You can change the working directory using the function *setwd()* to organise your work in a same folder.]{.fragment}

::: fragment
```{r, eval=FALSE}
setwd("D:/some_other_folder")
```
:::

::: notes
Where did you save your script?

But we will see in 5 min that there is a better way of doing this.
:::

## Problems with absolute path

-   If you move your folder, the path will no longer work.

-   If you give your script to someone else, they will have to manually change the path to use your script.

-   If you are messy...

::: fragment
![](messy.png){width="50%"}
:::

## RStudio project

We will use **RStudio projects** to organise the workflow and gather all the files related to a same workflow in a same place.

A **RStudio project** is a folder on your computer where all the files of the project are grouped.

[By default, the working directory of a project is this folder where you put the RStudio project. So no more problems with absolute path 😊!]{.fragment}

[To share a project, just share the full folder.]{.fragment}

## RStudio project

To create a new RStudio project, go to *File \> New project...*

![](new_project.png)

You can either start a new directory or associate an existing one, if you already have one.

::: notes
See the 3rd possibility Version control =\> we will go back to it when we will talk about git
:::

## RStudio project

RStudio creates a *.Rproj* file that contains information about your project (you won't need to open it).

![](Rproj.png){width="100%"}

## RStudio project

You can see the name of the project, and switch from one project to another in the upper right corner.

You can see the path to the project folder at the top of the Console.
This is the working directory (try getwd to check this).

![](project.png){width="100%"}

## RStudio project

When you create a new script, RStudio save it by default in the project folder.

You can view the content of the project folder in the **file** pane.

![](file_pane.png){width="100%"}

## RStudio project

From now on, we will always work with RStudio project.

Find a good balance between putting too many things into a same project, and having too many little projects.

[*Eg: Don't have all the analyses of your PhD in a single project, but don't split the steps of a given chapter into several projects.*]{.fragment}

[**A research objective = a chapter/paper = a RStudio project**]{.fragment}

<!--[Let's create a RStudio project for the course.]{.fragment}-->

::: notes
Give time for them to create a project.
:::

## Organising a RStudio project

To facilitate the work with others (including the **future you**):

-   Organise your projects a clear and consistant way

-   Separate data, methods and outputs

-   Document your project in a README file

![](repro_kitchen.png)

## Organise a workflow into several scripts

Avoid very long script

=\> Split the workflow into (relatively) short and logical steps and make a script for each

![](split_scripts.png){width="20%"}

[💡 Give an explicit name to the scripts and start with a number so that they are ordered in logical way.]{.fragment}

::: notes
This is just an example
:::

## Executing a script from another one

We can run a full script by calling it from another script.

[For instance, in a script called *analyses.R*, we can run a script called *data_preparation.R* by running the following command in the *analyses.R* script:]{.fragment}

::: fragment
```{r, eval=FALSE}
source("data_preparation.R") 
```
:::

[❗ We need to indicate the path into the working directory here. So if *data_preparation.R* is in the *analyses* folder, we need to write:]{.fragment}

::: fragment
```{r, eval=FALSE}
source("analyses/data_preparation.R") 
```
:::

## Example of project organisation

::::: columns
::: {.column width="70%"}
-   *.Rproj* file at the root of the project folder
-   *data* contains raw data and derived data in separate folders
-   *analyses*: contains the script organised in a logical way
-   *R*: contains the functions
-   *outputs*: contains figures, reports, etc...
-   *README*: description of the project
:::

::: {.column width="30%"}
![](directory.png)
:::
:::::

## README file

*Example of a basic README*

![](README.png)

❗ We will see what is a *.md* file later, for the moment, you can write the README file as a *.txt*

# All good?

Do you understand the interest of working with RStudio now?

# Some more objects

## Objects we have seen so far

-   numeric

::: fragment
```{r}
mode(5.3)
```
:::

-   character

::: fragment
```{r}
mode("Hello!")
```
:::

-   logical

::: fragment
```{r}
mode(TRUE)
```
:::

## 

Let's imagine that we have several logs (of wood) for which we know the volume.
To calculate the mean volume of a log, we can do:

```{r}
# Volumes in m3
vol1 <- 2.9
vol2 <- 3.2
vol3 <- 2.4
vol4 <- 3.5
(vol1 + vol2 + vol3 + vol4) /4
```

[🤨 This is clearly not very practical...]{.fragment}

::: notes
For those who know R, how can we do better?
:::

## Vectors

Instead, we use *c()* to create an object called a **vector** containing several values:

::: fragment
```{r}
vol <- c(2.9, 3.2, 2.4, 3.5)
vol
```
:::

[Or we can also write]{.fragment}

::: fragment
```{r}
vol <- c(vol1, vol2, vol3, vol4)
vol
```
:::

[*NB*: the values need to be separated by ]{.fragment}[ ,]{style="color:indianred;"}

## Vectors

A vector can contain several values of any mode...

```{r}
test <- c(TRUE, FALSE, TRUE, TRUE)
mode(test)
```

[...but these values need to be **of the same mode**]{.fragment}

::: fragment
```{r}
test2 <- c(2.3, "blue", TRUE)
mode(test2)
```
:::

[🤔 What happened?]{.fragment}

[R converted all the values into character (the more flexible mode).]{.fragment}

## Vectors

We can check that *vol* is a vector:

```{r}
is.vector(vol)
```

[To see the length of a vector, we can use the function *length*:]{.fragment}

::: fragment
```{r}
length(vol)
```
:::

## Vectors

We can see the structure of *vol*, using the function [ str]{style="color:indianred;"}.

::: fragment
```{r}
str(vol)
```
:::

[*num* tells us that the vector contains numerical values.]{.fragment}

[*\[1:4\]* gives the length of the vector.]{.fragment}

[The first values of the vector are displayed.]{.fragment}

::: fragment
```{r}
str(test2)
```
:::

::: notes
the function str is very useful, try to use it often to be sure of the structure of your object
:::

## Vectors

*NB*: an object of length one is also a vector.

::: fragment
```{r}
length(vol1)
is.vector(vol1)
```
:::

## Vectors

We can access a value within a vector using \[\].
This is called the **indexation**:

```{r}
vol[2]
```

[This is the second value of the vector *vol*.]{.fragment}

[💡 the numbers within \[\] that we see when we print a vector indicates the position of the first element of a line. Let's see an exemple with a long vector:]{.fragment}

::: fragment
```{r, echo=FALSE}
long <- round(runif(25, min=0, max=3000),2)
long
```
:::

::: notes
I don't show how I created the vector for now, as a bit too advanced
:::

## Named vectors

We can add names to the elements of a vector:

```{r}
names(vol) <- c("Tree1", "Tree2", "Tree3", "Tree4")
vol
```

[💡 The names are stored in an object that is also a vector:]{.fragment}

::: fragment
```{r}
is.vector(names(vol))
```
:::

[We can then call an element of a vector by its name:]{.fragment}

::: fragment
```{r}
vol["Tree1"]
```
:::

::: notes
take time to explain what we did to check that names is a vector
:::

## Operations on vectors

We can perform an operation on each value of a vector, simultaneously.

[For instance, let's convert the volume from m^3^ to cm^3^]{.fragment}

::: fragment
```{r}
vol_cm3 <- vol * (100 * 100 * 100)
vol_cm3
```
:::

::: notes
here the () are not needed, just for clarity and obviously, we could do \* 1 000 000
:::

## Operations on vectors

Let's come back to the mean volume:

```{r}
mean_vol <- sum(vol) / 4
mean_vol
```

[🤔 What did we do?]{.fragment}

[We used the function *sum* to calculate the sum and then divided it by 4]{.fragment}

[💡 We can also use the function *mean*]{.fragment}

::: fragment
```{r}
mean(vol)
```
:::

[We have just learnt two new functions 😄 !]{.fragment}

## Operations on vectors

We can also do operations between two vectors.
⚠️ The vectors need to have the same length

Let's create a vector of wood density (*WD*) and calculate the weight of the logs:

```{r}
WD <- c(0.76, 0.65, 0.58, 0.81)
weight <- vol * WD
weight
```

[🤔 What did we do?]{.fragment}
[We multiplied each value of *vol* by the corresponding value of WD]{.fragment}

::: fragment
```{r}
vol[3] * WD[3]
```
:::

::: notes
Here ask if everything is ok with vectors, before moving on
If almost the end of the class => STOP HERE
:::

## Factors

If we want to create a vector for a categorical variable, we can use a class of vector called a **factor**.

[🤔 What is a categorical variable?]{style="font-size: 20px"}
[It's a type of variable representing data divided in distinct group or categories.]{style="font-size: 20px"}

[Let's take the example of the seasons:]{.fragment}

::: fragment
```{r}
season <- c("dry", "dry", "wet", "dry", "wet", "wet")
class(season)
```
:::

[Let's transform it into a factor:]{.fragment}

::: fragment
```{r}
season <- as.factor(season)
class(season)
```
:::

## Factors

The values that a factor can take are called *levels*.

```{r}
season
```
[When printing a vector, the first line shows the values, the second line shows the levels.]{.fragment}

::: fragment
```{r}
levels(season)
```
:::

::: notes
explain what is in the print: first line : the values second line: the levels
:::

## Factors

We cannot add a value that is not in *levels*:


```{r}
#| warning: true
season[7] <- "winter"
season
```


[💡 *NA* means *Not available* and represents missing or undefined values.]{.fragment}


## Factors

We can add levels:

```{r}
levels(season) <- c(levels(season), "winter", "spring", "summer", "fall")
levels(season)
```

[🤔 What did we do?]{.fragment}
[We combined the existing levels and the new ones and replaced the vector of levels by this new vector.]{.fragment}

## Factors

The new levels are added, even though none of the observation takes these values:


```{r}
season
```


[We can now add a value within these new levels:]{.fragment}

::: fragment
```{r}
#| warning: true
season[8] <- "winter"
season
```
:::

## Factors

We can easily count the number of values per levels using the function  <span style="color:indianred;"> table</span>

```{r}
table(season)
```

[*NB*: NAs are not shown.]{.fragment}
 
::: notes
ASK if all is OK
:::

## To go further on object type

![](data_type.png)

[*Figure by Jenny Bryan*]{style="font-size: 30px"}

::: notes
No need to remember all of this.

End of the second session.
:::

# Data structure

## Data structure

![](data_structure.png){width="120%"}

::: notes
There is more type of structure.
We have seen the vector so far.
We are quickly present the other ones now, without explaining much how to work with them.
We will see that later.

The main ones that we are going to use during the class are: vectors and dataframe
:::

## Matrices

![](matrix.png){width="20%"}

A matrix is a **two-dimensional** data structure (rows and columns) where all the element are of the **same mode**.

[Let's create a matrix:]{.fragment}

::: fragment
```{r}
M <- matrix(c(1, 4, 8, 6.5, 7, 8.3, 4.6, 6), # content of the matrix
              4, # number of row
              2) # number of column
M
```
:::

::: notes
In the first code, explain that this is just one command that I wrote on several line for clarity of the code
:::

## Matrices

We get the dimensions of the matrix with the function *dim*:

```{r}
dim(M)
```

[To access a row, a column, or a value in a matrix, we use \[\]:]{.fragment}

:::::::::: columns
:::::: {.column width="50%"}
::: fragment
```{r}
M[2, ] # 2nd row
```
:::

::: fragment
```{r}
M[, 1] # 1st column
```
:::

::: fragment
```{r}
M[4, 2] # 4th row, 2nd column
```
:::
::::::

::::: {.column width="50%"}
::: fragment
```{r}
M[-2,] # all rows except 2nd
```
:::

::: fragment
```{r}
M[2:3, ] # rows 2 to 3
```
:::
:::::
::::::::::

## Arrays

![](array.png){width="20%"}

An array is a **multi-dimensional** data structure where all the element are of the **same mode**.

It is an extension of a matrix with more than two dimensions.

.

::: notes
Let's not spend some time on this, you won't need ite for the moment, it's enought to know that this exist.
:::

## Lists

![](list.png){width="20%"}

A list is a flexible object containing elements of **different structuress** (*eg*: a vector, a matrix,... but a also a graph, a function...).

.

## Lists

Let's create a list:

```{r}
L <- list(vol, M, season)
L
```

## Lists

To access an object within a list, we use \[\[\]\]:

```{r}
L[[3]]
```

[We can then access a value within this object:]{.fragment}

::: fragment
```{r}
L[[3]][2]
```
:::

## Lists

:::::: columns
::: {.column width="50%"}
[The objects contained in a list can also be named when we create the list:]{style="font-size: 25px"}

```{r}
L1 <- list(Volume = vol, 
           Matrix = M, 
           Season = season)
L1
```
:::

:::: {.column width="50%"}
::: fragment
[We can then access an object by its name, using *\$*:]{style="font-size: 25px"}

```{r}
L1$Volume
```
:::
::::
::::::

## Dataframes

![](dataframe.png){width="20%"}

A dataframe is a two-dimensional structure that allow storing data sets:

-   each column is a variable (can be of different type)

-   each row is an observation

[**This is the structure we will use the more, we'll come back to it in the next session.**]{.fragment}

# Operators, functions, packages, etc...

Work in progress...

```{=html}
<!-- see slides Mélaine from slide 58 for operators
include here operation on vectors, matrix, etc...

tehn from slide 69 for fonctions
then slide 83 on fonctions

et slides juba

Dire que tout est des objects (see slide Mélaine on object 53)

and how to get HELP -->
```

```{=html}
<!--
## Acknowledgments


<!-- AT the end: recheck the two course to see if I have forgotten something

+ lister des ressources

+ faire des exercices pour chaque fin de session!!!!! -->
```

<!-- Cours Juba, cours Mélaine-->

```{=html}
<!--
## Resources

<!-- TO FINISH-->
```

```{=html}
<!--
**RStudio** cheatsheet in [English](https://rstudio.github.io/cheatsheets/rstudio-ide.pdf){preview-link="false"} and in [Portuguese](https://rstudio.github.io/cheatsheets/translations/portuguese/rstudio-ide_pt.pdf){preview-link="false"}
-->
```
