---
title: "Getting started with R"
author: G√©raldine Derroire
institute: Cirad - UnB
date: last-modified
format: 
  revealjs:
    theme: solarized
    output-location: fragment 
    slide-number: true
    preview-links: true
    chalkboard: true
    link-external-icon: true
    link-external-newwindow: true
    incremental: true
execute:
  echo: true    
editor: 
  markdown: 
    wrap: sentence
---

# R and RStudio

## Let's open R

![](R_logo.png){width="10%"}

![](open_R.png){width="50%"}

::: notes
Talk about the meaning of free Talk about the fact that it is collaborative and about the no warranty =\> packages (collection of tools come with different level of quality =\> as for everything, be critical of what you use. But most packages are highly tested and reliable.)
:::

## What is R?

-   R is a **programming language** for processing and analysing quantitative data.
    It is derived from the programming language S.

-   R is free and **Open Source**: it is can be used, modified and distributed freely.

-   R is **collaborative**: it is developed by its users.

-   R is **multi-plateform**: it works on Windows, Linux and Mac.

## What does R do?

R allows to:

-   manipulate data

-   draw graphs

-   perform statistical analyses

-   and many other things...

![](ex_graph_R.png){width="80%"}

::: notes
Other things: text mining, GIS...
:::

<!-- we are not going to work in R but in RStudio => close R -->

## Why use R?

-   It has many functionnalities that are constantly evolving, thanks to its community of users.

-   It is widely used by the scientific community.

-   A lot of help is available, in many languages.

## Is it difficult?

![](R_learning_curve.png){width="120%"}

## Let's open RStudio

![](RStudio_logo.png){width="20%"}

![](RStudio_screen.png){width="70%"}

=\> RStudio opens R.

::: notes
We are not going to work directly in R but in RStudio, for reason that you will discover in the coming hours, and days.
=\> Let's close R and open RStudio.

We find the same text than when we open R directly =\> RStudio opens R.
:::

## What is RStudio?

RStudio is an *Integrated Development Environment* (IDE): a software that provides many facilities to help programming with R.

![](engine_dashboard.png)

::: notes
RStudio is also free and open source.
:::

## The console and the prompt

![](console_prompt.png)

The prompt is indicating that R is waiting for our instruction.

::: notes
We are going to see little by little what are the different windows of RStudio.
Let's start with the console.
:::

## Let's try some basic commands!

Write an operation in the console and click *Enter*.

```{r}
2 + 3
```

::: notes
\[1\] indicates that the answer is the first element of the line.
:::

## Let's try some basic commands!

```{r}
5 + 9
```

::: fragment
```{r}
8 - 2 
```
:::

::: fragment
```{r}
-2 * 4 
```
:::

::: fragment
```{r}
8 / 3
```
:::

::: fragment
```{r}
4^2
```
:::

## Spaces are not important.

```{r}
1+2
1 + 2
1    +     2
```

## Command history

The previous commands are visible in the command history.

![](command_history.png){width="60%"}

You can run them again by double-clicking on them or clicking on *To Console*.
But in practice, we will not use this much...

You can also use the ‚¨ÜÔ∏è or ‚¨áÔ∏è keys of the keyboard to navigate the command history in the console.

## Let's try some more commands...

```{r}
log(-1)
```

[*NAN* means "not a number".]{.fragment}

## Let's try some more commands...

```{r, eval=FALSE}
4 * 
```

[This is an unfinished command. We can finish after the +. ![](unfinished.png){width="30%"}]{.fragment}

[Or press *Esc* to terminate the command line.]{.fragment}

## Let's try some more commands...

```{r, eval=FALSE}
2 * x 
```

[We get an error message. Why?]{.fragment}

[R doesn't know what is *x*.]{.fragment}

# Objects

## Basic objects

Let's put something in x

```{r}
x <- 5
```

[*x* is an **object**. We assign it the value of 5, using the assignment operator **\<-**]{.fragment}

[‚ö†Ô∏è The content of *x* is not printed. But we can see it by typing its name in the console.]{.fragment}

::: fragment
```{r}
x
```
:::

[And we can use it in other commands.]{.fragment}

::: fragment
```{r}
2 * x
```
:::

## Where are the objects stored?

Objects are store in the environment

![](enviro.png){width="100%"}

[‚ö†Ô∏è They are kept in memory throughout the session but are **not saved** when RStudio is closed.]{.fragment}

## Where are the objects stored?

You can see the content of the environment with the function *ls*

::: fragment
```{r}
ls()
```
:::

[You can remove an object from the environment using the function *rm*]{.fragment}

::: fragment
```{r}
rm(x)
ls()
```
:::

[‚ö†Ô∏è Typing *rm()* clears all the environement!]{.fragment}

## Assigning a new value to an existing object

```{r}
x <- 3
x 
```

::: fragment
```{r}
x <- 9
x
```
:::

[Assigning a new value to an object replaces the previous value (as you can see in the environment). ‚ö†Ô∏è Don't give the same name to several objects!]{.fragment}

## Objects are not linked

```{r}
y <- x
y
```

[Modifying *x* does not modify *y*.]{.fragment}

::: fragment
```{r}
x <- 25
y
```
:::

## Creating more objects

```{r}
result <- 3 * x
```

[The new object *result* is stored in the environment. It is not printed.]{.fragment}

::: fragment
```{r}
result2 <- 4 * x
```
:::

::: fragment
```{r}
result3 <- 25 * x
```
:::

[We can name objects the way we want but...ü§î]{.fragment}

[... calling them *result*, *result2*, *result3* is not explicit enought!]{.fragment}

::: notes
What's wrong with the way we call them here?
This way of naming objects is not going to be usefull...
:::

## Naming an object

Some good practices when naming an object:

-   Use explicit names while trying to keep names short
-   Object names can contain letter, numbers, the symbols [.]{style="color:indianred;"}, [-]{style="color:indianred;"} and [\_]{style="color:indianred;"}
-   Object names cannot start with a number
-   Object names cannot contain a space
-   The case matters (upper and lower cases are not the same)
-   Avoid accents (for encoding problems)

## Naming an object

Adopt a consistant naming style

![](name_style.png)

## Objects are not necessarly numbers

What if we write some text in an object?

```{r}
y <- "Ola!"
y
```

[ü§î Why do we need the " " ?]{.fragment}

::: fragment
```{r, eval=FALSE}
y <- Ola!
```
:::

## Mode of an object

The type of an object is called the *mode*.

We can use the function *mode* to check what is the mode of an object:

::: fragment
```{r}
x
```
:::

::: fragment
```{r}
mode(x)
```
:::

::: fragment
```{r}
mode(y)
```
:::

## Mode of an object

Here are the main modes you will use:

```{r, echo=FALSE}
mod <- data.frame(Mode = c("numeric", "character", "logical"),
                  What = c("real number", "character string", "bolean (true/false)"),
                  Example = c("2.3", " \"hello\" ", "true"))
knitr::kable(mod)
```

::: notes
But other exists: complex, raw, expression, function, list
:::

## Mode of an object

ü§î What is a boolean?

::: fragment
```{r}
test <- 2 == 3
test
```
:::

::: fragment
```{r}
mode(test)
```
:::

::: notes
we use == otherwise it is an assigment as is the \<-
:::

## Numeric

Object of mode *numeric* can be:

-   double: for any real number

::: fragment
```{r}
x <- 1.5
mode(x)
typeof(x)
```
:::

-   integer

::: fragment
```{r}
x <- 1L
mode(x)
typeof(x)
```
:::

::: notes
The L is to specify that we want it to be integer
:::

## Check the type of an object

```{r}
x <- 1
is.numeric(x)
```

::: fragment
```{r}
is.integer(x)
```
:::

[ü§î Why?]{.fragment}

::: fragment
```{r}
x <- 1L
is.numeric(x)
```
:::

::: fragment
```{r}
is.integer(x)
```
:::

## Change the type of an object

We can change the type of an object.

::: fragment
```{r}
x <- 1
is.integer(x)
```
:::

::: fragment
```{r}
x <- as.integer(x)
is.integer(x)
```
:::

## Check and change the type of an object

See also

::: nonincremental
-   *is.numeric* and *as.numeric*

-   *is.integer* and *as.integer*

-   *is.double* and *as.double*

-   *is.character* and *as.character*

-   *is.logical* and *as.logical*

-   ...
:::

## Let's play a bit!

ü§î

::: fragment
```{r}
is.character(TRUE)
```
:::

::: fragment
```{r}
mode(TRUE)
```
:::

::: fragment
```{r}
is.character("TRUE")
```
:::

## All good?

You've done your first steps with R!

Parab√©ns üéâ

![](courage.png){fig-align="center"}

::: notes
End of the first session If still a lot of time =\> questions?
=\> start the third session on vectors?
:::

# Questions on the last session?

::: notes
Start of the second session
:::

## Let's see if all is clear

::: notes
TO DO, add some tests
:::

# Working with RStudio

Before going further with our exploration of R, let's get organised!

## 

ü§î Where are the object stored ?
and the commands ?

What happens when we close and restart a R session?

[**We need need to save our work!**]{.fragment}

::: notes
For this we are going to use a script
:::

## Script

What is a script?

A script is a text file in which can can write and organise all the commands of a workflow.

This is the core of our work.

Saving all the commands in a script is what makes our work **reproductible**.

```{=html}
<!--Here section 2.4 juba

26 M√©laine-->
```

## Let's create a new script

In RStudio, click on *File \> New file \> R script*

![](new_script){width="100%"}

This opens a new pane in RStudio, this is the text editor where we can write the script.

## Adding a command in a script and running it

Let's write a command in the script.

To run it, select it and click on *Run*.

![](run_command){width="100%"}

üí° You can also use the keyboard shortcut ***Ctrl + Enter***.

You can select only one command or a group of commands.

## Commenting a script

It is very important to **document** your script by commenting it.
Remember?

![](not_repro.png)

[Comment your code **abundantly**! Choose the language well.]{.fragment}

## Commenting a script

To comment a script use one or several [\#]{style="color:indianred;"}.

R will ignore everything that comes after, until the end of the line.

![](comments.png){width="120%"}

You can comment before or at the end of a line.

## Organising a script

::::: columns
::: {.column width="40%"}
A script should include:

-   a header: title, date, author

-   a description of what the script does
:::

::: {.column width="60%"}
![](script_orga.png)
:::
:::::

-   an outline

-   several sections (blocks of code)

[üí° Use blank lines and indents to organise your script]{.fragment}

## Blocks of code

Adding [\####]{style="color:indianred;"} (4 or more) or several [----]{style="color:indianred;"}at the end of a line, create a block of code.

![](script_block.png)

You can fold/unfold a block of code by clicking on the grey arrow.

And you can see an overview of the script by clicking on *Outline*.

## Colours in a script

Colours in a R script help you distinguish comments, numeric values, character strings, functions...

![](script_color.png){width="80%"}

üí° You can change the color theme in *Tools \> Global options \> Appearance*.

## Save and open a script

When there are unsaved changes in a script, it appears in blue

![](unsaved_script.png){width="80%"}

[To save a script, go to *File \> Save* or *File \> Save*. üí° You can also use the shortcut *Ctrl + S* or click on üíæ.]{.fragment}

[To open an existing script, go *File \> Open file...*.üí° You can also use the short cut *Ctrl + O* or click on üìÇ.]{.fragment}

## R file

The script is saved as an *.R* file:

*.R* files are recognised as R script by RStudio, which allows using the syntax colour code, and running the code directly.

## Working directory

The working directory is where R works.

This is where R looks for when you want to open or save a file.

To know where is the working directory:

```{r}
getwd()
```

[This gives the absolute path to the work directory]{.fragment}

[You can change the working directory using the function *setwd()* to organise your work in a same folder.]{.fragment}

::: fragment
```{r, eval=FALSE}
setwd("D:/some_other_folder")
```
:::

::: notes
But we will see in 5 min that there is a better way of doing this.
:::

## Problems with absolute path

-   If you move your folder, the path will no longer work.

-   If you give your script to someone else, they will have to manually change the path to use your script.

-   If you are messy...

::: fragment
![](messy.png){width="50%"}
:::

## RStudio project

We will use **RStudio projects** to organise the workflow and gather all the files related to a same workflow in a same place.

A RStudio project is a folder on your computer where all the files of the project are grouped.

By default, the working directory of a project is this folder.
So no more problems with absolute path üòä! 

To share a project, just share the full folder.

## RStudio project

To create a new RStudio project, go to *File > New project...*

![](new_project.png)

You can either start a new directory or associate an existing one, if you already have one.

## RStudio project

RStudio creates a *.Rproj* file that contains information about your project (you won't need to open it).

![](Rproj.png){width="100%"}

## RStudio project

You can see the name of the project, and switch from one project to another in the upper right corner.

You can see the path to the project folder at the top of the Console. 
This is the working directory (try getwd to check this).

![](project.png){width="100%"}


## RStudio project

When you create a new script, RStudio save it by default in the project folder.

You can view the content of the project folder in the file pane.

![](file_pane.png){width="100%"}

## RStudio project

From now on, we will always work with RStudio project.

Let's create one for the course.

::: notes
Give time for them to create a project.
:::

## Organising a RStudio project




## Organise a workflow into several scripts

JUba section 5.3 sourcing

Puis parler de l'organisation des projects Cesab et BES



# Data structure

![](data_structure.png){width="120%"}

## Vectors

```{=html}
<!-- what if we want to put more than a value in an object
cf M√©laine slide 61... 
-->
```

```{=html}
<!-- see class Juba here, from 2.2.2

https://larmarange.github.io/analyse-R/vecteurs-indexation-et-assignation.html-->
```

## Factors

```{=html}
<!--
Class of data, that we can use for a vector

par ex, si on a un vecteur de 3 couleurs => en faire un vecteur de caract√®res et le transformer en vecteur

https://larmarange.github.io/analyse-R/facteurs-et-vecteurs-labellises.html

-->
```

## Lists

```{=html}
<!-- m√©laine slide 74

https://larmarange.github.io/analyse-R/listes-et-tableaux-de-donnees.html
-->
```

## Matrices

<!-- m√©laine slide 77-->

## Arrays

## Dataframes

```{=html}
<!-- m√©laine slide 81

But we will see this later, during the session Manipulating data-->
```

```{=html}
<!-- 

and they don't contain necessarly only one information 

-->
```

<!-- prepare some ex for next time-->

# Functions, operators, packages, etc...

Work in progress...

```{=html}
<!-- see slides M√©laine from slide 58 for operators
include here operation on vectors, matrix, etc...

tehn from slide 69 for fonctions
then slide 83 on fonctions

et slides juba

Dire que tout est des objects (see slide M√©laine on object 53)

and how to get HELP -->
```

## Acknowledgments

```{=html}
<!-- AT the end: recheck the two course to see if I have forgotten something

+ lister des ressources

+ faire des exercices pour chaque fin de session!!!!! -->
```

<!-- Cours Juba, cours M√©laine-->

## Resources

<!-- TO FINISH-->

**RStudio** cheatsheet in [English](https://rstudio.github.io/cheatsheets/rstudio-ide.pdf){preview-link="false"} and in [Portuguese](https://rstudio.github.io/cheatsheets/translations/portuguese/rstudio-ide_pt.pdf){preview-link="false"}
