---
title: "Introduction to Version Control with Git and GitHub"
author: Géraldine Derroire
institute: Cirad - UnB
date: last-modified
format: 
  revealjs:
    theme: solarized
    output-location: fragment 
    slide-number: true
    preview-links: true
    chalkboard: true
    link-external-icon: true
    link-external-newwindow: true
    incremental: true
execute:
  echo: true   
  warning: true
  message: true 
  cache: true
editor: 
  markdown: 
    wrap: sentence
---

# Principle

::: notes
first the principle but then mostly practicing
:::

## What is [git]{style="color:indianred;"}?

::::: columns
::: {.column width="60%"}
[git]{style="color:indianred;"} is a free and open source software that runs **on your computer**

[git]{style="color:indianred;"} is a **Version Control System** that helps track changes to files over time.
It allows you to

-   keep the full history of a file and a project

-   revert back to a previous version
:::

::: {.column width="40%"}
![](git.png)
:::
:::::

## Why use [git]{style="color:indianred;"}?

[git]{style="color:indianred;"} helps you to

-   keep your project clean by avoiding saving multiple versions of each file: *no more [script_v1_final_final_OK.R]{style="color:gray;"}*

-   always know what the current version is

-   know what are the differences between versions

::: notes
=> reproducibility
:::

## What is [GitHub]{style="color:indianred;"}?

::::: columns
::: {.column width="55%"}
[GitHub]{style="color:indianred;"} is an **online platform** for hosting and sharing git repositories.

It connects with [git]{style="color:indianred;"} to support backup, collaboration, and project management.

[Other hosting platforms exist: GitLab, BitBucket, SourceForge...]{style="font-size: 30px"}
:::

::: {.column width="45%"}
![](github.png)
:::
:::::

## Why use [GitHub]{style="color:indianred;"}?

[GitHub]{style="color:indianred;"} allows you to:

-   back up your work safely in the cloud

-   store your project history online

-   synchronise changes between computers and collaborators

-   collaborate by tracking and reviewing contributions

-   present your work though a clean interface

-   manage collaborative research projects

## [git]{style="color:indianred;"} and [GitHub]{style="color:indianred;"}

[git]{style="color:indianred;"} and [GitHub]{style="color:indianred;"} are useful tools for **reproducibility**.

They are two different things:

::: nonincremental

-   🔄 Git manages version control **on your computer**

-   ☁️ GitHub helps you share, back up, and collaborate **online**

:::


## Setting it up

You already set up [git]{style="color:indianred;"} and [GitHub]{style="color:indianred;"} following these [instructions](https://geraldinederroire.github.io/Course_R_Forest_Sciences/0_installing_enviro){preview-link="false"}

You should now have:

::: nonincremental
-   [git]{style="color:indianred;"} installed and configured

-   a [GitHub]{style="color:indianred;"} account and a ssh key
:::

::: notes
all good for everyone?

SSH key is a cryptographic key pair used to securely authenticate to remote servers without using a password
:::

## A few definitions

[A [version]{style="color:indianred;"} is the state of the entire project at a given point in time.]{style="font-size: 30px"}

::::: columns
::: {.column width="55%"}
[There are three **local areas** in a git repository:]{style="font-size: 30px"}

-   [the [working copy]{style="color:indianred;"} is the current state of the directory (what you actually see)]{style="font-size: 30px"}

-   [the [staging area]{style="color:indianred;"} contains selected files that will be added to the next version]{style="font-size: 30px"}

-   [the [local repository]{style="color:indianred;"} is an area containing all the versions]{style="font-size: 30px"}
:::

::: {.column width="45%"}
![](local_remote.png)

[[The [remote repository]{style="color:indianred;"} is a copy of the git project stored on GitHub.]{style="font-size: 30px"}]{.fragment}
:::
:::::

[Source of illustrations: [N. Casajus](https://frbcesab.github.io/intro-git){preview-link="false"}]{style="font-size: 22px"}

## Basic workflow

**Step1: [Stage]{style="color:indianred;"} the changes**

[After you've created or updated your files: Select the files you want to include in the next version (you can select all or only some modified files)]{style="font-size: 30px"}

![](stage.png){fig-align="center" height="80%"}

[Staged files are now in the **staging area**.]{style="font-size: 30px"}

::: notes
for now, we don't practice, we will do it in a few minutes

you may decide to commit some files later because they related to a separate task, or you may never commit then (see later gitignore)
:::

## Basic workflow

**Step2: [Commit]{style="color:indianred;"} the staged files**

[A commit saves a snapshot of your project by creating a new **version**.]{style="font-size: 30px"}

![](commit.png){fig-align="center" height="80%"}

[The commited files are not longer on the staging area.]{style="font-size: 30px"}

## Basic workflow

[A [Commit]{style="color:indianred;"} records:]{style="font-size: 30px"}

::: nonincremental

-   [**WHAT**: the specific changes (line-by-line differences) in the files that you staged]{style="font-size: 30px"}

-   [**WHO**: the person who made the changes]{style="font-size: 30px"}

-   [**WHEN**: the date of the commit]{style="font-size: 30px"}

-   [**WHY**: a manually added message stating the reason of the commit (what has been done since the last version)]{style="font-size: 30px"}

:::

::: notes
go to the line often when typing text
:::

## Basic workflow

**Step3: [Push]{style="color:indianred;"} your commit(s) from the local to the remote repository (on GitHub)**

[This makes your work visible to collaborators and backs it up online.]{style="font-size: 30px"}

![](push.png){fig-align="center" height="80%"}

## Basic workflow

[**Pull**]{style="color:indianred;"} **these changes from the remote to your working area to update your local version**

![](pull.png){fig-align="center" height="80%"}

## Basic workflow

::::: columns
::: {.column width="70%"}
When to [commit]{style="color:indianred;"}?

::: nonincremental

-   [Commit often (make small commits)]{style="font-size: 30px"}

-   [Commit when you reach a milestone]{style="font-size: 30px"}

-   [Put separate tasks/problems in separate commits]{style="font-size: 30px"}

-   [Commit at the end of a work session]{style="font-size: 30px"}

-   [Commit files that actually work]{style="font-size: 30px"}
:::
:::

::: {.column width="30%"}
![](fire.png)
:::
:::::

## Basic workflow

When to [push]{style="color:indianred;"}?

-   [Push often (every commits or every few commits)]{style="font-size: 30px"}

-   [Push when you reach a milestone]{style="font-size: 30px"}

-   [Push at the end of a work session]{style="font-size: 30px"}

[When to [pull]{style="color:indianred;"}?]{.fragment}

-   [Pull before starting a new work session and before pushing (if working with collaborators)]{style="font-size: 30px"}

## git and Github from Rstudio

::::: columns
::: {.column width="50%"}

[The operations can be performed by writing command lines on the *Terminal*]{style="font-size: 30px"}

![](terminal.png)

[Source of illustration: [K. V. Kulkani](https://opensource.com/article/18/1/step-step-guide-git){preview-link="false"}]{style="font-size: 22px"}

:::


::: {.column width="50%"}

::: fragment

[But we will do most of them from **RStudio**.]{style="font-size: 30px"}

![](git_rstudio.png)
:::

:::
:::::

::: notes
You will see the git pane once you have created a git repo
:::

# Create a new repository

::: notes
let's practice

:::


## Create a new repository from scratch

[The best practice is to create a git and GitHub repo when you start a new project.]{style="font-size: 29px"}


::::: columns
::: {.column width="65%"}

::: {.nonincremental}
1. [Create a new GitHub repository]{style="font-size: 30px"}
:::


* [Go to *Repositories* and click on the green button *New*]{style="font-size: 25px"}
    
* [Give a name to your new repo]{style="font-size: 25px"}
    
* [Add a description]{style="font-size: 25px"}
    
* [Select if you want to make the repo public or private]{style="font-size: 25px"}
    
* [Add a README file]{style="font-size: 25px"}

* [You can also change the template of the *.gitignore* and a license (optional)]{style="font-size: 25px"}
    
:::

::: {.column width="35%"}
![](new_repo.png) 
:::
:::::


::: notes
Let's do this together

Name: no spectial caracter, avoid spaces

gitignore => see next slides

readme => let's talk about it latter

License: see the info if you want to add one (only for public repo)
::: 

<!-- discuss the choice name, private/public, .gitignore later-->


    
## Create a new repository from scratch   

::::: columns
::: {.column width="65%"}

::: {.nonincremental}
2. [Copy the URL of this repo]{style="font-size: 30px"}
:::

:::

::: {.column width="35%"}

![](clone.png)
:::
:::::

## Create a new repository from scratch 

[You now need to **clone** the remote repository to download it on your computer:]{style="font-size: 30px"}

::::: columns
::: {.column width="65%"}


::: {.nonincremental}
3. [Create a new project in RStudio]{style="font-size: 30px"}


  * [*File/New Project/Version Control/Git*]{style="font-size: 30px"}
  
  * [Paste the repo URL]{style="font-size: 30px"}
  
  * [Select the localisation of your project on your computer]{style="font-size: 30px"}
  
  * [Check the box *Open in new session*]{style="font-size: 30px"}
:::  

:::

::: {.column width="35%"}
![](new_project.png)
:::

:::::

[[Once the new project is created, you should see the git pane. Note that a *.gitignore* file and a *README* file (if you created one) are added.]{style="font-size: 30px"}]{.fragment}


## Create a repository from an existing RStudio project

::: notes
Best to avoid doing this, as we should create it from the beginning for reproductibility

Let's NOT do this together
:::

::::: columns
::: {.column width="70%"}

::: {.nonincremental}
1. [Put the project under version control:]{style="font-size: 30px"}

  * [*Tools/Version Control/Project Setup*]{style="font-size: 30px"}

  * [Select *Git*]{style="font-size: 30px"}
:::

2. [Stage and commit]{style="font-size: 30px"}

::: 

::: {.column width="30%"}
![](add_git.png)
:::
:::::


3. [Create a GitHub repo and get its URL]{style="font-size: 30px"}

4. [In the RStudio Terminal, run:]{style="font-size: 30px"}

::: fragment
```{r, eval = FALSE}
git remote add origin https://github.com/my_account/my_repo.git
git push -u origin main
```
:::

::: notes
Let's not do this now

To stage and commit: see next section
:::


## Public versus private repository

[A **public** repo is visible to everyone (but only collaborators can edit it):]{style="font-size: 30px"}

::: {.nonincremental}
* [for open-science and reproducibility]{style="font-size: 30px"}

* [for visibility]{style="font-size: 30px"}

* [for community contribution]{style="font-size: 30px"}
:::

::: fragment

[A **private** repo is visible only by you and collaborators to which you gave access:]{style="font-size: 30px"}

::: {.nonincremental}
* [for project containing sensitive information...]{style="font-size: 30px"}
:::

[💡 You can still make a repo public is you have information (passwords) or data that you don't want to share, by including them in the *.gitignore*.]{style="font-size: 30px"}

:::


::: notes
visibility of your work => will be used and cited

visibility of yourself: show your skills
:::


## Ignoring files with [.gitignore]{style="color:indianred;"} {.smaller}

[You can decide to tell git (and therefore GitHub) **not to track** certain files by listing them in a special file called [.gitignore.]{style="color:indianred;"}]{style="font-size: 30px"}

::::: columns
::: {.column width="55%"}
[Typical files to ignore:]{style="font-size: 30px"}

::: {.nonincremental}
* [non-open or sensitive data]{style="font-size: 30px"}

* [passwords]{style="font-size: 30px"}

* [temporary files]{style="font-size: 30px"}

* [large files]{style="font-size: 30px"}

* [files that can be regenerated easily (e.g. figures, .html, .pdf)]{style="font-size: 30px"}
:::

:::

::: {.column width="45%"}

::: fragment
[Syntax of [.gitignore]{style="color:indianred;}]{style="font-size: 30px"}

```{r, eval = FALSE}
# Ignore a specific file
README.html

# Ignore all PDF
*.pdf

# Ignore a folder
data/

# Ignore a subfolder
data/raw-data/

# Ignore a specific file in a subfolder
data/raw-data/raw-data.csv
```
:::

:::
:::::

::: fragment
[⚠️️️Files listed in [.gitignore]{style="color:indianred;"} will **not** be versioned or uploaded to GitHub.]{style="font-size: 30px"}

[You can edit the [.gitignore]{style="color:indianred;"} at any time, but this won't untrack files that are already tracked.]{style="font-size: 30px"}
:::


::: notes
html or pdf files can be easily recreated

obviously files in the git ignore will not be tracked, so select them carefully

if a file is already track, you won't be able to remove them from the repo, so think ahead for sensitive files (they could actually be removed but this is a tricky operation)
:::

# Basic workflow from RStudio

<!--voir ici, also for screen shots: https://frbcesab.github.io/intro-git/#/rstudio-and-git-1-->

::: notes
Let's pratice together
:::

## Stage the changes

[*Create a new .R file with a few lines of code and save it.*]{style="font-size: 25px"}

::::: columns
::: {.column width="60%"}
[Modified or new files will appear in the *git* pane in RStudio:]{style="font-size: 30px"}
:::

::: {.column width="40%"}
![](modif_files.png)
:::
:::::


::: fragment

::::: columns
::: {.column width="60%"}
[We can review the changes, by clicking on  *Commit*: green lines for added content, red lines for removed or modified content.]{style="font-size: 30px"}

[To prepare files for the next commit, check the box in the *Staged* column:]{style="font-size: 30px"}
:::

::: {.column width="40%"}
![](stage_rstudio.png)
:::
:::::

:::

## Stage the changes

[We don't need to stage *all* the modified files:]{style="font-size: 30px"}

* [**Unstaged** files will not be included in the commit, but can be committed later.]{style="font-size: 30px"}

* [We can **ignore** a file by clicking on ![](ignore.png). This adds it to the *gitignore* so it won't be tracked in the future.]{style="font-size: 30px"}

::: notes
as we want to do a commit per task, it can be usefull not to commit all recent changes in one same commit
:::





## Commit

::::: columns
::: {.column width="60%"}
[Once selected files are staged, we write a commit message and click on *Commit*:]{style="font-size: 30px"}

[A commit message as a title and an optional body. ]{style="font-size: 30px"}
:::

::: {.column width="40%"}
![](commit_rstudio.png)
:::
:::::


[A good commit message should be **short but informative**: it should explain what was changed and why.]{style="font-size: 30px"}


::: {.column width="60%"}
[*example:* ✅ *"Fix plot label alignment in Figure 2"*]{style="font-size: 30px"}
:::

::: {.column width="40%"}
[❌ *"Update code"*]{style="font-size: 30px"}
:::

## Push

::: {.column width="50%"}
[After committing, we may see that our local repository is ahead of the remote one.]{style="font-size: 30px"}
:::

::: {.column width="50%"}
![](push_rstudio.png)
:::

[This means we have one or more commits that haven’t yet been pushed to GitHub.]{style="font-size: 30px"}

[Click on *Push* to send these commits to the remote repository on GitHub.]{style="font-size: 30px"}


## Pull

[To update your local repository with the latest changes from GitHub, click on *Pull*.]{style="font-size: 30px"}

[This will synchronize your local repository with the remote one, downloading any new commits made by you or your collaborators directly on GitHub.]{style="font-size: 30px"}

::: notes
This is it, this is the basic workflow that you will need to repeat very often
:::


# Looking back

::: notes
now that you are familiar with the basic workflow, let's see how we can navigate the project history
::: 

## Seeing past changes in Rstudio

::: {.column width="60%"}
[To view the history of previous commits, click on *history* in the git pane. You can see all the previous commits with their message, author and date.]{style="font-size: 30px"}
:::

::: {.column width="40%"}
![](history_rstudio.png)
:::

::: fragment

::: {.column width="60%"}
[To inspect the changes made in a specific commit, click on it. You can see the modification: green lines for added content, red lines for removed or modified content.]{style="font-size: 30px"}
:::

::: {.column width="40%"}
![](history_rstudio2.png)
:::

:::

[[💡 Now you understand the importance of having informative commit messages]{style="font-size: 30px"}]{.fragment}


## Seeing past changes in GitHub

::: {.column width="60%"}
[On the main page of the repository, GitHub shows when each file or folder was last modified, along with the message of the most recent commit.]{style="font-size: 30px"}
:::

::: {.column width="40%"}
![](history_github1.png)
:::

::: fragment

::: {.column width="60%"}
[Click on the clock icon to view the full commit history of the repository.]{style="font-size: 30px"}
:::

::: {.column width="40%"}
![](history_github2.png)
:::

:::

::: fragment

::: {.column width="60%"}
[Click on a specific commit to see all the changes it introduced.]{style="font-size: 30px"}
:::

::: {.column width="40%"}
![](history_github3.png)
:::

:::

## Going back in time

[To return to a previous version of your code, you can:]{style="font-size: 30px"}

* [identify the commit you want to go back to and copy the code you want to restore: [safe option]{style="color:green;"}]{style="font-size: 30px"}

* [use *git revert*  to creates a new commit that undoes the changes introduced by a previous one: [more advanced option]{style="color:orange;"}]{style="font-size: 30px"}

* [use *git reset* to remove commits from history: [risky option]{style="color:red;"}]{style="font-size: 30px"}

[[*The two last options are more advanced and must be done in the terminal. We won't cover them here.*]{style="font-size: 30px"}]{.fragment}

::: notes 
The two last options are more advanced and must be done in the terminal. We won't cover them here.
:::


# Collaborate with GitHub

## Invite a collaborator

On GitHub:


::: nonincremental
* [on the main page of your repository, click on ![](settings.png)]{style="font-size: 30px"}

* [click on ![](collab.png) (in the left-side menu)]{style="font-size: 30px"}

* [click on ![](add_people.png)]{style="font-size: 30px"}

* [type the GitHub user name of the collaborator you want to invite]{style="font-size: 30px"}

* [click on *Add*]{style="font-size: 30px"}
:::

::: notes
let's do it together
:::

## Invite a collaborator

[Your collaborator will need to]{style="font-size: 30px"}

*  [accept the invitation to start working on your repository (invitation are received by email and also visible on GitHub in *notifications*)]{style="font-size: 30px"}

* [clone the repository on their computer (see step 3 of *Create a new repository from scratch*)]{style="font-size: 30px"}

[[The collaborator can then start working: *modify, commit, push*.]{style="font-size: 30px"}]{.fragment}

[[💡 On a personal repository, collaborators have **read** and **write** rights, but not admin rights.]{style="font-size: 30px"}]{.fragment}

::: notes
Practice only if we have time: in pairs
one invite, then they modified one after the other

to be able to accept the invitation, you need to b signed in
:::


## Why can't I push ?

[You may get the following error message when trying to push:]{style="font-size: 30px"}

![](pb_push.png){height="80%"}

[It happens when the remote repository has changed since your last pull.]{style="font-size: 30px"}

::: notes
collaborating is one of the main objectives of Github, but can also complicate things a bit...
:::


## Why can't I push ?

[The remote may have been modified:]{style="font-size: 30px"}

::: nonincremental
* [directly on git (by you or by a collaborator)]{style="font-size: 30px"}

* [by a collaborator who pushed their changes before you]{style="font-size: 30px"}
:::

[**💡 Solution: pull before pushing again**]{.fragment}

## Why can't I push ? practice

::: nonincremental
* [*go on GitHub*]{style="font-size: 30px"}

* [*edit the README (at the bottom of the repo main page) using ![](pen.png)*]{style="font-size: 30px"}

* [*commit this change directly in GitHub ![](commit_github.png)*]{style="font-size: 30px"}

* [*try to push some changes from your local repo, this will generate an error message*]{style="font-size: 30px"}

* [*pull before pushing again*]{style="font-size: 30px"}

:::

::: notes
if time, let's practice this together

you can also test with a colleagues

It's important to experience this on a test repo
:::


## Why can't I pull?

[You may get the following error message when trying to pull:]{style="font-size: 30px"}

![](conflict_message.png)

[You have a **conflict** 💣 ...]{.fragment}


## What is a conflict?

::: {.column width="70%"}
[A **conflict** occurs when Git cannot automatically merge two versions because they contain changes on the same line(s) of the same file(s).]{style="font-size: 30px"}
:::

::: {.column width="30%"}
![](conflict_cartoon.png){fig-align="center" height="70%"}
:::

::: fragment

[It usually happens when the remote repository has changed since your last pull **on the same lines** you have edited locally since your last push.]{style="font-size: 30px"}

::: {.column width="50%"}
[Local version:]{style="font-size: 30px"}

![](readme_local.png){height=50}
:::

::: {.column width="50%"}
[Remote version:]{style="font-size: 30px"}

![](readme_github.png){height=50}
:::

:::

::: notes
explain cases when Git can merge (changes on two different files)
:::

## How to solve a conflict?

* [open the conflicted file (its name is in the error message)]{style="font-size: 30px"}

::: fragment
![](conflicted_file.png){fig-align="center"}
:::

* [edit the file manually by removing the version you don't want to keep (or writting an alternative version)]{style="font-size: 30px"}

* [delete the conflict markers (<<<<<<<, =======, >>>>>>>)]{style="font-size: 30px"}

* [commit and push]{style="font-size: 30px"}


## How to solve a conflict? practice

*To generate a conflict:*

::: nonincremental
* [*Modify a file directly on GitHub (ex: the README) and commit*]{style="font-size: 30px"}

* [*On the local repo*]{style="font-size: 30px"}

    * [*Don't pull*]{style="font-size: 30px"}
    
    * [*Modify the same file on the same line*]{style="font-size: 30px"}
    
    * [*Try to push: you can't*]{style="font-size: 30px"}
    
    * [*Try to pull: this generate a conflict...*]{style="font-size: 30px"}

:::
    
[*You can now solve this conflict!*]{style="font-size: 30px"}


## How to avoid conflicts?

::: {.column width="70%"}

* [Avoid very long lines of code/text: *Git resolves changes line by line — shorter lines reduce the chance of overlap*]{style="font-size: 30px"}

* [Pull and push **frequently**: *The longer you wait, the more likely others have changed the same parts*]{style="font-size: 30px"}

* [Communicate with collaborators: *Know who is working on what — avoid editing the same files*]{style="font-size: 30px"}

* [Use **branches** for bigger changes: *Keeps the main branch clean and easier to merge later*]{style="font-size: 30px"}

:::

::: {.column width="30%"}
![](solving_conflict_cartoon.png){fig-align="center" height="70%"}
:::

::: notes
we are going to talk more about branches in a few minutes
:::

## Using issues on a collaborative project

[A GitHub Issue is a way to track and discuss tasks, bugs, or ideas in a project. This helps a team to organize work and collaborate efficiently.]{style="font-size: 30px"}

::: {.column width="50%"}

[It works like a forum. You can:]{style="font-size: 30px"}

::: nonincremental
* [create a to do list]{style="font-size: 30px"}

* [assign tasks to team members]{style="font-size: 30px"}

* [post an answer or a comment]{style="font-size: 30px"}

* [close the issue once completed or solved]{style="font-size: 30px"}

:::
:::

::: {.column width="50%"}
![](issue.png)
:::

[[More on GitHub issues](https://docs.github.com/en/issues/tracking-your-work-with-issues/configuring-issues/quickstart){preview-link="false"}]{style="font-size: 30px"}

## Organising a project with a GitHub project

[A GitHub projects helps plan, prioritize, and visualize work in a project.]{style="font-size: 30px"}

[It organises issues on a visual board.]{style="font-size: 30px"}

![](project.png)

[[More on GitHub projects](https://docs.github.com/en/issues/planning-and-tracking-with-projects/learning-about-projects/about-projects){preview-link="false"}]{style="font-size: 30px"}

::: notes
issues are a way to collaborate
::: 


# More advanced use

::: notes
Here we won't go in depth, just for you to be aware that this exists
:::

## Branch

::: {.column width="60%"}
[A branch is a parallel line of development of your project where you can safely make changes without affecting the main code.]{style="font-size: 30px"}

:::

::: {.column width="40%"}
![](merge.png)
:::

[Why use a branch? To develop features, fix bugs, or try ideas without breaking the main project — and then merge them back when ready.]{style="font-size: 30px"}

[[More on branches](https://docs.github.com/en/pull-requests/collaborating-with-pull-requests/proposing-changes-to-your-work-with-pull-requests/about-branches){preview-link="false"}]{style="font-size: 30px"}

## Create a branch

[To create a new branch from RStudio, click on ![](new_branch.png) in the git pane.]{style="font-size: 30px"}

[You can then select the branch you want to work on:]{style="font-size: 30px"}

![](branches_rstudio.png)

[You can now work on this new branch: *pull, work, commit, push...pull, work, commit, push...*]{style="font-size: 30px"}

## Merge branch

[Once you are ready to merge your branch with the main branch, go on GitHub:]{style="font-size: 30px"}

* [create a pull request (a pull request lets you propose merging your changes into the main branch)]{style="font-size: 30px"}

::: fragment
![](merge_branches.png)
:::

* [merge your branch to the main branch]{style="font-size: 30px"}

::: notes
merging can still generate conflicts
:::

## Fork and pull request {style="font-size: 30px"}

To work on someone else's project, you can create a **fork**.

![](fork.png){height="50%"}

A **fork** is your personal copy of someone else's repository that allows you to:

* make changes without affecting the original repo

* collaborate on a project that you don't have write access to (to fix bugs, propose improvements...)

[You can then make a **pull request** to propose to the original repository maintainer to merge your work. They can review your changes before merging.]{.fragment}

# GitHub as a social (scientific) network

## GitHub as a social (scientific) network

![](wickham.png)

::: notes
This is the developper of the tidyverse! 26000 followers!
:::

## GitHub as a social (scientific) network {style="font-size: 30px"}

* **Follow** other users

* Follow repository (**Watch**)

* Give visibility to your work (and to yourself!)

* Interact and collaborate on projects

* Create an **Organisation** to group the repositories of a research group

* Build websites (e.g. project pages, CVs) using GitHub Pages and GitHub Actions

* ...


## Acknowledgments {.smaller}

::: nonincremental

* Casajus N. *Version control - Introduction to git & GitHub* [](https://frbcesab.github.io/intro-git/){preview-link="false"}

* Marcon E. *R: Contrôle de Source* [in French](https://ericmarcon.github.io/Cours-travailleR/12-git.html){preview-link="false"}

* Van Hoey S., Desmet P., Onkelinx T. *Git hands-on session within RStudio* [](https://inbo.github.io/git-course/course_rstudio.html){preview-link="false"}

* Bryan J. *Happy Git and GitHub for the useR* [](https://happygitwithr.com){preview-link="false"}

:::

## Ressources {.smaller}

::: nonincremental

* Van Hoey S., Desmet P., Onkelinx T. *Git hands-on session within RStudio* [](https://inbo.github.io/git-course/course_rstudio.html){preview-link="false"}
 
* Get started with GitHub documentation [in Portuguese](https://docs.github.com/pt/get-started){preview-link="false"} and [in English](https://docs.github.com/en/get-started)

* GitHub Docs [in Portuguese](https://docs.github.com/pt){preview-link="false"} and [in English](https://docs.github.com/en){preview-link="false"}

:::
