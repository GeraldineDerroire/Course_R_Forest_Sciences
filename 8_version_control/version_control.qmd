---
title: "Introduction to Version Control with Git and GitHub"
author: Géraldine Derroire
institute: Cirad - UnB
date: last-modified
format: 
  revealjs:
    theme: solarized
    output-location: fragment 
    slide-number: true
    preview-links: true
    chalkboard: true
    link-external-icon: true
    link-external-newwindow: true
    incremental: true
execute:
  echo: true   
  warning: true
  message: true 
  cache: true
editor: 
  markdown: 
    wrap: sentence
---

# Principle

::: notes
first the principle but then mostly practicing
:::

## What is [git]{style="color:indianred;"}?

::::: columns
::: {.column width="60%"}
[git]{style="color:indianred;"} is a free and open source software that runs **on you computer**

[git]{style="color:indianred;"} is a **Version Control System** that helps track changes to files over time.
It allows you to

-   keep the full history of a file and a project

-   revert back to a previous version
:::

::: {.column width="40%"}
![](git.png)
:::
:::::

## Why use [git]{style="color:indianred;"}?

[git]{style="color:indianred;"} helps you to

-   keep your project clean by avoiding saving multiple versions of each file: *no more [script_v1_final_final_OK.R]{style="color:gray;"}*

-   always know what the current version is

-   know what are the difference between versions

## What is [GitHub]{style="color:indianred;"}?

::::: columns
::: {.column width="55%"}
[GitHub]{style="color:indianred;"} is an **online platform** for hosting and sharing git repositories.

It connects with [git]{style="color:indianred;"} to support backup, collaboration, and project management.

[Other hosting platforms exist: GitLab, BitBucket, SourceForge...]{style="font-size: 30px"}
:::

::: {.column width="45%"}
![](github.png)
:::
:::::

## Why use [GitHub]{style="color:indianred;"}?

[GitHub]{style="color:indianred;"} allows you to:

-   back up your work safely in the cloud

-   store your project history online

-   synchronise changes between computers and collaborators

-   collaborate by tracking and reviewing contributions

-   present your work though a clean interface

-   manage collaborative research projects

## [git]{style="color:indianred;"} and [GitHub]{style="color:indianred;"}

[git]{style="color:indianred;"} and [GitHub]{style="color:indianred;"} are useful tools for **reproducibility**.

They are two different things:

::: nonincremental

-   🔄 Git manages version control **on your computer**

-   ☁️ GitHub helps you share, back up, and collaborate **online**

:::


## Setting it up

You already set up [git]{style="color:indianred;"} and [GitHub]{style="color:indianred;"} following these [instructions](https://geraldinederroire.github.io/Course_R_Forest_Sciences/0_installing_enviro){preview-link="false"}

You should now have:

::: nonincremental
-   [git]{style="color:indianred;"} installed, configurated

-   a [GitHub]{style="color:indianred;"} and a ssh key
:::

::: notes
all good for everyone?
:::

## A few definitions

[A [version]{style="color:indianred;"} is the state of the entire project at a given point in time.]{style="font-size: 30px"}

::::: columns
::: {.column width="55%"}
[There are three **local areas** in a git repository:]{style="font-size: 30px"}

-   [the [working copy]{style="color:indianred;"} is the current state of the directory (what you actually see)]{style="font-size: 30px"}

-   [the [staging area]{style="color:indianred;"} contains selected files that will be added to the next version]{style="font-size: 30px"}

-   [a [repository]{style="color:indianred;"} is an area containing all the versions]{style="font-size: 30px"}
:::

::: {.column width="45%"}
![](local_remote.png)

[[The [remote repository]{style="color:indianred;"} is a copy of the git project stored on GitHub.]{style="font-size: 30px"}]{.fragment}
:::
:::::

[Source of illustrations: [N. Casajus](https://frbcesab.github.io/intro-git){preview-link="false"}]{style="font-size: 22px"}

## Basic workflow

**Step1: [Stage]{style="color:indianred;"} the changes**

[After you've created or updated your files: Select the files you want to include in the next version (you can select all or only some modified files)]{style="font-size: 30px"}

![](stage.png){fig-align="center" height="80%"}

[Staged files are now in the **staging area**.]{style="font-size: 30px"}

::: notes
you may decide to commit some files later because they related to a separate task, or you may never commit then (see later gitignore)
:::

## Basic workflow

**Step2: [Commit]{style="color:indianred;"} the staged files**

[A commit saves a snapshot of your project by creating a new **version**.]{style="font-size: 30px"}

![](commit.png){fig-align="center" height="80%"}

[The commited files are not longer on the staging area.]{style="font-size: 30px"}

## Basic workflow

[A [Commit]{style="color:indianred;"} records:]{style="font-size: 30px"}

-   [**WHAT**: the specific changes (line-by-line differences) in the files that you staged]{style="font-size: 30px"}

-   [**WHO**: the person who made the changes]{style="font-size: 30px"}

-   [**WHEN**: the date of the commit]{style="font-size: 30px"}

-   [**WHY**: a manually added message stating the reason of the commit (what has been done since the last version)]{style="font-size: 30px"}

::: notes
go to the line often when typing text
:::

## Basic workflow

**Step3: [Push]{style="color:indianred;"} your commit(s) from the local to the remote repository (on GitHub)**

[This makes your work visible to collaborators and backs it up online.]{style="font-size: 30px"}

![](push.png){fig-align="center" height="80%"}

## Basic workflow

[**Pull**]{style="color:indianred;"} **these changes from the remote to your working area to update your local version**

![](pull.png){fig-align="center" height="80%"}

## Basic workflow

::::: columns
::: {.column width="70%"}
When to [commit]{style="color:indianred;"}?

-   [Commit often (make small commits)]{style="font-size: 30px"}

-   [Commit when you reach a milestone]{style="font-size: 30px"}

-   [Put separate tasks/problems in separate commits]{style="font-size: 30px"}

-   [Commit at the end of a work session]{style="font-size: 30px"}

-   [Commit files that actually work]{style="font-size: 30px"}
:::

::: {.column width="30%"}
![](fire.png)
:::
:::::

## Basic workflow

When to [push]{style="color:indianred;"}?

-   [Push often (every commits or every few commits)]{style="font-size: 30px"}

-   [Push when you reach a milestone]{style="font-size: 30px"}

-   [Push at the end of a work session]{style="font-size: 30px"}

[When to [pull]{style="color:indianred;"}?]{.fragment}

-   [Pull before starting a new work session and before pushing (if working with collaborators)]{style="font-size: 30px"}

## git and Github from Rstudio

::::: columns
::: {.column width="50%"}

[The operations can be performed by writing command lines on the *Terminal*]{style="font-size: 30px"}

![](terminal.png)

[Source of illustration: [K. V. Kulkani](https://opensource.com/article/18/1/step-step-guide-git){preview-link="false"}]{style="font-size: 22px"}

:::


::: {.column width="50%"}

::: fragment

[But we will do most of them from **RStudio**.]{style="font-size: 30px"}

![](git_rstudio.png)
:::

:::
:::::

::: notes
You will see the git window once you have created a git repo
:::

# Create a new repository

::: notes
let's practice

:::


## Create a new repository from scratch

[The best practice is to create a git and GitHub repo when you start a new project.]{style="font-size: 29px"}


::::: columns
::: {.column width="65%"}

::: {.nonincremental}
1. [Create a new GitHub repository]{style="font-size: 30px"}
:::


* [Go to *Repositories* and click on the green button *New*]{style="font-size: 25px"}
    
* [Give a name to your new repo]{style="font-size: 25px"}
    
* [Add a description]{style="font-size: 25px"}
    
* [Select if you want to make the repo public or private]{style="font-size: 25px"}
    
* [Add a README file]{style="font-size: 25px"}

* [You can also change the template of the *.gitignore* and a license (optional)]{style="font-size: 25px"}
    
:::

::: {.column width="35%"}
![](new_repo.png) 
:::
:::::


::: notes
Let's do this together

Name: no spectial caracter, avoid spaces

gitignore => see next slides

readme => let's talk about it latter

License: see the info if you want to add one (only for public repo)
::: 

<!-- discuss the choice name, private/public, .gitignore later-->


    
## Create a new repository from scratch   

::::: columns
::: {.column width="65%"}

::: {.nonincremental}
2. [Copy the URL of this repo]{style="font-size: 30px"}
:::

:::

::: {.column width="35%"}

![](clone.png)
:::
:::::

## Create a new repository from scratch 

::::: columns
::: {.column width="65%"}


::: {.nonincremental}
3. [Create a new project in RStudio]{style="font-size: 30px"}


  * [*File/New Project/Version Control/Git*]{style="font-size: 30px"}
  
  * [Paste the repo URL]{style="font-size: 30px"}
  
  * [Select the localisation of your project on your computer]{style="font-size: 30px"}
  
  * [Check the box *Open in new session*]{style="font-size: 30px"}
:::  

:::

::: {.column width="35%"}
![](new_project.png)
:::

:::::

[[Once the new project is created, you should see the git window. Note that a *.gitignore* file and a *README* file (if you created one) are added.]{style="font-size: 30px"}]{.fragment}


## Create a repository from an existing RStudio project

::: notes
Best to avoid doing this, as we should create it from the beginning for reproductibility

Let's NOT do this together
:::

::::: columns
::: {.column width="70%"}

::: {.nonincremental}
1. [Put the project under version control:]{style="font-size: 30px"}

  * [*Tools/Version Control/Project Setup*]{style="font-size: 30px"}

  * [Select *Git*]{style="font-size: 30px"}
:::

2. [Stage and commit]{style="font-size: 30px"}

::: 

::: {.column width="30%"}
![](add_git.png)
:::
:::::


3. [Create a GitHub repo and get its URL]{style="font-size: 30px"}

4. [In the RStudio Terminal, run:]{style="font-size: 30px"}

::: fragment
```{r, eval = FALSE}
git remote add origin https://github.com/MonCompte/MonDepot.git
git push -u origin main
```
:::

::: notes
Let's not do this now

To stage and commit: see next section
:::


## Public versus private repository

[A **public** repo is visible to everyone (but only collaborators can edit it):]{style="font-size: 30px"}

::: {.nonincremental}
* [for open-science and reproducibility]{style="font-size: 30px"}

* [for visibility]{style="font-size: 30px"}

* [for community contribution]{style="font-size: 30px"}
:::

::: fragment

[A **private** repo is visible only by you and collaborators to which you gave access:]{style="font-size: 30px"}

::: {.nonincremental}
* [for project containing sensitive information...]{style="font-size: 30px"}
:::

[💡 You can still make a repo public is you have information (passwords) or data that you don't want to share, by including them in the *.gitignore*.]{style="font-size: 30px"}

:::


::: notes
visibility of your work => will be used and cited

visibility of yourself: show your skills
:::


## Ignoring files with [.gitignore]{style="color:indianred;"} {.smaller}

[You can decide to tell git (and therefore GitHub) **not to track** certain files by listing them in a special file called [.gitignore.]{style="color:indianred;"}]{style="font-size: 30px"}

::::: columns
::: {.column width="55%"}
[Typical files to ignore:]{style="font-size: 30px"}

::: {.nonincremental}
* [non-open or sensitive data]{style="font-size: 30px"}

* [passwords]{style="font-size: 30px"}

* [temporary files]{style="font-size: 30px"}

* [large files]{style="font-size: 30px"}

* [files that can be regenerated easily (e.g. figures, .html, .pdf)]{style="font-size: 30px"}
:::

:::

::: {.column width="45%"}

::: fragment
[Syntax of [.gitignore]{style="color:indianred;}]{style="font-size: 30px"}

```{r, eval = FALSE}
# Ignore a specific file
README.html

# Ignore all PDF
*.pdf

# Ignore a folder
data/

# Ignore a subfolder
data/raw-data/

# Ignore a specific file in a subfolder
data/raw-data/raw-data.csv
```
:::

:::
:::::

::: fragment
[⚠️️️Files listed in [.gitignore]{style="color:indianred;"} will **not** be versioned or uploaded to GitHub.]{style="font-size: 30px"}

[You can edit n [.gitignore]{style="color:indianred;} at any time, but this won't untrack files that are already tracked.]{style="font-size: 30px"}
:::


::: notes
html or pdf files can be easily recreated
:::

# Basic workflow from RStudio

<!--voir ici, also for screen shots: https://frbcesab.github.io/intro-git/#/rstudio-and-git-1-->

::: notes
Let's pratice together
:::

## Stage the changes

*Create a new .R file with a few lines of code and save it.*

The new or modified files are listed in the *git* window in RStudio:

explain what we seen on this window



good commit message (Nicolas)

https://inbo.github.io/git-course/static/presentations/git.pdf

https://happygitwithr.com/new-github-first#make-local-changes-save-commit-1

## Commit

## Push

## Problem pushing

cf Nicolas sur problème pushing: https://frbcesab.github.io/intro-git/#/help-me-i-cant-push

https://happygitwithr.com/new-github-first#push-your-local-changes-to-github

## Pull

## Problem pulling

https://happygitwithr.com/push-rejected et Casajus

and here https://happygitwithr.com/pull-tricky




# TITLE

## Travel the past

https://happygitwithr.com/time-travel-see-past

https://inbo.github.io/git-course/course_rstudio.html#212_View_history

## suivi de projet avec le diag (les lignes qui se rejoignent)

# github visibility

where to put this?
at the end???

https://rdatatoolbox.github.io/chapters/course-github.html

github social network (or in intro?) : https://rdatatoolbox.github.io/chapters/course-github.html

account page, organisation page, repo page =\> cf cours Nicolas

## the README.md

https://happygitwithr.com/workflows-browsability

# Collaborate

## collaborate

## add a collaborator:

https://inbo.github.io/git-course/course_rstudio.html#31_Invite_collaborators

pull, work, commit, push

## conflict

https://frbcesab.github.io/intro-git/#/help-me-i-cant-pull =\> super bien expliqué

https://inbo.github.io/git-course/course_rstudio.html#29_Create_a_conflict

info elementaire = ligne (donc bcp de retour à la ligne (permet e minimiser les conflicts cf Eric))

to avoid confict push often

## issue

## github projects

here or somewhere else?

# Branch

pourquoi ?
cf Eric

## create a branch

## merge branch

# Fork and pull request

https://rdatatoolbox.github.io/chapters/course-github.html

https://happygitwithr.com/common-remote-setups

https://happygitwithr.com/fork-and-clone and following (not sure how far I want to go...)

# Clone

https://happygitwithr.com/clone

# integration continue et github action????

## Acknowledgments {.smaller}

::: nonincremental
-   Cours Nicolas: https://frbcesab.github.io/intro-git/

-   Cours Eric

-   https://inbo.github.io/git-course/course_rstudio.html
:::
